<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Resto.Front.Api.V6</name>
    </assembly>
    <members>
        <member name="T:Resto.Front.Api.Data.Device.State">
            <summary>Device state.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.State.Unknown">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.State.New">
            <summary>New.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.State.Stopped">
            <summary>Stopped.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.State.Starting">
            <summary>Starting.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.State.Running">
            <summary>Running.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.State.Paused">
            <summary>Paused.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.State.Stopping">
            <summary>Stopping.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.State.Shutdown">
            <summary>Shutdown.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.State.RuntimeSetup">
            <summary>Runtime setup.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.CashRegisterCloseEncashmentSetup">
            <summary>Cash register close encashment setup.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.CashRegisterCloseEncashmentSetup.Partial">
            <summary>Partial incassation.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.CashRegisterCloseEncashmentSetup.FullAndPayIn">
            <summary>Full incassation and pay in.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.CashRegisterCloseEncashmentSetup.AutoAndPayIn">
            <summary>Autoincassation and pay in.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.BeforeDoCheckActionResult">
            <summary>BeforeDoCheckAction will be passed to the front app for changing certain values. Set null for any field for default value.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.BeforeDoCheckActionResult.CashierName">
            <summary>Cashier name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.BeforeDoCheckActionResult.BeforeCheque">
            <summary>Markup to add to the header (at the very beginning of the cheque).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.BeforeDoCheckActionResult.AfterCheque">
            <summary>Markup to add at the end of the cheque.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.BeforeDoCheckActionResult.#ctor">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.BeforeDoCheckActionResult.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.CorrectionDocumentType">
            <summary>Correction document type.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CorrectionDocumentType.Sale">
            <summary>Income correction.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CorrectionDocumentType.Buy">
            <summary>Expense correction.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.CorrectionReasonEnum">
            <summary>Correction reason.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CorrectionReasonEnum.OwnInitiative">
            <summary>Own initiative.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CorrectionReasonEnum.Determination">
            <summary>Federal Tax Service instruction.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.ChequeTransferType">
            <summary>Item category attribute.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.ChequeTransferType.FullPrepayment">
            <summary>Goods.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.ChequeTransferType.PartialPrepayment">
            <summary>Goods.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.ChequeTransferType.Advance">
            <summary>Goods.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.ChequeTransferType.FullPayment">
            <summary>Goods.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.ChequeTransferType.PartialCredit">
            <summary>Goods.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.ChequeTransferType.Credit">
            <summary>Goods.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.ChequeTransferType.RepaymentOfCredit">
            <summary>Goods.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.TaxationSystem">
            <summary>Taxation system.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.TaxationSystem.Common">
            <summary>Common.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.TaxationSystem.SimplifiedIncomeOnly">
            <summary>Simplified. Income only.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.TaxationSystem.SimplifiedIncomeMinusExpenses">
            <summary>Simplified. Income minus expenses.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.TaxationSystem.Singletaxonimputedincome">
            <summary>Single tax on imputed income.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.TaxationSystem.Singleagriculturaltax">
            <summary>Single agricultural tax.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.TaxationSystem.Patent">
            <summary>Patent.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField">
            <summary>Cash register status field.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.ErrorCode">
            <summary>Error code.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.RegisterDateTime">
            <summary>Register date and time.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.IsOfdConnected">
            <summary>Is Ofd connected?</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.SessionStatus">
            <summary>Session status.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.RestaurantMode">
            <summary>Restaurant mode.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.OfflineMode">
            <summary>Offline mode.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.FiscalStorage">
            <summary>Fiscal storage.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.ExtendedStatus">
            <summary>Extended status.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.OfdResponseCode">
            <summary>Ofd response code.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.FnResponseCode">
            <summary>Fiscal storage response code.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.OfdBufferedDocuments">
            <summary>Ofd buffered documents.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.OfdDocumentNumber">
            <summary>Number of the Ofd document.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.OfdUrl">
            <summary>Url of Ofd site.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.OfdOrgName">
            <summary>Name of Ofd organization.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.OfdSalesAddress">
            <summary>Sales address of the Ofd.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.OfdKkmRegistrationNumber">
            <summary>Number of ofd Kkm registration.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.OfdChequeDateTime">
            <summary>Datetime of Ofd cheque.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.OfdChequeSum">
            <summary>Sum of Ofd cheque.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField.OfdTaxpayerIdNumber">
            <summary>Id number of Ofd taxpayer.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.CashRegisterTask">
            <summary>Cash register task.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CashRegisterTask.Id">
            <summary>The task id.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CashRegisterTask.CashierName">
            <summary>Cashier name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CashRegisterTask.CashierId">
            <summary>Cashier Id.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CashRegisterTask.CashierTaxpayerId">
            <summary>Taxpayer Id of the cashier.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.CashRegisterTask.#ctor(System.Nullable{System.Guid},System.String,System.Guid,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.CashRegisterTask.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.CorrectionTask">
            <summary>Correction task.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.DocumentType">
            <summary>Document type.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.CorrectionReason">
            <summary>Correction reason.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.CashSum">
            <summary>Cash sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.NonCashSum">
            <summary>Electronic payment sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.PrepaymentSum">
            <summary>Prepayment sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.CreditSum">
            <summary>Credit sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.ConsiderationSum">
            <summary>Consideration sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.DocumentDateTime">
            <summary>Document date time.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.DocumentNumber">
            <summary>Document number.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.DocumentName">
            <summary>Document name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.TaxationSystem">
            <summary>Taxation system.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.VatSum">
            <summary>VAT sum.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.#ctor(System.Nullable{System.Guid},System.String,System.Guid,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.CorrectionTask.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.BillTask">
            <summary>Bill task.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.IsRefund">
            <summary>Indicates whether the cheque is refund (Storno in Resto).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.IsCancellation">
            <summary>Belarus/Latvia localization specific option. The cashier can choose either cancellation or refund depending on the actual situation. Only the entire check can be cancelled.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.Sales">
            <summary>Sales.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.CancellingSaleNumber">
            <summary>The order number that will be canceled if cheque is refund.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.DiscountPercent">
            <summary>Discount for subtotal in percent.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.IncreasePercent">
            <summary>Increase for subtotal in percent.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.ResultSum">
            <summary>The resulting sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.DiscountSum">
            <summary>Discount for subtotal.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.IncreaseSum">
            <summary>Increase for subtotal.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.TableNumberLocalized">
            <summary>Order number and table number localized string.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.OrderNumber">
            <summary>Order number.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.TableNumber">
            <summary>Table number.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.PrintVat">
            <summary>Print VAT.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.PrintArticle">
            <summary>Print product article.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.TextAfterCheque">
            <summary>Text to print at the beginning of a document.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.BillTask.TextBeforeCheque">
            <summary>Text to print at the end of a document.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.BillTask.#ctor(System.Boolean,System.Boolean,System.Collections.Generic.List{Resto.Front.Api.Data.Device.Tasks.ChequeSale},System.Int32,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Nullable{System.Guid},System.String,System.Guid,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.BillTask.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.ChequeTask">
            <summary>Task to perform sale or refund operations.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.CashPayment">
            <summary>Cash payment sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.CardPayments">
            <summary>Card payments.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.IsPrepay">
            <summary>Is prepay?</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.CreditSum">
            <summary>Credit sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.ConsiderationSum">
            <summary>Consideration sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.PrepaymentSum">
            <summary>Advance payment sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.RoundSum">
            <summary>Rounded sum in favor of the client.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.OrderId">
            <summary>Order id for payment/return operations. Pass null for other operations.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.BillNumber">
            <summary>Bill (precheque) number.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.OperationTime">
            <summary>Operation time.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.IsOfdElectronicChequeOnly">
            <summary>Form electronic cheque only.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.OfdPhoneNumber">
            <summary>Phone number for receipt copy of cheque.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.OfdEmail">
            <summary>Email for receipt copy of cheque.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.TaxationSystem">
            <summary>Taxation system.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.SettlementAddress">
            <summary>Address of settlement.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.SettlementPlace">
            <summary>Place of settlement.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.CustomerName">
            <summary>Name of customer (person or organization).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTask.CustomerTin">
            <summary>Taxpayer Identification Number of customer (person or organization).</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.ChequeTask.#ctor(System.Decimal,System.Nullable{System.Guid},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Resto.Front.Api.Data.Device.Tasks.ChequeSale},System.Int32,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Nullable{System.Guid},System.String,System.Guid,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.ChequeTask.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.ChequeCardPayment">
            <summary>Cheque card payment.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeCardPayment.Name">
            <summary>Name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeCardPayment.Sum">
            <summary>Sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeCardPayment.PaymentRegisterId">
            <summary>Register identifier of cash register.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeCardPayment.IsDefaultNonCash">
            <summary>It is true, if the register 'PaymentRegisterId' is the default register.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeCardPayment.Comment">
            <summary>Comment.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.ChequeCardPayment.#ctor(System.String,System.Decimal,System.String,System.Boolean,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.ChequeCardPayment.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.ChequeSale">
            <summary>Cheque sale</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.Name">
            <summary>Product name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.Code">
            <summary>Nomenclature article of product.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.Price">
            <summary>Price.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.Amount">
            <summary>Amount.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.GuestName">
            <summary>The name of the guest.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.Section">
            <summary>Product section.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.Vat">
            <summary>Tax rate in percent. Only if IsTaxable is true.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.DiscountSum">
            <summary>Discount sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.IncreaseSum">
            <summary>Increase sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.Sum">
            <summary>Position cost, including all discounts and increases.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.IsTaxable">
            <summary>Is taxable?</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.Comment">
            <summary>Cheque sale items comment string.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.TaxId">
            <summary>Tax identifier.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.CommodityCode">
            <summary>Commodity code.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.Discount">
            <summary>Discount.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.Increase">
            <summary>Increase.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.TransferType">
            <summary>Transfer type attribute.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.ItemCategory">
            <summary>Item category code attribute.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.Contractor">
            <summary>Contractor (user).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeSale.GtinCode">
            <summary>14-digit Global Trade Item Number.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.ChequeSale.#ctor(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Int32,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.ChequeSale.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.Contractor">
            <summary>Contractor.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.Contractor.Name">
            <summary>Name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.Contractor.TaxpayerId">
            <summary>Taxpayer id.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.Contractor.PhoneNumber">
            <summary>Phone number.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.Contractor.#ctor(System.String,System.String,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.Contractor.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.ChequeTaskDiscountIncreaseItem">
            <summary>Cheque task discount increase item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTaskDiscountIncreaseItem.Name">
            <summary>Name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTaskDiscountIncreaseItem.Percent">
            <summary>Percent.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTaskDiscountIncreaseItem.Sum">
            <summary>Sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ChequeTaskDiscountIncreaseItem.CardNumber">
            <summary>Card number.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.ChequeTaskDiscountIncreaseItem.#ctor(System.String,System.Decimal,System.Decimal,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.ChequeTaskDiscountIncreaseItem.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.CommandExecute">
            <summary>Command execute.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CommandExecute.Name">
            <summary>Name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CommandExecute.Parameters">
            <summary>List of parameters.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.CommandExecute.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.CommandExecute.#ctor(System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.CommandExecute.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.CustomerDisplayTextTask">
            <summary>Task to display custom text to customer.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CustomerDisplayTextTask.MaxShowTimeMillis">
            <summary>Maximum display text time. After timeout waiting text will be displayed.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CustomerDisplayTextTask.TopLeft">
            <summary>Text at top left corner.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CustomerDisplayTextTask.TopRight">
            <summary>Text at top right corner.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CustomerDisplayTextTask.BottomLeft">
            <summary>Text at bottom left corner.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.CustomerDisplayTextTask.BottomRight">
            <summary>Text at bottom right corner.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.CustomerDisplayTextTask.#ctor(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.CustomerDisplayTextTask.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.ParameterExecute">
            <summary>Parameter execute.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ParameterExecute.Name">
            <summary>Name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.ParameterExecute.Value">
            <summary>Value.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.ParameterExecute.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.ParameterExecute.#ctor(System.String,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.ParameterExecute.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.RequiredParameter">
            <summary>Arbitrary operation parameter.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.RequiredParameter.Name">
            <summary>Name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.RequiredParameter.ResourceName">
            <summary>Resource id with parameter name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.RequiredParameter.ResourceTip">
            <summary>Resource id with parameter tooltip.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.RequiredParameter.Type">
            <summary>Type.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.RequiredParameter.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.RequiredParameter.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Tasks.SupportedCommand">
            <summary>Supported command.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.SupportedCommand.Name">
            <summary>Name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.SupportedCommand.ResourceName">
            <summary>Resource id with parameter name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Tasks.SupportedCommand.Parameters">
            <summary>Parameters.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.SupportedCommand.#ctor(System.String,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Tasks.SupportedCommand.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Results.DeviceInfo">
            <summary>Device status information.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.DeviceInfo.State">
            <summary>Device state: strarted, starting, stopped, etc.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.DeviceInfo.Comment">
            <summary>Device status: why doesnt work, etc.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.DeviceInfo.Settings">
            <summary>Current device settings.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.DeviceInfo.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.DeviceInfo.#ctor(Resto.Front.Api.Data.Device.State,System.String,Resto.Front.Api.Data.Device.Settings.DeviceSettings)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.DeviceInfo.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Results.FiscalRegisterTaxItem">
            <summary>Fiscal register tax item</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.FiscalRegisterTaxItem.TaxId">
            <summary>Tax id in fiscal register (for ex. 0, 1, 2, A, B, C, etc..).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.FiscalRegisterTaxItem.IsTaxable">
            <summary>True if not extempted VAT rate</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.FiscalRegisterTaxItem.IsCalculated">
            <summary>Is calculated VAT rate?</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.FiscalRegisterTaxItem.TaxPercent">
            <summary>Tax item in percent.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.FiscalRegisterTaxItem.TaxName">
            <summary>Tax name to display.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.FiscalRegisterTaxItem.#ctor(System.String,System.Boolean,System.Boolean,System.Decimal,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.FiscalRegisterTaxItem.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Results.CashRegisterVatData">
            <summary>Cash register VAT data.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterVatData.HaveTaxAmount">
            <summary>True if TaxAmount is valid</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterVatData.TaxAmount">
            <summary>Tax amount.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterVatData.HaveTaxableSum">
            <summary>True if TaxableSum is valid</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterVatData.TaxableSum">
            <summary>Taxable sum.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.CashRegisterVatData.#ctor(System.String,System.Boolean,System.Boolean,System.Decimal,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.CashRegisterVatData.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Results.PostResult">
            <summary>Device post result.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.PostResult.Success">
            <summary>Is it successful?</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.PostResult.Message">
            <summary>Message about the performed operation.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.PostResult.#ctor">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.PostResult.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Results.OkResult">
            <summary>The successful result of the executed command.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.OkResult.Warnings">
            <summary>Are there any warnings?</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.OkResult.#ctor(System.Boolean)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.OkResult.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Results.ErrorResult">
            <summary>The successful result of the executed command.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.ErrorResult.Details">
            <summary>Details about the performed operation.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.ErrorResult.#ctor(System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.ErrorResult.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Results.CashRegisterResult">
            <summary>Cash register result.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterResult.CashSum">
            <summary>Cash sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterResult.TotalIncomeSum">
            <summary>Total income sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterResult.Session">
            <summary>Session.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterResult.SerialNumber">
            <summary>Serial number.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterResult.DocumentNumber">
            <summary>Document number.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterResult.SaleNumber">
            <summary>Sale number.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterResult.BillNumber">
            <summary>Bill number.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterResult.DailyVatTotalizers">
            <summary>Daily VAT totalizers.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterResult.ChequeVatTotalizers">
            <summary>VAT totalizers for the last cheque.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterResult.RtcDateTime">
            <summary>Rtc date time.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.CashRegisterResult.#ctor(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.CashRegisterResult.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Results.CashRegisterStatus">
            <summary>Cash register status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.RegisterDateTime">
            <summary>Register date time.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.ErrorCode">
            <summary>Error code.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.HaveRegisterDateTime">
            <summary>Date and time in yyyy-MM-dd HH:mm:ss format.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.IsOfdConnected">
            <summary>Ofd connection status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.SessionStatus">
            <summary>Cafe session status: 0 - closed, 1 - open, 2 - expired.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.RestaurantMode">
            <summary>Restaurant mode.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.OfflineMode">
            <summary>Offline mode.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.FiscalStorage">
            <summary>Fiscal storage.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.ExtendedStatus">
            <summary>Extended status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.OfdResponseCode">
            <summary>Ofd response code.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.FnResponseCode">
            <summary>Fiscal storage response code.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.OfdBufferedDocuments">
            <summary>Number of documents in buffer.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.OfdDocumentNumber">
            <summary>Document number.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.OfdUrl">
            <summary>Internet address for receiving a copy of the latest electronic cheque.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.OfdOrgName">
            <summary>The name of the organization in the last cheque.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.OfdSalesAddress">
            <summary>Sale address of the last cheque.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.OfdKkmRegistrationNumber">
            <summary>Kkm registration number of the last cheque.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.OfdChequeDateTime">
            <summary>Date and time of the last cheque.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.OfdChequeSum">
            <summary>Cheque sum.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.OfdTaxpayerIdNumber">
            <summary>Id number of Ofd taxpayer.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.#ctor">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.CashRegisterStatus.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Results.Document">
            <summary>Document for printing.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.Document.Lines">
            <summary>Text lines to display.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.Document.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.Document.#ctor(System.Collections.Generic.List{System.String})">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.Document.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Results.DirectIoResult">
            <summary>The result of the operation.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.DirectIoResult.Document">
            <summary>Document for printing.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.DirectIoResult.Message">
            <summary>The message about the performed operation.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.DirectIoResult.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.DirectIoResult.#ctor(Resto.Front.Api.Data.Device.Results.Document,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.DirectIoResult.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Results.ScaleWeightResult">
            <summary>Scale weight result.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.ScaleWeightResult.Weight">
            <summary>Weight in kilograms.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.ScaleWeightResult.#ctor(System.Nullable{System.Decimal})">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.ScaleWeightResult.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Results.QueryInfoResult">
            <summary>Class that contains list of additional supported commands.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.QueryInfoResult.SupportedCommands">
            <summary>List of additional supported commands.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.QueryInfoResult.CapQueryElectronicJournalByLastSession">
            <summary>Indicates whether printing of electronic journal's buffer is supported by cash register.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.QueryInfoResult.PaymentTypesInfo">
            <summary>List of payment items.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Results.QueryInfoResult.TaxesInfo">
            <summary>List of tax items.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.QueryInfoResult.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.QueryInfoResult.#ctor(System.Collections.Generic.List{Resto.Front.Api.Data.Device.Tasks.SupportedCommand},System.Boolean)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Results.QueryInfoResult.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Settings.DeviceNumberSettingKind">
            <summary>Device number setting kind.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Settings.DeviceNumberSettingKind.Integer">
            <summary>Integer number.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Settings.DeviceNumberSettingKind.Decimal">
            <summary>Decimal floating point number.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Device.Settings.DeviceNumberSettingKind.Amount">
            <summary>Amount of something (generates control with up/down arrows).</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Settings.DeviceSettings">
            <summary>Settings for device. It's universal for any device model.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceSettings.FriendlyName">
            <summary>Friendly name for UI.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceSettings.Autorun">
            <summary>Autorun device.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceSettings.Code">
            <summary>Code.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceSettings.DeviceId">
            <summary>Device id.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceSettings.Settings">
            <summary>Device settings list. The device has the ability to define the set and behavior of its settings. Setting uniquely identified by name.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceSettings.#ctor">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceSettings.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.InternalCustomerDisplaySettings.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.InternalCustomerDisplaySettings.#ctor(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.InternalCustomerDisplaySettings.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Settings.CashRegisterSettings">
            <summary>Cash register settings.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterSettings.Font0Width">
            <summary>Count of char in a check line with the main font f0.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterSettings.OfdProtocolVersion">
            <summary>Version of fiscal data format.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterSettings.FiscalRegisterTaxItems">
            <summary>List of tax items.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterSettings.FiscalRegisterPaymentTypes">
            <summary>List of payment items.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.CashRegisterSettings.#ctor">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.CashRegisterSettings.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Settings.DeviceSetting">
            <summary>Device custom setting.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceSetting.Name">
            <summary>Name should be unique.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceSetting.Label">
            <summary>Label to display in UI.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceSetting.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceSetting.#ctor(System.String,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceSetting.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Settings.DeviceBooleanSetting">
            <summary>Device boolean setting.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceBooleanSetting.Value">
            <summary>Boolean setting value.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceBooleanSetting.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceBooleanSetting.#ctor(System.String,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceBooleanSetting.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSetting">
            <summary>Device enum setting.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSetting.IsList">
            <summary>If true then values will be represented in BackOffice as ComboBox, otherwise as RadioButton group.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSetting.Values">
            <summary>Enum values.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSetting.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSetting.#ctor(System.String,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSetting.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSettingValue">
            <summary>Device enum setting value.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSettingValue.Name">
            <summary>Name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSettingValue.Label">
            <summary>Label to display.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSettingValue.IsDefault">
            <summary>Is default value?</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSettingValue.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSettingValue.#ctor(System.String,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceCustomEnumSettingValue.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Settings.DeviceNumberSetting">
            <summary>Device number setting.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceNumberSetting.MinValue">
            <summary>Minimal number value.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceNumberSetting.MaxValue">
            <summary>Maximum number value.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceNumberSetting.Value">
            <summary>Number value.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceNumberSetting.SettingKind">
            <summary>Type of setting.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceNumberSetting.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceNumberSetting.#ctor(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},Resto.Front.Api.Data.Device.Settings.DeviceNumberSettingKind,System.String,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceNumberSetting.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Settings.DeviceStringSetting">
            <summary>Device string setting.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceStringSetting.Value">
            <summary>String value.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceStringSetting.MaxLength">
            <summary>Maximum string length.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.DeviceStringSetting.AllowedValues">
            <summary>Alowed string values.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceStringSetting.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceStringSetting.#ctor(System.String,System.String)">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.DeviceStringSetting.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Settings.FiscalRegisterPaymentType">
            <summary>Fiscal register payment item</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.FiscalRegisterPaymentType.Id">
            <summary>Payment type id in fiscal register (for ex. 0, 1, 2, A, B, C, etc..).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.FiscalRegisterPaymentType.Name">
            <summary>Payment type name to display.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.FiscalRegisterPaymentType.#ctor">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.FiscalRegisterPaymentType.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters">
            <summary>Cash register driver parameters.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.Font0Width">
            <summary>How many characters can contain one line of cheque tape with font0.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.Font1Width">
            <summary>How many characters can contain one line of cheque tape with font1.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.Font2Width">
            <summary>How many characters can contain one line of cheque tape with font2.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.CanPrintText">
            <summary>Can print text.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.ZeroCashOnClose">
            <summary>Zero cash on close.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.SupportsPayInAfterSessionClose">
            <summary>Can pay in after close.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.CanPrintBarcode">
            <summary>Can print barcode.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.CanPrintLogo">
            <summary>Can print logo.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.CanPrintQRCode">
            <summary>Can print QR code.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.CanUseFontSizes">
            <summary>Can use font sizes.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.IsCancellationSupported">
            <summary>Is cancellation supported?</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.IsBillTaskSupported">
            <summary>Is bill (precheque) printing supported? <seeealso cref="M:Resto.Front.Api.IOperationService.RegisterBillChequeTaskResolver(Resto.Front.Api.RemotingHelpers.RemotableFunc{Resto.Front.Api.Data.Orders.IOrder,System.Boolean,Resto.Front.Api.Data.Organization.IPointOfSale})" /></summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.IsRegisterStatusSupported">
            <summary>Whether the result of the execution <see cref="M:Resto.Front.Api.Devices.ICashRegister.GetCashRegisterStatus(System.Collections.Generic.IReadOnlyCollection{Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField})" /> is shown in the iikoFront tray</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.#ctor">
            <summary>Main constructor</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.ToString">
            <summary>Override for log</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.DeviceType">
            <summary>
            Type of a device.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.CashRegisterChequeExtensions">
            <summary>
            More information about do cheque
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Device.CashRegisterChequeExtensions.#ctor(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Nullable{System.Guid},System.Nullable{System.Int32})">
            <param name="beforeCheque">Markup to add to the header (at the very beginning of the cheque).</param>
            <param name="afterCheque">Markup to add at the end of the cheque.</param>
            <param name="pastOrderId">Closed order id other cafe session.</param>
            <param name="pastOrderNumber">Closed order number other cafe session.</param>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.CashRegisterChequeExtensions.BeforeCheque">
            <summary>
            Markup to add to the header (at the very beginning of the cheque).
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.CashRegisterChequeExtensions.AfterCheque">
            <summary>
            Markup to add at the end of the cheque.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.CashRegisterChequeExtensions.PastOrderId">
            <summary>
            Closed order id other cafe session.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Device.CashRegisterChequeExtensions.PastOrderNumber">
            <summary>
            Closed order number other cafe session.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Device.ICafeSession">
            <summary>Current open cafe session. <see cref="M:Resto.Front.Api.IOperationService.GetCafeSessionByCashRegister(Resto.Front.Api.Data.Device.ICashRegisterInfo)" /></summary>	
        </member>
        <member name="T:Resto.Front.Api.Data.Cheques.Attributes">
            <summary>
            Names of the xml tag attributes used for cheques printing (<see cref="T:Resto.Front.Api.Data.Cheques.CashCheque"/>, <see cref="T:Resto.Front.Api.Data.Cheques.BillCheque"/>, <see cref="T:Resto.Front.Api.Data.Cheques.ReceiptSlip"/>).
            </summary>
            <seealso cref="T:Resto.Front.Api.Data.Cheques.AttributeValues"/>
            <seealso cref="T:Resto.Front.Api.Data.Cheques.Tags"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.Bell">
            <summary>
            Turns on the a kitchen bell or opens cash drawer before printing a document. Works only for printers.
            </summary>
            Supported values:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.Empty"/></item>
            </list>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Tags.Doc"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.AutoWidth">
            <summary>
            Column width will be adjusted by the content.
            </summary>
            Supported values:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.Empty"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.MinWidth">
            <summary>
            Minimum column width (in chars).
            Default is 1.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.MaxWidth">
            <summary>
            Maximum column width (in chars).
            Default is unspecified.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.Width">
            <summary>
            Fixed column width (in chars).
            Default is unspecified.
            Cannot be used with <see cref="F:Resto.Front.Api.Data.Cheques.Attributes.AutoWidth"/>.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.ColumnSpan">
            <summary>
            Stretches the cell into specified number of columns.
            Default is 1.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.CellSpacing">
            <summary>
            Width of the space between table columns (in chars).
            Default is 1.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Tags.Table"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.Align">
            <summary>
            Horizontal alignment of the content.
            </summary>
            Supported values:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.Justify"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.Left"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.Right"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.Center"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.VerticalAlign">
            <summary>
            Vertical alignment of the content.
            </summary>
            Supported values:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.Center"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.Top"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.Bottom"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.Formatter">
            <summary>
            Text wrapping mode.
            </summary>
            Supported values:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.CutText"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.SplitText"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.WrapText"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.Font">
            <summary>
            Specifies the font size for the table row (should be set for the first cell of the row, will be ignored for the subsequent cells).
            Inner elements inherit this setting.
            </summary>
            Supported values:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.SmallFont"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.MediumFont"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.AttributeValues.LargeFont"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.Symbols">
            <summary>
            Sets a new character (or character set) used to fill in the white space.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Tags.Fill"/>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Tags.LineCell"/>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Tags.Line"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.Left">
            <summary>
            Specifies the left part of the <see cref="F:Resto.Front.Api.Data.Cheques.Tags.Pair"/> element.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.Right">
            <summary>
            Specifies the right part of the <see cref="F:Resto.Front.Api.Data.Cheques.Tags.Pair"/> element.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Attributes.Fit">
            <summary>
            Specifies which value (<see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Left"/> or <see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Right"/>) will be adjusted by the content.
            Default is <see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Right"/>.
            </summary>
            Supported values:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Left"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Right"/></item>
            </list>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Tags.Pair"/>
        </member>
        <member name="T:Resto.Front.Api.Data.Cheques.Tags">
            <summary>
            Names of the xml tags used for cheques printing (<see cref="T:Resto.Front.Api.Data.Cheques.CashCheque"/>, <see cref="T:Resto.Front.Api.Data.Cheques.BillCheque"/>, <see cref="T:Resto.Front.Api.Data.Cheques.ReceiptSlip"/>).
            </summary>
            <seealso cref="T:Resto.Front.Api.Data.Cheques.Attributes"/>
            <seealso cref="T:Resto.Front.Api.Data.Cheques.AttributeValues"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Doc">
            <summary>
            Root of the document.
            </summary>
            <remarks>
            Do not use this tag when embedding something into existing document.
            For example, <see cref="T:Resto.Front.Api.Data.Cheques.BillCheque"/> template already has the root tag, so your <see cref="P:Resto.Front.Api.Data.Cheques.BillCheque.BeforeFooter"/> shouldn't contain another one.
            </remarks>
            Supported attributes:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Bell"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Font"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Align"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Formatter"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Justify">
            <summary>
            Justify a content.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Left">
            <summary>
            Align a content to the left.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Right">
            <summary>
            Align a content to the right.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Center">
            <summary>
            Align a content by the center.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.SmallFont">
            <summary>
            Sets the smallest possible font size of the content, used by default.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.MediumFont">
            <summary>
            Sets medium font size of the content.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.LargeFont">
            <summary>
            Sets the largest possible font size of the content.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.CutText">
            <summary>
            Excess text will be trimmed out.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.SplitText">
            <summary>
            Split text into lines on whitespaces.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.WrapText">
            <summary>
            Split text into lines on any chars.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Table">
            <summary>
            Prints the table using two inner tags — <see cref="F:Resto.Front.Api.Data.Cheques.Tags.Columns"/> and <see cref="F:Resto.Front.Api.Data.Cheques.Tags.Cells"/>, first declares the layout of the table, latter provides cell values.
            </summary>
            Supported attributes:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.CellSpacing"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Columns">
            <summary>
            Declares a set of columns (<see cref="F:Resto.Front.Api.Data.Cheques.Tags.Column"/>).
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Column">
            <summary>
            Declares single column inside <see cref="F:Resto.Front.Api.Data.Cheques.Tags.Columns"/> collection.
            </summary>
            Supported attributes:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Align"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.VerticalAlign"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Formatter"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.AutoWidth"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Width"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.MinWidth"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.MaxWidth"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Cells">
            <summary>
            Table cells, serialized line by line (LTR).
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Cell">
            <summary>
            Single cell of the table with arbitrary content including other tags.
            </summary>
            Supported attributes:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.ColumnSpan"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Font"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.TextCell">
            <summary>
            Single cell of the table with text content.
            </summary>
            Supported attributes:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Font"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.LineCell">
            <summary>
            Cell will be stretched into all columns of a parent table filled by specified <see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Symbols"/> attribute.
            Default symbol is "-".
            </summary>
            <remarks>
            Should be used as an empty element.
            </remarks>
            Supported attributes:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Symbols"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.NewParagraph">
            <summary>
            Begins new paragraph. Text after this element will start on a new line.
            </summary>
            <remarks>
            Should be used as an empty element.
            </remarks>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Pagecut">
            <summary>
            Page cut.
            </summary>
            <remarks>
            Should be used as an empty element.
            </remarks>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Pair">
            <summary>
            Prints two values, first part is assigned to <see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Left"/> attribute and will be aligned to the left,
            second one is assigned to <see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Right"/> attribute and will be aligned to the right.
            </summary>
            <remarks>
            Should be used as an empty element.
            </remarks>
            Required attributes:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Left"/></item>
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Right"/></item>
            </list>
            Supported attributes:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Fit"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Fill">
            <summary>
            Overrides the character used to fill in the whitespace.
            A new character (or character set) is specified by the <see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Symbols"/> attribute.
            </summary>
            <remarks>
            <list type="number">
            <item>Not inherited by a table if it is wrapped with the <see cref="F:Resto.Front.Api.Data.Cheques.Tags.Fill"/> tag.</item>
            <item>Tag does not override the whitespace characters of custom text.</item>
            </list>
            </remarks>
            Required attributes:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Symbols"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.Line">
            <summary>
            Prints a line filled by specified <see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Symbols"/> attribute.
            Default symbol is "-".
            </summary>
            <remarks>
            Should be used as an empty element.
            </remarks>
            Supported attributes:
            <list type="bullet">
            <item><see cref="F:Resto.Front.Api.Data.Cheques.Attributes.Symbols"/></item>
            </list>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.Tags.QRCode">
            <summary>
            Formatting embedded text as QR code.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Cheques.AttributeValues">
            <summary>
            Values of the xml tag attributes used for cheques printing (<see cref="T:Resto.Front.Api.Data.Cheques.CashCheque"/>, <see cref="T:Resto.Front.Api.Data.Cheques.BillCheque"/>, <see cref="T:Resto.Front.Api.Data.Cheques.ReceiptSlip"/>).
            </summary>
            <seealso cref="T:Resto.Front.Api.Data.Cheques.Attributes"/>
            <seealso cref="T:Resto.Front.Api.Data.Cheques.Tags"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.Empty">
            <summary>
            Empty value applicable to attributes for which only their presence is important.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.Justify">
            <summary>
            Justify a content.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.Align"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.Left">
            <summary>
            Align a content to the left.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.Align"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.Right">
            <summary>
            Align a content to the right.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.Align"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.Center">
            <summary>
            Align a content by the center.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.Align"/>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.VerticalAlign"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.Top">
            <summary>
            Align a content to the top.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.VerticalAlign"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.Bottom">
            <summary>
            Align a content to the bottom.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.VerticalAlign"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.SmallFont">
            <summary>
            The smallest possible font size, used by default.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.Font"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.MediumFont">
            <summary>
            Medium font size.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.Font"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.LargeFont">
            <summary>
            The largest possible font size.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.Font"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.CutText">
            <summary>
            Excess text will be trimmed out.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.Formatter"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.SplitText">
            <summary>
            Split text into lines on whitespaces.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.Formatter"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Cheques.AttributeValues.WrapText">
            <summary>
            Split text into lines on any chars.
            </summary>
            <seealso cref="F:Resto.Front.Api.Data.Cheques.Attributes.Formatter"/>
        </member>
        <member name="T:Resto.Front.Api.Data.Cheques.ReceiptSlip">
            <summary>Slip to print on receipt-cheque printer.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Cheques.ReceiptSlip.Doc">
            <summary>Markup.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Cheques.BillCheque.BeforeHeader">
            <summary>Markup to add before header (at the very beginning of the cheque).</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Cheques.BillCheque.AfterHeader">
            <summary>Markup to add after header (including date, a name of the waiter and other) and before cheque data.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Cheques.BillCheque.BeforeFooter">
            <summary>Markup to add after cheque data (after result sums).</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Cheques.BillCheque.AfterFooter">
            <summary>Markup to add at the end of the cheque.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Cheques.CashCheque.BeforeCheque">
            <summary>Markup to add to the header (at the very beginning of the cheque).</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Cheques.CashCheque.AfterCheque">
            <summary>Markup to add at the end of the cheque.</summary>	
        </member>
        <member name="T:Resto.Front.Api.Data.Brd.Gender">
            <summary>
            Gender of a client.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.Gender.NotSpecified">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.Gender.Male">
            <summary>
            Male.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.Gender.Female">
            <summary>
            Female.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Brd.SurveyType">
            <summary>
            Describes the type of the survey item.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.SurveyType.Common">
            <summary>
            Common question.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.SurveyType.Courier">
            <summary>
            Courier.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.SurveyType.DeliveryOperator">
            <summary>
            Delivery operator.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.SurveyType.DeliveryFood">
            <summary>
            Food quality in delivery.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Brd.DeliverySmsSendingEventType">
            <summary>
            Дубликат одноименного серверного перечисления для нужд api.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Brd.ReserveCancelReason">
            <summary>
            Reason why planned event failed.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.ReserveCancelReason.ClientNotAppeared">
            <summary>
            Client didn't come timely.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.ReserveCancelReason.ClientRefused">
            <summary>
            Client changed his mind.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.ReserveCancelReason.Other">
            <summary>
            Any reason other than <see cref="F:Resto.Front.Api.Data.Brd.ReserveCancelReason.ClientNotAppeared"/> and <see cref="F:Resto.Front.Api.Data.Brd.ReserveCancelReason.ClientRefused"/>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Brd.ReserveStatus">
            <summary>Describes the status of a reserve or a banquet.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.ReserveStatus.New">
            <summary>The reserve or banquet has been created. This means that corresponding tables are reserved for specified date in future.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.ReserveStatus.Started">
            <summary>he banquet has been started. This means that event is active, so corresponding tables are occupied by guests.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Brd.ReserveStatus.Closed">
            <summary>The reserve or banquet has been closed. For reserve this means closing the reservation due to customer coming or customer cancellation. For banquet this means that event was either cancelled or successfully ended.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.DeliverySmsNotificationTemplates.SumChange">
            <summary>Sms template for delivery order sum change notification.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.DeliverySmsNotificationTemplates.ChangeToUnconfirmedStatus">
            <summary>Sms template for delivery change to Unconfirmed status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.DeliverySmsNotificationTemplates.ChangeToNewStatus">
            <summary>Sms template for delivery change to New status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.DeliverySmsNotificationTemplates.ChangeToCookingStartedStatus">
            <summary>Sms template for delivery change to cooking started status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.DeliverySmsNotificationTemplates.ChangeToCookingCompletedStatus">
            <summary>Sms template for delivery change to cooking completed status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.DeliverySmsNotificationTemplates.ChangeToWaitingStatus">
            <summary>Sms template for delivery change to New status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.DeliverySmsNotificationTemplates.ChangeToOnWayStatus">
            <summary>Sms template for delivery change to OnWay status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.DeliverySmsNotificationTemplates.ChangeToDeliveredStatus">
            <summary>Sms template for delivery change to Delivered status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.DeliverySmsNotificationTemplates.ChangeToClosedStatus">
            <summary>Sms template for delivery change to Closed status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.DeliverySmsNotificationTemplates.ChangeToCancelledStatus">
            <summary>Sms template for delivery change to Cancelled status.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IReserve.Order">
            <summary>Order used to form menu for banquet, specify serve sequence (via courses), prepay.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IReserve.GuestsComingTime">
            <summary>Gets the time when guests came and reserve was closed or banquet was started.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IReserve.EstimatedStartTime">
            <summary>Gets the estimated time when reserve will be closed or banquet will be started.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IReserve.Comment">
            <summary>Gets the optional comment for reserve or banquet.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IReserve.Status">
            <summary>Gets the status of the reserve or banquet.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IReserve.CancelReason">
            <summary>The reserve cancellation reason or <c>null</c> if the reserve hasn't been canceled.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IReserve.Tables">
            <summary>Gets the reserved table.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IReserve.GuestsCount">
            <summary>Gets estimated guests count.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IReserve.Duration">
            <summary>Gets estimated banquet duration.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IReserve.ShouldRemind">
            <summary>Whether to remind staff to prepare table beforehand. Table preparation time can be changed via iikoOffice (1 hour by default).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IStreet.ExternalId">
            <summary>Identifier in external street database (for example, KLADR).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IStreet.Revision">
            <summary>Incremental version of the entity.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.InBlacklist">
            <summary>Is client in blacklist.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.BlacklistReason">
            <summary>Reason why client was added to blacklist.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.MarketingSource">
            <summary>Advertising Source of customer (for example, some web site, call center)</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.IikoNetId">
            <summary>Id of client's account in Plazius.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.IikoBizId">
            <summary>Id of client's account in iiko.biz.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.DateCreated">
            <summary>Date of client's creation.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.LinkedCounteragent">
            <summary>Linked counteragent. Used for specific payment logic in delivery.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.Revision">
            <summary>Incremental version of the entity.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.ReceivesNotifications">
            <summary>Does the client receive SMS notifications, or not.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.BirthDate">
            <summary>Date the client was born.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.LastOrderDate">
            <summary>Date of last order client done.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.Gender">
            <summary>Gender.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.IClient.PersonalDataConsent">
            <summary>Has the client given a consent for personal data processing.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Brd.ISurveyItem">
            <summary>Item of client's survey.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.ISurveyItem.Type">
            <summary>Type of survey item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Brd.ISurveyItem.Question">
            <summary>Question itself.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Common.EntityChangedEventArgs`1">
            <summary>
            Arguments for entity changed notification event.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Common.EntityChangedEventArgs`1.#ctor(`0,Resto.Front.Api.Data.Common.EntityEventType)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Common.EntityChangedEventArgs`1.Entity">
            <summary>
            Changed entity.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Common.EntityChangedEventArgs`1.EventType">
            <summary>
            Entity changed event type.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Common.EntityEventType">
            <summary>
            Type of entity changed event.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Common.EntityEventType.Created">
            <summary>
            Entity was created.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Common.EntityEventType.Updated">
            <summary>
            Entity was updated.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Common.EntityEventType.Removed">
            <summary>
            Entity was removed.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Common.ExternalOperationChangedEventArgs">
            <summary>
            Arguments for external operation changed notification event.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Common.ExternalOperationChangedEventArgs.ServiceName">
            <summary>
            Name of the service.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Common.ExternalOperationChangedEventArgs.OperationName">
            <summary>
            Name of the operation.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Common.ExternalOperationChangedEventArgs.Registered">
            <summary>
            Whether the operation was registered or unregistered.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Common.ExternalOperationChangedEventArgs.#ctor(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Resto.Front.Api.Data.Common.IEntity">
            <summary>Represents an object which have an identifier.</summary>	
        </member>
        <member name="T:Resto.Front.Api.Data.Common.IVersionedEntity">
            <summary>Represents an entity which have a revision.</summary>	
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.RateScheduleInterval">
            <summary>
            Describes a time interval within a week, which is used in <see cref="T:Resto.Front.Api.Data.Orders.RateSchedule"/>.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.RateScheduleInterval.Day">
            <summary>
            Day of week of the interval.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.RateScheduleInterval.Start">
            <summary>
            Interval's start point offset relative to start of a day or a service depending on <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingMode"/>.
            </summary>
            <remarks>
            For <see cref="F:Resto.Front.Api.Data.Orders.ServiceTimingMode.DayTime"/> valid values range is [0h; 24h), which means all the day (<see cref="P:Resto.Front.Api.Data.Orders.RateScheduleInterval.Day"/>) excluding it's right bound.
            For <see cref="F:Resto.Front.Api.Data.Orders.ServiceTimingMode.ServiceTime"/> valid values range is [0h; 12h), because max service duration is 12h.
            </remarks>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.RateScheduleInterval.End">
            <summary>
            Interval's end point offset relative to start of a day or a service depending on <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingMode"/>.
            </summary>
            <remarks>
            For <see cref="F:Resto.Front.Api.Data.Orders.ServiceTimingMode.DayTime"/> valid values range is (0h; 24h], which means all the day (<see cref="P:Resto.Front.Api.Data.Orders.RateScheduleInterval.Day"/>) exluding it's left bound.
            For <see cref="F:Resto.Front.Api.Data.Orders.ServiceTimingMode.ServiceTime"/> valid values range is (0h; 12h], because max service duration is 12h.
            Anyway, <see cref="P:Resto.Front.Api.Data.Orders.RateScheduleInterval.End"/> is greater than <see cref="P:Resto.Front.Api.Data.Orders.RateScheduleInterval.Start"/>, so that interval has positive length.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.Data.Orders.RateScheduleInterval.#ctor(System.DayOfWeek,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Data.Orders.RateScheduleInterval"/>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.RateSchedule">
            <summary>
            A schedule of a service rates.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingMode">
            <summary>
            Time rate calculation mode, which specifies how to treat rate schedule interval bounds.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.RateSchedule.MinimumDuration">
            <summary>
            Minumum duration of a service or <c>null</c> if there is no lower limit.
            If the lower limit is set and the actual duration is below of limit, it will be rounded up.
            </summary>
            <example>
            <list type="bullet">
            <item>
            Actual service duration is 15 minutes, <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/> is 10 minutes and <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.MinimumDuration"/> is not set: service duration will just be rounded up to a multiple of <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/>, the result is 20 minutes.
            </item>
            <item>
            Actual service duration is 15 minutes, <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/> is 10 minutes and <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.MinimumDuration"/> is 1 hour: at first service duration will be rounded up to 1 hour to meet the <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.MinimumDuration"/> and then will be rounded up to a multiple of <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/>, the result is 1 hour.
            </item>
            <item>
            Actual service duration is 75 minutes, <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/> is 10 minutes and <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.MinimumDuration"/> is 1 hour: 75 mins already meets the <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.MinimumDuration"/>, so it will only be rounded up to a multiple of <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/>, the result is 1 hour 20 mins.
            </item>
            </list> 
            </example>
            <seealso cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep">
            <summary>
            Length of the service duration increment steps. Actual service duration is always rounded up to a multiple of this value.
            </summary>
            <example>
            <list type="bullet">
            <item>
            Actual service duration is 15 minutes, <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/> is 10 minutes and <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.MinimumDuration"/> is not set: service duration will just be rounded up to a multiple of <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/>, the result is 20 minutes.
            </item>
            <item>
            Actual service duration is 15 minutes, <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/> is 10 minutes and <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.MinimumDuration"/> is 1 hour: at first service duration will be rounded up to 1 hour to meet the <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.MinimumDuration"/> and then will be rounded up to a multiple of <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/>, the result is 1 hour.
            </item>
            <item>
            Actual service duration is 75 minutes, <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/> is 10 minutes and <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.MinimumDuration"/> is 1 hour: 75 mins already meets the <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.MinimumDuration"/>, so it will only be rounded up to a multiple of <see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/>, the result is 1 hour 20 mins.
            </item>
            </list> 
            </example>
            <seealso cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.RateSchedule.Items">
            <summary>
            List of non-default rates. Each item is a set of non-intersecting time intervals having own price.
            All time intervals that are not covered by any of the schedule items have a default price.
            </summary>
            <remarks>
            Time intervals pricing difference is implemented via binding to different products (<see cref="T:Resto.Front.Api.Data.Assortment.IProduct"/>).
            Order item of a service type (<see cref="T:Resto.Front.Api.Data.Orders.IOrderServiceItem"/>) has a primary service product (<see cref="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.Service"/>)
            and additional rate products ( <see cref="P:Resto.Front.Api.Data.Orders.RateScheduleItem.Service"/>), which are specified by the rates schedule (<see cref="P:Resto.Front.Api.Data.Assortment.IProduct.RateSchedule"/>).
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.Data.Orders.RateSchedule.#ctor(Resto.Front.Api.Data.Orders.ServiceTimingMode,System.Nullable{System.TimeSpan},System.TimeSpan,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Orders.RateScheduleItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Data.Orders.RateSchedule"/>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.RateScheduleItem">
            <summary>
            Item of a <see cref="T:Resto.Front.Api.Data.Orders.RateSchedule"/> describing rate of one or more time intervals (<see cref="P:Resto.Front.Api.Data.Orders.RateScheduleItem.Intervals"/>).
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.RateScheduleItem.Service">
            <summary>
            Product that represents the rate. Expected to be of type <see cref="F:Resto.Front.Api.Data.Assortment.ProductType.Rate"/>.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.RateScheduleItem.Intervals">
            <summary>
            One or more intervals 
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Orders.RateScheduleItem.#ctor(Resto.Front.Api.Data.Assortment.IProduct,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Orders.RateScheduleInterval})">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Data.Orders.RateScheduleItem"/>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.ServiceTimingMode">
            <summary>
            Time rate calculation modes, which specifies how to treat rate schedule interval bounds.
            </summary>
            <seealso cref="T:Resto.Front.Api.Data.Orders.RateSchedule"/>
            <seealso cref="T:Resto.Front.Api.Data.Orders.RateScheduleInterval"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.ServiceTimingMode.DayTime">
            <summary>
            Rate schedule interval bounds are relative to a day start.
            Allows to have different rates for different times of a day, e.g. reduced price for morning hours and advanced price for evening hours,
            which helps to keep balance between prime time and unpopular periods of a day.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.ServiceTimingMode.ServiceTime">
            <summary>
            Rate schedule interval bounds are relative to a service start.
            It allows to have different rates for different service hours, e.g. full price for the first hour of the service, 90% price for the second hour and so on,
            which motivates to increase service duration.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.ISelectiveDiscountItemSettings">
            <summary>
            Order items to which the discount item is applied selectively.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.ISelectiveDiscountItemSettings.Products">
            <summary>
            Order item products to which the discount item is applied selectively.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.ISelectiveDiscountItemSettings.Modifiers">
            <summary>
            Order item modifiers to which the discount item is applied selectively.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.ISelectiveDiscountItemSettings.CompoundItemComponents">
            <summary>
            Compound item components to which the discount item is applied selectively.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.WriteoffType">
            <summary>
            Describes available write-off types of removal type.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.WriteoffType.None">
            <summary>Removing without write-off.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.WriteoffType.Cafe">
            <summary>Removing to the cafe is available.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.WriteoffType.Waiter">
            <summary>Removing to the order's waiter or current user is available.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.WriteoffType.User">
            <summary>Removing to the user with open personal session is available.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.WriteoffOptions">
            <summary>
            Options to delete and write-off printed order items.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.WriteoffOptions.Type">
            <summary>
            Describes the write-off type, which required to delete printed dishes.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.WriteoffOptions.Type.Auto">
            <summary>Uses the first available write-off type.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.WriteoffOptions.Type.WithoutWriteoff">
            <summary>Uses removing without write-off.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.WriteoffOptions.Type.WriteoffToCafe">
            <summary>Uses removing to the cafe.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.WriteoffOptions.Type.WriteoffToWaiter">
            <summary>Uses removing to the order's waiter or current user.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.WriteoffOptions.Type.WriteoffToUser">
            <summary>Uses removing to the user with open personal session.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.WriteoffOptions.RemovalType">
            <summary>Used removal type to delete printed order items.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.WriteoffOptions.WriteoffType">
            <summary>Used write-off type to delete printed order items.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.WriteoffOptions.User">
            <summary>Selected user, which required to <see cref="F:Resto.Front.Api.Data.Orders.WriteoffOptions.Type.WriteoffToUser"/> write-off type.</summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Orders.WriteoffOptions.Auto(Resto.Front.Api.Data.Orders.IRemovalType,Resto.Front.Api.Data.Security.IUser)">
            <summary>
            Returns the write-off options which use the first available write-off type.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Orders.WriteoffOptions.WithoutWriteoff(Resto.Front.Api.Data.Orders.IRemovalType)">
            <summary>
            Returns the write-off options which delete printed order item without write-off.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Orders.WriteoffOptions.WriteoffToCafe(Resto.Front.Api.Data.Orders.IRemovalType)">
            <summary>
            Returns the write-off options which delete printed order item to the cafe.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Orders.WriteoffOptions.WriteoffToWaiter(Resto.Front.Api.Data.Orders.IRemovalType)">
            <summary>
            Returns the write-off options which delete printed order item to the order's waiter or current user.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Orders.WriteoffOptions.WriteoffToUser(Resto.Front.Api.Data.Orders.IRemovalType,Resto.Front.Api.Data.Security.IUser)">
            <summary>
            Returns the write-off options which delete printed order item to the user with open personal session.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.CheckSplitRequiredResult">
            <summary>
            Checking should you call <see cref="M:Resto.Front.Api.IOperationService.SplitOrderBetweenCashRegisters(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder)"/> or not.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.CheckSplitRequiredResult.Disabled">
            <summary>
            Not necessary to split order by calling <see cref="M:Resto.Front.Api.IOperationService.SplitOrderBetweenCashRegisters(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder)"/> before any payment actions.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.CheckSplitRequiredResult.Allowed">
            <summary>
            You should ask user whether call <see cref="M:Resto.Front.Api.IOperationService.SplitOrderBetweenCashRegisters(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder)"/> or not before calling 
            <see cref="M:Resto.Front.Api.IOperationService.PayOrderAndPayOutOnUser(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Payments.IPaymentType,System.Decimal)"/> and <see cref="M:Resto.Front.Api.IOperationService.PayOrder(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder)"/>.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.CheckSplitRequiredResult.Required">
            <summary>
            Necessary to split order by calling <see cref="M:Resto.Front.Api.IOperationService.SplitOrderBetweenCashRegisters(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder)"/> before any payment actions.
            If you won't do this, <see cref="M:Resto.Front.Api.IOperationService.PayOrderAndPayOutOnUser(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Payments.IPaymentType,System.Decimal)"/> and <see cref="M:Resto.Front.Api.IOperationService.PayOrder(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder)"/> will throw exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.ProductsSellingPossibility">
            <summary>
            Member of <see cref="T:Resto.Front.Api.Data.Orders.ProductsSellingRestrictions"/>, check result of <see cref="M:Resto.Front.Api.IOperationService.CheckProductsSellingRestrictions(Resto.Front.Api.Data.Security.ICredentials,System.Collections.Generic.Dictionary{Resto.Front.Api.Data.Assortment.IProduct,System.Decimal})" /> method.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.ProductsSellingPossibility.Allowed">
            <summary>
             Current user can sell specified amount of products without restriction.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.ProductsSellingPossibility.AllowedForced">
            <summary>
            Selling of specified amount of products is restricted, but current user can sell them forcibly.
            Consider asking user for confirmation to sell products with negative remaining amount.
            Products with insufficient amount can be retrieved from <see cref="P:Resto.Front.Api.Data.Orders.ProductsSellingRestrictions.ProductsExceedRemainingAmounts" />.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.ProductsSellingPossibility.Restricted">
            <summary>
            Selling of specified amount of products is restricted and current user hasn't permisstion to sell them forcibly.
            Products with insufficient amount can be retrieved from <see cref="P:Resto.Front.Api.Data.Orders.ProductsSellingRestrictions.ProductsExceedRemainingAmounts" />.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.OrderItemCourse">
            <summary>Describes the course (cooking and serving sequence) of an order item.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Vip">
            <summary>Order item should be cooked and served as soon as possible, this is highest priority.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemCourse.First">
            <summary>Order item cooking should start immediately after service cheque printing, this is default priority.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Second">
            <summary>Order item cooking should start after second course serve cheque printing, items of this priority should be served after <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.First"/>.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Third">
            <summary>Order item cooking should start after third course serve cheque printing, items of this priority should be served after <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Second"/>.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Fourth">
            <summary>Order item cooking should start after fourth course serve cheque printing, items of this priority should be served after <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Third"/>.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Fifth">
            <summary>Order item cooking should start after fifth course serve cheque printing, items of this priority should be served after <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Fourth"/>. This course usage possibility depends on <see cref="P:Resto.Front.Api.Data.Organization.ITerminalsGroup.MaxCourseNumber"/> setting.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Sixth">
            <summary>Order item cooking should start after sixth course serve cheque printing, items of this priority should be served after <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Fifth"/>. This course usage possibility depends on <see cref="P:Resto.Front.Api.Data.Organization.ITerminalsGroup.MaxCourseNumber"/> setting.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Seventh">
            <summary>Order item cooking should start after seventh course serve cheque printing, items of this priority should be served after <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Sixth"/>. This course usage possibility depends on <see cref="P:Resto.Front.Api.Data.Organization.ITerminalsGroup.MaxCourseNumber"/> setting.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Eighth">
            <summary>Order item cooking should start after eighth course serve cheque printing, items of this priority should be served after <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Seventh"/>. This course usage possibility depends on <see cref="P:Resto.Front.Api.Data.Organization.ITerminalsGroup.MaxCourseNumber"/> setting.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Ninth">
            <summary>Order item cooking should start after ninth course serve cheque printing, items of this priority should be served after <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Eighth"/>. This course usage possibility depends on <see cref="P:Resto.Front.Api.Data.Organization.ITerminalsGroup.MaxCourseNumber"/> setting.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Tenth">
            <summary>Order item cooking should start after tenth course serve cheque printing, items of this priority should be served after <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Ninth"/>. This course usage possibility depends on <see cref="P:Resto.Front.Api.Data.Organization.ITerminalsGroup.MaxCourseNumber"/> setting.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Default">
            <summary>Order items has first course priority by default.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.OrderItemStatus">
            <summary>Describes the status of an order item.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemStatus.Added">
            <summary>Newly added item.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemStatus.PrintedNotCooking">
            <summary>Item was printed with low priority (<see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Second"/>, <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Third"/>, <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Fourth"/>) and corresponding course serve cheque wasn't printed yet.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemStatus.CookingStarted">
            <summary>Order item was printed with high or normal priority (<see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Vip"/>, <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.First"/>) or was printed with low priority and it's corresponding course serve cheque was also printed.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemStatus.CookingCompleted">
            <summary>Order item cooking completed, so it's ready to serve.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderItemStatus.Served">
            <summary>Order item is served.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.OrderStatus">
            <summary>Describes the status of an order.</summary>	
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderStatus.New">
            <summary>Newly created order. This status corresponds to lifetime from creation to ready-to-pay state.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderStatus.Bill">
            <summary>Bill cheque printed order. This status corresponds to lifetime between billing and payment.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderStatus.Closed">
            <summary>Paid order.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.OrderStatus.Deleted">
            <summary>Deleted order.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.ProductsSellingRestrictions">
            <summary>
            Check result of <see cref="M:Resto.Front.Api.IOperationService.CheckProductsSellingRestrictions(Resto.Front.Api.Data.Security.ICredentials,System.Collections.Generic.Dictionary{Resto.Front.Api.Data.Assortment.IProduct,System.Decimal})" /> method.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.ProductsSellingRestrictions.MinimumItemAmount">
            <summary>
            Minimum possible amount of the order item.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Orders.ProductsSellingRestrictions.MaximumItemAmount">
            <summary>
            Maximum possible amount of the order item.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.ProductsSellingRestrictions.CheckResult">
            <summary>
            If current user can add these products with such amounts.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.ProductsSellingRestrictions.ProductsExceedRemainingAmounts">
            <summary>
            Products and amounts of products that can not be added to order.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IRemovalType.Name">
            <summary>Name of removal type</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IRemovalType.WriteoffType">
            <summary>Write-off types of removal type.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IRemovalType.CommentRequired">
            <summary>If <c>true</c>, printed order item deletion comment is mandatory, otherwise comment is optional.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderGuestItem.Rank">
            <summary>Guest's rank in order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCombo.ProgramId">
            <summary>Identifier of the loyalty program.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.IOrderRootItem">
            <summary>Base type for all order items.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderRootItem.Status">
            <summary>Gets the status of the current order item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderRootItem.Waiter">
            <summary>Waiter who made latest changes to the order item.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.IOrderCookingItem">
            <summary>Base type for all foody order items (those which may be cooked in the kitchen).</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCookingItem.CookingTime">
            <summary>Standard cooking time defined by settings if cooking is started, otherwise <c>null</c>.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCookingItem.Course">
            <summary>Gets the course of the current order item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCookingItem.Size">
            <summary>Gets size of the order item if it's product or template has scale, otherwise <c>null</c>.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCookingItem.Kitchen">
            <summary>Product cooking place.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.IOrderProductItem">
            <summary>Regular order item representing single product.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderProductItem.OpenPrice">
            <summary>Manually set price of the product.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderProductItem.ResultSum">
            <summary>Total sum to be paid, sum with discounts and both included and excluded vat.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderProductItem.TaxPercent">
            <summary>Tax percent or <c>null</c> for not taxed order items.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderProductItem.AssignedModifiers">
            <summary>Modifiers assigned to order item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderProductItem.AvailableSimpleModifiers">
            <summary>Simple modifiers that are available for order item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderProductItem.AvailableGroupModifiers">
            <summary>Group modifiers that are available for order item.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.IOrderServiceItem">
            <summary>Order item representing time pay service.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.Service">
            <summary>The service menu item. Expected to be of type <see cref="F:Resto.Front.Api.Data.Assortment.ProductType.Service"/>.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.Price">
            <summary>Default price of the service. Some periods may have own prices, see <see cref="P:Resto.Front.Api.Data.Orders.IOrderServiceItemPeriod.Price"/>. All prices are per timing step (<see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/>).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.Cost">
            <summary>Total cost of the service item, sum of costs of the <see cref="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.Periods"/> plus <see cref="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.RemainingLimitCost"/>.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.RemainingLimitCost">
            <summary>Predicted cost of the remaining time limit.                  Zero, if the <see cref="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.TimeLimit"/> is not set. If the time limit is set, but it's less than total time of the <see cref="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.Periods"/>, remaining time limit is zero and therefore it's cost is also zero.                 For example, if timing step is one minute, the time limit was set to 1 hour and 20 minutes already passed, there will be one or more periods with total time of 20 minutes and their respective costs, then the cost of remaining 40 minutes will be predicted using schedule.                 This cost will go down with the lapse of time, because while time of some period increases, the remaining time limit decreases. After 15 minutes total periods time will be 35 mins (20+15) and <see cref="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.RemainingLimitCost"/> will represent cost of the remaining 25 mins.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.ResultSum">
            <summary>Total sum to be paid, sum with discounts and both included and excluded vat.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.TaxPercent">
            <summary>Tax percent or <c>null</c> for not taxed order items.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.TimeLimit">
            <summary>Total amount of time after which the service will be stopped or <c>null</c> for default limit (12 hours). Includes all periods.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.IsStarted">
            <summary>Whether the service is running now.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.RateSchedule">
            <summary>Schedule of the service rates.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItem.Periods">
            <summary>Service periods, each period represents some rate. For example, if the schedule has different rates for times before and after 10 o'clock, the service was started at 09:30 and now is 11:00, there will be one period with 30 mins length and another period with 60 mins length, both periods may have different prices and therefore different costs.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.IOrderServiceItemPeriod">
            <summary>Period of a service item.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItemPeriod.Service">
            <summary>Product that specifies price of the period. Expected to be of types <see cref="F:Resto.Front.Api.Data.Assortment.ProductType.Service"/> or <see cref="F:Resto.Front.Api.Data.Assortment.ProductType.Rate"/>.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItemPeriod.Price">
            <summary>Price of the service period per timing step (<see cref="P:Resto.Front.Api.Data.Orders.RateSchedule.TimingStep"/>).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItemPeriod.Cost">
            <summary>Cost of the service period.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderServiceItemPeriod.ElapsedTime">
            <summary>Exact total elapsed time of the period, includes all runs of the period.                 Service may be started, then stopped, then started again, or the schedule may switch the service to another rate and then switch back, so this property will accumulate total active time of the period.                 This is exact unrounded value. For example, if timing step is 10 mins and this period was active only for 2 mins and 42 seconds, the <see cref="P:Resto.Front.Api.Data.Orders.IOrderServiceItemPeriod.Cost"/> will be calculated for 10 mins anyway, while this property will have an exact value 00:02:42.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.IOrderCompoundItem">
            <summary>Templated order item representing one or two combined products.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCompoundItem.Template">
            <summary>Template of the current compound item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCompoundItem.PrimaryComponent">
            <summary>Primary part of the compound item. For the undivided compound item this part is single, for splitted — primary.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCompoundItem.SecondaryComponent">
            <summary>Secondary part of the splitted compound item or <c>null</c> for undivided compound item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCompoundItem.CommonModifiers">
            <summary>Common (non-splittable) assigned modifiers. Apply to all components.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCompoundItem.AvailableCommonSimpleModifiers">
            <summary>Simple modifiers that are available for the whole compound item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCompoundItem.AvailableCommonGroupModifiers">
            <summary>Group modifiers that are available for the whole compound item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCompoundItem.AvailableComponentSimpleModifiers">
            <summary>Simple modifiers that are available for compound item component.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCompoundItem.AvailableComponentGroupModifiers">
            <summary>Group modifiers that are available for compound item component.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.IOrderCompoundItemComponent">
            <summary>Element of the compound item representing one of its products.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCompoundItemComponent.Product">
            <summary>Product of the current component.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCompoundItemComponent.ResultSum">
            <summary>Total sum to be paid, sum with discounts and both included and excluded vat.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCompoundItemComponent.TaxPercent">
            <summary>Tax percent or <c>null</c> for not taxed order items.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderCompoundItemComponent.Modifiers">
            <summary>Assigned modifiers of the current component.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderModifierItem.ResultSum">
            <summary>Total sum to be paid, sum with discounts and both included and excluded vat.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderModifierItem.TaxPercent">
            <summary>Tax percent or <c>null</c> for not taxed order items.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderModifierItem.Kitchen">
            <summary>Modifier cooking place.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderModifierItem.IsSeparate">
            <summary>Whether modifier should be cooked separately from its product. In general this property exposes modifier semantics: while some modifiers specify <i>how</i> to cook their product, another modifiers are additional dish parts or even separate dishes. First type completely depends on product and has the same cooking property values, second type is separate and has own kitchen, status etc.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrderModifierItem.AmountIndependentOfParentAmount">
            <summary>Whether amount of the modifier is absolute or relative to parent amount. When modifier amount depends on parent, it means multiplication — specified amount of modifier should be cooked per each parent unit, otherwise it means addition — specified amount of modifier should be cooked for whole parent.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.IDiscountItem">
            <summary>Discount item is the result of adding discount to an order, contains discount parameters, which will be used to calculate sums. While discount params are persistent, discount sums are calculated on demand, because they are subject to change (they may depend on the time, etc). Call <see cref="M:Resto.Front.Api.IOperationService.GetOrderAppliedDiscounts(Resto.Front.Api.Data.Orders.IOrder)" /> to get calculated sums.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountItem.DiscountType">
            <summary>Type of the discount item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountItem.IsSelectivelyApplied">
            <summary>Whether this discount item is applied selectively to some order items. If <c>true</c>, use <see cref="M:Resto.Front.Api.IOperationService.GetSelectiveDiscountItemSettings(Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IDiscountItem)" /> to get or <see cref="M:Resto.Front.Api.Editors.IEditSession.ChangeSelectiveDiscount(Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Data.Orders.IDiscountType,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Editors.Stubs.IOrderProductItemStub},System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Editors.Stubs.IOrderModifierItemStub},System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Editors.Stubs.IOrderCompoundItemComponentStub})" /> to change list of selected order items.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.IAppliedDiscountItem">
            <summary>The result of applying discount item, contains discount sums.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IAppliedDiscountItem.Discount">
            <summary>The discount item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IAppliedDiscountItem.DiscountSum">
            <summary>Total discount sum given by the discount item for all order items.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IAppliedDiscountItem.DiscountSumByOrderItemId">
            <summary>Discount sums given by the discount item for each order item (products, compounds, services and modifiers). Absence of some order item's id means zero discount for that item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.FullSum">
            <summary>Subtotal, sum of all not deleted order items with included vat, but without excluded vat and discounts.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.ResultSum">
            <summary>Total sum to be paid, sum of all not deleted order items with discounts and both included and excluded vat.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.BillTime">
            <summary>Gets the bill cheque print time of the current order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.CloseTime">
            <summary>Gets the payment time of the current order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.FiscalChequeNumber">
            <summary>Fiscal cheque number.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.Cashier">
            <summary>Gets the user closed the current order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.IsBanquetOrder">
            <summary>Order is banquet.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.ProcessedPaymentsSum">
            <summary>Sum of all processed payment items in order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.EstimatedGuestsCount">
            <summary>Gets estimated guests count, that is greater than or equal to added guests count. When single order is used to serve many people and handling each of them as a separate guest may be inconvenient, this property will indicate estimated guests count while guests collection will contain as many guests as needed for waiters.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.OriginName">
            <summary>Optional marker used to specify order origin. This property contains either null or name of the source order was received from. Specifying origin allows to analyse efficiency of external order sources such as different web-sites, mobile applications and so on.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.PricingTime">
            <summary>Time, which determines the price of products. By default time is taken from items print time.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.IikoCard51Info">
            <summary>Specific data for iikoCard51.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.WasPrepaid">
            <summary>Whether order was prepaid. Any processed or deleted prepay.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.IsTopCookingPriority">
            <summary>The flag specifies that this order should be cooked out-of-order at kitchen. All orders which have this flag set on will appear above other orders at the kitchen display. Both groups (top priority and non-top priority) will be sorted separately using usual sorting logic (custom cooking priority, then default built-in criterions. Default value is false.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.CookingPriority">
            <summary>Specifies a custom cooking priority. While the application provides built-in prioritization logic for orders based on timing, dish courses, etc., you can override it and enforce custom cooking order based on your external logic. Ideally, all dishes should be cooked timely, but in case of concurrency when kitchen is high-loaded, you have to decide which orders are more important and should be cooked in the first place and which orders are allowed to be delayed. Higher priority values mean that the order, its serve groups and dishes will appear at the kitchen display earlier. Default value is zero. Both positive and negative values are allowed for raising and lowering the priority correspondingly. Orders with the same cooking priority will be sorted using default built-in logic.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IOrder.PriceCategory">
            <summary>Price category.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrder.Number">
            <summary>Order number</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrder.OpenTime">
            <summary>Order open time</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrder.CloseTime">
            <summary>Order close time.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrder.Waiter">
            <summary>Person who serves the source order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrder.Cashier">
            <summary>Gets the user closed the current order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrder.CashRegister">
            <summary>CashRegister of current point of sale</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrder.CafeSessionNumber">
            <summary>Orders session number</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrder.CafeSessionOpenTime">
            <summary>Orders session open time</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrder.FiscalChequeNumber">
            <summary>Orders fiscal receipt number</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrder.TableNumber">
            <summary>Orders table number</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrder.RestaurantSection">
            <summary>Item cooking place.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrder.OrderType">
            <summary>Order type</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderItem.SumWithDiscounts">
            <summary>Item sum with all discounts included.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderItem.SumWithoutDiscounts">
            <summary>Item sum without any discounts.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderItem.Amount">
            <summary>Item amount.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderItem.Price">
            <summary>Item price.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderItem.IsMainDish">
            <summary>Item price.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderItem.ProductSize">
            <summary>Gets size of the order item if it's product.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderItem.Product">
            <summary>Product to be cooked.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderPayment.PaymentType">
            <summary>Payment type.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderPayment.Sum">
            <summary>Payment amount.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderPayment.IsPrepay">
            <summary>Payment operation is prepayment.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderHrsTransaction.GuestName">
            <summary>Guest name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderHrsTransaction.GuestHrsIdentifier">
            <summary>Guest HRS identifier.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPastOrderHrsTransaction.RoomNumber">
            <summary>Room number.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.SourceId">
            <summary>Identifier of the delivery that existed before splitting it by multiple cash registers. Depending on settings, a single delivery can be split by multiple cash registers before payment, producing multiple deliveries. At this moment <i>SourceId</i> of all produced deliveries is set to <i>Id</i> of the source delivery. If delivery was not splitted by cash registers, <i>SourceId</i> returns <i>null</i>.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.DeliveryId">
            <summary>Identifier of the delivery, don't confuse it with identifier of the delivery order. This property exists for historical reason, avoid using it when possible.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.Client">
            <summary>Client that ordered delivery</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.Courier">
            <summary>Courier that delivers the order</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.DeliveryOperator">
            <summary>User who created the order</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.IsCourierSelectedManually">
            <summary>Whether courier was selected from UI or automatically</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.DeliveryStatus">
            <summary>Status of the delivery</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.CancelCause">
            <summary>Cause of cancelling the order</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.CancelComment">
            <summary>Comment to the order cancellation</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.CancelTime">
            <summary>Time when the order was marked as cancelled</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.Phone">
            <summary>Phone of client</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.Email">
            <summary>E-mail of client</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.Comment">
            <summary>Client's comment on order</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.Address">
            <summary>Address where the order will be delivered</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.CreateTime">
            <summary>Time when order was created</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.ExpectedDeliverTime">
            <summary>Time when client wants the order to be delivered</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.ConfirmTime">
            <summary>Time when order was confirmed</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.CookingFinishTime">
            <summary>Time when order cooking was finished</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.PrintTime">
            <summary>Time when products were printed</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.SendTime">
            <summary>Time when order was sent to client</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.ActualDeliverTime">
            <summary>Time when order was actually delivered to the client</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.CloseTime">
            <summary>Time when delivery order was marked as closed</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.PredictedCookingCompleteTime">
            <summary>Predicted time when order cooking should be completed</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.PredictedDeliveryTime">
            <summary>Predicted time when order should be delivered</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.IsPrintedBillActual">
            <summary>Whether the order bill was already printed and since then it's considered to be actual. Also means whether the bill will be printed automatically according to settings: if it's not already printed, it will.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.HasProblem">
            <summary>Whether the order is marked as having problem</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.ProblemComment">
            <summary>Description of the problem. Non-empty ProblemComment doesn't mean delivery is currently has a problem: comment could been filled in earlier, and after that HasProblem flag was unchecked. That means that the order had some problems earlier.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.SplitBetweenPersons">
            <summary>Indicates whether the order should be splitted between persons or not</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.MarketingSource">
            <summary>Advertising Source of the order (for example, some web site, call center)</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.Latitude">
            <summary>Latitude of geoposition of the delivery address</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.Longitude">
            <summary>Longitude of geoposition of the delivery address</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.IndexInCourierRoute">
            <summary>Index of the order in courier route (zero-based)</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.IsCustomerAuthorizedInIikoNet">
            <summary>Indicates whether customer is already authorized in Plazius, i.e. his credentials are verified</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.IsCustomerAuthorizedInIikoBiz">
            <summary>Indicates whether customer is already authorized in iiko.biz, i.e. his credentials are verified</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.LastVerifiedDeliveryRestrictionsHash">
            <summary>Last verified on server delivery restrictions hash</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.CustomApiData">
            <summary>Custom data about delivery from Api</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryOrder.LastDefaultTerminalDeliveryDurationInMinutes">
            <summary>Duration calculated without overridden value on terminal</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.ICookingPlaceType">
            <summary>Cooking place type.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.ICookingPlaceType.Name">
            <summary>Name of cooking place type.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.ITerminalDeliveryDuration.CourierDeliveryTime">
            <summary>Courier delivery duration set on a delivery terminal.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.ITerminalDeliveryDuration.SelfServiceDeliveryTime">
            <summary>SelfService delivery duration set on a delivery terminal.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryTerminalWorkload.KitchenWorkload">
            <summary>Kitchen workload.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryTerminalWorkload.CourierWorkload">
            <summary>Courier workload.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDeliveryTerminalWorkload.IsTimePeak">
            <summary>Set standard cooking time 'Peak hour'</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IKitchenWorkload.CookingPlaceType">
            <summary>Type of cooking place which refers to kitchen workload.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IKitchenWorkload.KitchenWorkloadInMinutes">
            <summary>Kitchen queue in minutes.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IKitchenWorkload.CookCount">
            <summary>Cooks count.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.ICourierWorkload.Courier">
            <summary>Courier.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.ICourierWorkload.DeliveriesCount">
            <summary>Count of active (i.e. neither closed nor cancelled) deliveries assigned to courier.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPriceCategory.Name">
            <summary>Name of price category.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPriceCategory.Deleted">
            <summary>Is this item deleted.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPriceCategory.Code">
            <summary>Unique price category code.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IPriceCategory.CanApplyManually">
            <summary>Can price category be applied to order manually.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountType.Name">
            <summary>Name of discount type</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountType.Deleted">
            <summary>Is this item deleted.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountType.IsActive">
            <summary>Is this item active for current group. Note that this property doesn't associated with <see cref="P:Resto.Front.Api.Data.Orders.IDiscountType.Deleted"/>. I.e. discount type can be deleted and active at the same time.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountType.IsAutomatic">
            <summary>A sign that the discount is added automatically to order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountType.CanApplyManually">
            <summary>Can discount be applied to order manually.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountType.CanApplyByCardNumber">
            <summary>Can discount be applied to order by card number.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountType.DiscountByFlexibleSum">
            <summary>Does it need to set discount sum on adding. Flexible sum discount types require user to provide discount sum while adding to order while other discount types automatically calculate discount sum depending on predefined settings.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountType.CanApplyByDiscountCard">
            <summary>Can discount be applied to order by discount card.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountType.CanApplySelectively">
            <summary>Can discount be applied to order items selectively.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Orders.IDiscountCard">
            <summary>Discount card is a part of loyalty system which allows to provide reduced prices for loyal clients using either a discount or a special price category.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountCard.OwnerName">
            <summary>Card owner's name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountCard.DiscountType">
            <summary>Discount type bound to the card. <c>null</c> if this card is bound to a price category.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountCard.PriceCategory">
            <summary>Price category bound to the card. <c>null</c> if this card is bound to a discount.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Orders.IDiscountCard.CardNumber">
            <summary>Number of the card.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.JournalEvents.Severity">
            <summary>
            Severity of journal event.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.JournalEvents.Severity.Low">
            <summary>
            Low severity.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.JournalEvents.Severity.Middle">
            <summary>
            Middle severity.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.JournalEvents.Severity.High">
            <summary>
            High severity.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Organization.OrderTypeFillRequirements">
            <summary>
            Order type filling requirements
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.OrderTypeFillRequirements.NotRequired">
            <summary>
            Filling the order type don't required
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.OrderTypeFillRequirements.FillOnOrderCreate">
            <summary>
            Filling the order type on order creating
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.OrderTypeFillRequirements.FillOnServicePrint">
            <summary>
            Filling the order type on service printing
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.OrderTypeFillRequirements.FillOnOrderBill">
            <summary>
            Filling the order type on order billing
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Organization.CanDeleteOrdersOutOfCafeSession">
            <summary>
            Setting "Is it possible to delete orders with closed cafe session".
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.CanDeleteOrdersOutOfCafeSession.NotAllowed">
            <summary>
            Not allowed.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.CanDeleteOrdersOutOfCafeSession.OnlyWithoutWriteoff">
            <summary>
            Only orders without writeoff and payment.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.CanDeleteOrdersOutOfCafeSession.All">
            <summary>
            Any orders without payment.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Organization.Sections.RestaurantSectionExtensions">
            <summary>
            Provides a set of static methods to access referenced entities.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Organization.Sections.RestaurantSectionExtensions.GetSectionSchema(Resto.Front.Api.Data.Organization.Sections.IRestaurantSection,Resto.Front.Api.IOperationService)">
            <summary>
            Returns sectionSchema of the specified restaurantSection.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Organization.Sections.RestaurantSectionExtensions.TryGetSectionSchema(Resto.Front.Api.Data.Organization.Sections.IRestaurantSection,Resto.Front.Api.IOperationService)">
            <summary>
            Returns sectionSchema of the specified restaurantSection or <c>null</c> if restaurantSection doesn't exist.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.Sections.IRestaurantSection.OrderItemCommentsEnabled">
            <summary>Whether comments to cooking items are enabled at section.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.Sections.IRestaurantSection.OrderItemsGroupingEnabled">
            <summary>Whether combining cooking items into groups is enabled at the section.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.Sections.IRestaurantSection.KitchenCoursesEnabled">
            <summary>Whether courses are enabled at section.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.Sections.IRestaurantSection.DefaultOrderType">
            <summary>Default order type for section</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.Sections.ISectionSchema.Width">
            <summary>Section schema width in px</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.Sections.ISectionSchema.Height">
            <summary>Section schema height in px</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.Sections.ISectionSchema.MarkElements">
            <summary>Collection of restaurant section marks.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.Sections.ISectionSchema.ImageElements">
            <summary>Collection of restaurant section images.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.Sections.ISectionSchema.TableElements">
            <summary>Collection of restaurant section tables.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.Sections.ISectionSchema.RectangleElements">
            <summary>Collection of restaurant section rectangles.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.Sections.ISectionSchema.EllipseElements">
            <summary>Collection of restaurant section ellipses.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Organization.DeliverySettingsServiceType">
            <summary>Available service types for delivery settings.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.DeliverySettingsServiceType.CourierOnly">
            <summary>Delivered only with courier.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.DeliverySettingsServiceType.SelfServiceOnly">
            <summary>Taken away only by customer.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.DeliverySettingsServiceType.CourierAndSelfService">
            <summary>Both.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Organization.OrderServiceTypes">
            <summary>
            Describes different servicing types.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.OrderServiceTypes.Common">
            <summary>
            Regular order to be served on table or sold as a fastfood.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.OrderServiceTypes.DeliveryByCourier">
            <summary>
            Delivery order to be delivered by courier.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Organization.OrderServiceTypes.DeliveryByClient">
            <summary>
            Delivery order to be picked up by client himself.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.ITerminalsGroup.AskCashierForMultiCashRegisterPayment">
            <summary>Whether cashier will be asked for multiple cash register payment.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.ITerminalsGroup.MaxCourseNumber">
            <summary>The maximum number of course.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IHostTerminal.SingleInstancePluginsCompatible">
            <summary>Whether plugins with <see cref="!:Resto.Front.Api.Attributes.SingleInstancePluginAttribute"/> will be loaded on host terminal.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IRestaurant.OrderTypeFillRequirements">
            <summary>Order type filling requirements.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IRestaurant.CanDeleteOrdersOutOfCafeSession">
            <summary>Is it possible to delete orders with closed cafe session.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IDeliverySettings.SmsNotificationTemplates">
            <summary>Sms notification templates for delivery.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IDeliverySettings.DefaultSelfServiceDeliveryDuration">
            <summary>Average time of delivery at restaurant for self-service.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IDeliverySettings.ServiceType">
            <summary>Delivery service type: courier, self-service or both of them.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IDeliverySettings.BeepOnDeliveriesUpdate">
            <summary>Should operator be informed with system sound "beep" when delivery order is created/updated.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IDeliverySettings.MarketingSourceRequired">
            <summary>Check whether input or marketing source(advertising) is required.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IDeliverySettings.DefaultDeliveryDuration">
            <summary>If the time of delivery of the order at its creation was not explicitly specified, it is considered that the order should be delivered in exactly <see cref="P:Resto.Front.Api.Data.Organization.IDeliverySettings.DefaultDeliveryDuration"/> from the moment of creation. Estimated time = the current time + <see cref="P:Resto.Front.Api.Data.Organization.IDeliverySettings.DefaultDeliveryDuration"/>.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IDeliverySettings.ProcessExternalPrepayOnAddition">
            <summary>Whether external processed payments should be processed as prepays immediately after addition.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Organization.ICurrencySettings">
            <summary>Currency settings</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.ICurrencySettings.FormatInfo">
            <summary>Provides culture-specific information for formatting and parsing numeric values</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.ICurrencySettings.MinimumDenomination">
            <summary>Minimum denomination</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.ICurrencySettings.ShowFractionalPart">
            <summary>Should show the fractional part</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Organization.IConception">
            <summary>Conception of point of sale.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IConception.Name">
            <summary>Name of conception</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IConception.Code">
            <summary>Code of conception</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Organization.IPointOfSale">
            <summary>Point of sale</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IPointOfSale.Name">
            <summary>Point of sale name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IPointOfSale.IsMain">
            <summary>Is current point of sale main cash</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IPointOfSale.Conception">
            <summary>Conception of current point of sale</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IPointOfSale.CashRegister">
            <summary>CashRegister of current point of sale</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Organization.IOrderType">
            <summary>Order type</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IOrderType.Name">
            <summary>Order type name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IOrderType.OrderServiceType">
            <summary>Orders of which service type this order type is applicable for. There is only one service type, single enum value, despite of the flags attribute.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IOrderType.IsDefaultForServiceType">
            <summary>Gets a value that indicates whether this order type set by default to orders with corresponding service type.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.IOrderType.IsActive">
            <summary>Gets a value that indicates whether this order type can be set to orders. Order type can be activated or deactivated via iikoOffice.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Organization.ITransportSettings">
            <summary>iikoTransport settings.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Organization.ITransportSettings.ServerUri">
            <summary>iikoTransport server URI (TransportService).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IikoNetPaymentItemAdditionalData.DiscountSum">
            <summary>
            Sum that Plazius will process as discount from all discount marketing campaigns.
            It is calculated by Plazius, so setting it to another value can be harmful.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.IikoNetPaymentItemAdditionalData.Equals(Resto.Front.Api.Data.Payments.IikoNetPaymentItemAdditionalData)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.IikoNetPaymentItemAdditionalData.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.IikoNetPaymentItemAdditionalData.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData">
            <summary>
            Common base interface for payment type specific DTOs carrying properties with additional data.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Payments.PaymentTypeKind">
            <summary>
            Kind of a payment type.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Payments.PaymentTypeKind.Unknown">
            <summary>
            None of kinds listed below.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Payments.PaymentTypeKind.Cash">
            <summary>
            Cash.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Payments.PaymentTypeKind.Card">
            <summary>
            Card.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Payments.PaymentTypeKind.Credit">
            <summary>
            Credit.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Payments.PaymentTypeKind.Writeoff">
            <summary>
            Writeoff.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Payments.PaymentTypeKind.Voucher">
            <summary>
            Voucher.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Payments.PaymentTypeKind.External">
            <summary>
            External api payment type of payment system registered with <see cref="M:Resto.Front.Api.IOperationService.RegisterPaymentSystem(Resto.Front.Api.IExternalPaymentProcessor,System.Boolean)"/>.
            </summary>
            <seealso cref="T:Resto.Front.Api.IExternalPaymentProcessor"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Payments.PaymentTypeKind.SmartSale">
            <summary>
            Smart sale.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Payments.PaymentTypeKind.Sberbank">
            <summary>
            Sberbank.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Payments.PaymentTypeKind.Trpos">
            <summary>
            Trpos.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.PlastekPaymentItemAdditionalData.PlastekCardNumber">
            <summary>
            Card number.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.PlastekPaymentItemAdditionalData.Equals(Resto.Front.Api.Data.Payments.PlastekPaymentItemAdditionalData)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.PlastekPaymentItemAdditionalData.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.PlastekPaymentItemAdditionalData.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Resto.Front.Api.Data.Payments.ChequeAdditionalInfo">
            <summary>
            Cheque additional information according to russian federal law #54.
            </summary>
            <remarks>
            For Russia only. For other countries use <c>null</c> instead of this class.
            </remarks>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.ChequeAdditionalInfo.NeedReceipt">
            <summary>
            Whether paper cheque should be printed.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.ChequeAdditionalInfo.Phone">
            <summary>
            Phone to send cheque information (by sms).
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.ChequeAdditionalInfo.Email">
            <summary>
            Email to send cheque information.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.ChequeAdditionalInfo.SettlementPlace">
            <summary>
            Settlement place.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Payments.IikoCard51PaymentItemAdditionalData">
            <summary>
            Additional data for iikoCard51 payment item.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IikoCard51PaymentItemAdditionalData.Credential">
            <summary>
            Guest credential, authorizing payment.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IikoCard51PaymentItemAdditionalData.SearchScope">
            <summary>
            Guest credential search scope.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.IikoCard51PaymentItemAdditionalData.Equals(Resto.Front.Api.Data.Payments.IikoCard51PaymentItemAdditionalData)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.IikoCard51PaymentItemAdditionalData.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.IikoCard51PaymentItemAdditionalData.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Resto.Front.Api.Data.Payments.CardPaymentItemAdditionalData">
            <summary>
            Additional information for card payment types. 
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.CardPaymentItemAdditionalData.CardNumber">
            <summary>
            Card number.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.CardPaymentItemAdditionalData.Equals(Resto.Front.Api.Data.Payments.CardPaymentItemAdditionalData)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.CardPaymentItemAdditionalData.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.CardPaymentItemAdditionalData.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Resto.Front.Api.Data.Payments.CreditPaymentItemAdditionalData">
            <summary>
            Additional information for credit payment types. 
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.CreditPaymentItemAdditionalData.Equals(Resto.Front.Api.Data.Payments.CreditPaymentItemAdditionalData)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.CreditPaymentItemAdditionalData.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.CreditPaymentItemAdditionalData.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Resto.Front.Api.Data.Payments.ExternalPaymentItemAdditionalData">
            <summary>
            Additional data for external payment item.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.ExternalPaymentItemAdditionalData.CustomData">
            <summary>
            Custom data.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.ExternalPaymentItemAdditionalData.Equals(Resto.Front.Api.Data.Payments.ExternalPaymentItemAdditionalData)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.ExternalPaymentItemAdditionalData.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.ExternalPaymentItemAdditionalData.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Resto.Front.Api.Data.Payments.VoucherPaymentItemAdditionalData">
            <summary>
            Additional information for voucher payment types.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.VoucherPaymentItemAdditionalData.Count">
            <summary>
            Vouchers' count.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.VoucherPaymentItemAdditionalData.Equals(Resto.Front.Api.Data.Payments.VoucherPaymentItemAdditionalData)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.VoucherPaymentItemAdditionalData.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.VoucherPaymentItemAdditionalData.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Resto.Front.Api.Data.Payments.WriteoffPaymentItemAdditionalData">
            <summary>
            Additional information for writeoff payment types.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.WriteoffPaymentItemAdditionalData.Reason">
            <summary>
            Reason of writeoff.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.WriteoffPaymentItemAdditionalData.Ratio">
            <summary>
            Coefficient of writeoff (1 or -1).
            Can be null where the field was not filled explicit.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.WriteoffPaymentItemAdditionalData.Equals(Resto.Front.Api.Data.Payments.WriteoffPaymentItemAdditionalData)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.WriteoffPaymentItemAdditionalData.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.Data.Payments.WriteoffPaymentItemAdditionalData.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentType.Name">
            <summary>Name of payment type.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentType.IsCombinable">
            <summary>Is payment type combinable with other payment types.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentType.Kind">
            <summary>Kind of the payment type.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentType.IsEnabled">
            <summary>Is payment type enabled for some kind of usage. Specific purposes may have additional constraints.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentType.IsHidden">
            <summary>Is payment type hidden from payment type selector UI.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentType.CanDisplayChange">
            <summary>If change can be displayed for payment type.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentType.DiscountType">
            <summary>Recommended <see cref="T:Resto.Front.Api.Data.Orders.IDiscountType"/> to apply with this payment type. You should delete discount item of this discount type if you are deleting payment item of this payment type.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentType.CanBeExternalProcessed">
            <summary>Can be added as processed external by <see cref="M:Resto.Front.Api.Editors.IEditSession.AddExternalPaymentItem(System.Decimal,System.Boolean,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Editors.Stubs.IOrderStub)"/>.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentType.OpenCashDrawerOnPay">
            <summary>Indicates if BaseType needs to open cash drawer.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentItem.MinSum">
            <summary>Minimum allowed payment sum, lower bound for the payment. <c>null</c> means default limit value.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentItem.MaxSum">
            <summary>Maximum allowed payment sum, upper bound for the payment. <c>null</c> means default limit value.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentItem.IsPrepay">
            <summary>Whether payment item is prepay.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IPaymentItem.PointOfSale">
            <summary>Point of sale where payment was processed or <c>null</c> if it's not processed.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IDonationType.Name">
            <summary>Name of donation type.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IDonationType.OrderServiceTypes">
            <summary>Orders of which service type this donation type is applicable for.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Payments.IDonationType.PaymentTypes">
            <summary>Assigned payment types of the current donation type.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Print.Document">
            <summary>Serializable wrapper for markup <see cref="T:System.Xml.Linq.XElement" />.</summary>	
        </member>
        <member name="M:Resto.Front.Api.Data.Print.Document.op_Implicit(Resto.Front.Api.Data.Print.Document)~System.Xml.Linq.XElement">
            <summary>
            Cast the value of this <see cref="T:Resto.Front.Api.Data.Print.Document"/> to a <see cref="T:System.XElement"/>.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Print.Document.op_Implicit(System.Xml.Linq.XElement)~Resto.Front.Api.Data.Print.Document">
            <summary>
            Cast the value of <see cref="T:T:System.XElement"/> to the <see cref="T:Resto.Front.Api.Data.Print.Document"/>.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Print.Document.Markup">
            <summary>Document markup</summary>	
        </member>
        <member name="T:Resto.Front.Api.Data.Print.PrinterSelectionMode">
            <summary>
            Specifies how to select printer to print a section-related document on a specific terminal.
            </summary>
            <remarks>
            Each <see cref="T:Resto.Front.Api.Data.Organization.Sections.IRestaurantSection"/> has printer settings and each terminal (iikoFront application instance) also may have it's own printer settings,
            so it's necessary to specify, which settings to use to select a printer.
            </remarks>
        </member>
        <member name="F:Resto.Front.Api.Data.Print.PrinterSelectionMode.Default">
            <summary>
            Treat section settings as a base level and terminal settings as an override.
            Printer will be selected by terminal settings if they specify some printer for a document, otherwise printer will be selected using section settings.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Print.PrinterSelectionMode.BySection">
            <summary>
            Select printer using section settings.
            Terminal settings will be ignored.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Print.PrinterSelectionMode.ByTerminal">
            <summary>
            Select printer using terminal settings.
            Currently, section settings will be used as a fallback if printer cannot be selected by terminal, so this option coincides with <see cref="F:Resto.Front.Api.Data.Print.PrinterSelectionMode.Default"/>,
            but it's just an implementation detail, which may be changed at any time.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Print.IPrinterRef">
            <summary>Reference to a printer which can be used to print documents using <see cref="M:Resto.Front.Api.IOperationService.Print(Resto.Front.Api.Data.Print.IPrinterRef,Resto.Front.Api.Data.Print.Document)"/>.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Print.IPrinterRef.CheckIsConfigured">
            <summary>Check for printer configured.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Search.ClientFields">
            <summary>
            Client's fields for search.
            </summary>
            <seealso cref="M:Resto.Front.Api.IOperationService.SearchClients(System.String,Resto.Front.Api.Data.Search.SearchType,Resto.Front.Api.Data.Search.ClientFields)"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Search.ClientFields.Name">
            <summary>Name.</summary>
            <seealso cref="P:Resto.Front.Api.Data.Brd.IClient.Name"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Search.ClientFields.CardNumber">
            <summary>Card number.</summary>
            <seealso cref="P:Resto.Front.Api.Data.Brd.IClient.CardNumber"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Search.ClientFields.Address">
            <summary>Address.</summary>
            <seealso cref="P:Resto.Front.Api.Data.Brd.IClient.Addresses"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Search.ClientFields.Phone">
            <summary>Phone number.</summary>
            <seealso cref="P:Resto.Front.Api.Data.Brd.IClient.Phones"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Search.ClientFields.Comment">
            <summary>Comment.</summary>
            <seealso cref="P:Resto.Front.Api.Data.Brd.IClient.Comment"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Search.ClientFields.All">
            <summary>All fields.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Search.SearchType">
            <summary>
            Type of search
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Search.SearchType.Prefix">
            <summary>Prefix.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Search.SearchType.Equals">
            <summary>Equals.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Search.StreetFields">
            <summary>
            Street's fields for search.
            </summary>
            <seealso cref="M:Resto.Front.Api.IOperationService.SearchStreets(System.String,Resto.Front.Api.Data.Search.SearchType,Resto.Front.Api.Data.Search.StreetFields,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Brd.ICity})"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Search.StreetFields.Name">
            <summary>
            Street name.
            </summary>
            <seealso cref="P:Resto.Front.Api.Data.Brd.IStreet.Name"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Search.StreetFields.ExternalId">
            <summary>
            External id of a street.
            </summary>
            <seealso cref="P:Resto.Front.Api.Data.Brd.IStreet.ExternalId"/>
        </member>
        <member name="F:Resto.Front.Api.Data.Search.StreetFields.All">
            <summary>
            All fields.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Security.ICredentials">
            <summary>
            Credentials to authenticate operations, which require a user with specific permissions.
            </summary>
            <seealso cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)"/>
        </member>
        <member name="P:Resto.Front.Api.Data.Security.IUser.Card">
            <summary>Cashier original personal card number</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Settings.CheckBox">
            <summary>
            Check box.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Settings.CheckBox.#ctor(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Settings.IPluginSettings">
            <summary>
            Interface of plugin settings.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Settings.IPluginSettings.PluginKey">
            <summary>
            Plugin's key for signing settings.
            </summary>
            <remarks>
            Identifies plugin which owns these settings. Make some constant guid describing a plugin and use here for settings signing and for getting settings.
            </remarks>
        </member>
        <member name="P:Resto.Front.Api.Data.Settings.IPluginSettings.BoundEntityId">
            <summary>
            Identifier of bound entity.
            </summary>
            <remarks>
            If settings are bound to some iikoRMS entity (i.e. plugin payment type, plugin payment processor, etc.), set this identifier equal to entity id.
            This makes iikoRMS know that entity and settings are bound, and settings will be available in entity editor in iikoOffice.
            Otherwise set this identidier to <c>null</c>.
            </remarks>
        </member>
        <member name="P:Resto.Front.Api.Data.Settings.IPluginSettings.Version">
            <summary>
            Version of settings scheme. Meant to be monotonically increasing.
            </summary>
            <remarks>
            Increase as scheme of settings changes. Do not increase when settings values are updated without changing their scheme.
            </remarks>
        </member>
        <member name="P:Resto.Front.Api.Data.Settings.IPluginSettings.DisplayName">
            <summary>
            Name that describes settings to iikoOffice user.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Settings.IPluginSettings.TryGetValue``2(System.String)">
            <summary>
            Get value specified for TSettings&lt;TValue&gt; by its key.
            </summary>
            <typeparam name="TSetting">Type of setting.</typeparam>
            <typeparam name="TValue">Return type of value.</typeparam>
            <param name="key">Key of setting.</param>
            <returns>Value of setting or <c>default(TValue)</c> if none specified.</returns>
        </member>
        <member name="M:Resto.Front.Api.Data.Settings.IPluginSettings.TryGetValue``1(System.String)">
            <summary>
            Get value by its key.
            </summary>
            <typeparam name="TValue">Return type of value.</typeparam>
            <param name="key">Key of setting.</param>
            <returns>Value of setting or null if none specified.</returns>
        </member>
        <member name="M:Resto.Front.Api.Data.Settings.IPluginSettings.TryGetSetting``1(System.String)">
            <summary>
            Get setting by its key.
            </summary>
            <typeparam name="TSetting">Type of setting.</typeparam>
            <param name="key">Key of setting.</param>
            <returns>Setting or null if none specified.</returns>
        </member>
        <member name="M:Resto.Front.Api.Data.Settings.IPluginSettings.GetSettings">
            <summary>
            Get all settings within current plugin settings.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Settings.ISetting">
            <summary>
            Base interface for plugin settings.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Settings.ISetting.Key">
            <summary>
            Key of element.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Settings.PluginSettings">
            <summary>
            Plugin settings.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Settings.PluginSettings.settings">
            <summary>
            Elements.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Settings.PluginSettings.#ctor(System.Guid,System.Nullable{System.Guid},System.Int32,System.Collections.Generic.List{Resto.Front.Api.Data.Settings.ISetting})">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Settings.TextBox">
            <summary>
            Text box.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Settings.TextBox.MaxLength">
            <summary>
            Max length of text.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Settings.TextBox.#ctor(System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Settings.BaseSetting`1">
            <summary>
            Base class for plugin settings elements.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Settings.BaseSetting`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Settings.BaseSetting`1.LabelText">
            <summary>
            Text on label next to the element.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Settings.BaseSetting`1.IsReadonly">
            <summary>
            Is element readonly or available for editing.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Settings.BaseSetting`1.#ctor(System.String,`0,System.String,System.Boolean)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.BarcodeInputDialogResult">
            <summary>
            Barcode type input dialog result.
            </summary>	
        </member>
        <member name="M:Resto.Front.Api.Data.View.BarcodeInputDialogResult.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.Data.View.BarcodeInputDialogResult.Barcode">
            <summary>Scanned barcode.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.CardInputDialogResult">
            <summary>
            Magnetic stripe card type input dialog result.
            </summary>	
        </member>
        <member name="M:Resto.Front.Api.Data.View.CardInputDialogResult.#ctor(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.Data.View.CardInputDialogResult.Track1">
            <summary>
            First track of the card.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.CardInputDialogResult.Track2">
            <summary>
            Second track of the card.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.CardInputDialogResult.Track3">
            <summary>
            Third track of the card.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.CardInputDialogResult.FullCardTrack">
            <summary>
            Raw track, which includes all tracks altogether.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.IInputDialogResult">
            <summary>
            Common base interface for different input dialog result types.
            Match and cast it to one of it's inheritors to get specific dialog result properties.
            </summary>
            <seealso cref="T:Resto.Front.Api.Data.View.BarcodeInputDialogResult" />
            <seealso cref="T:Resto.Front.Api.Data.View.CardInputDialogResult" />
            <seealso cref="T:Resto.Front.Api.Data.View.NumberInputDialogResult" />
            <seealso cref="T:Resto.Front.Api.Data.View.NumericStringInputDialogResult" />
            <seealso cref="T:Resto.Front.Api.Data.View.PhoneInputDialogResult" />
            <seealso cref="M:Resto.Front.Api.UI.IViewManager.ShowInputDialog(System.String,Resto.Front.Api.Data.View.InputDialogTypes,System.Nullable{System.Int32})" />
            <seealso cref="M:Resto.Front.Api.UI.IViewManager.ShowExtendedInputDialog(System.String,System.String,Resto.Front.Api.UI.ExtendedInputDialogSettings)" />
        </member>
        <member name="T:Resto.Front.Api.Data.View.NumberInputDialogResult">
            <summary>
            Number type input dialog result.
            </summary>	
        </member>
        <member name="M:Resto.Front.Api.Data.View.NumberInputDialogResult.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.Data.View.NumberInputDialogResult.Number">
            <summary>
            Number, which was entered by user.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.NumericStringInputDialogResult">
            <summary>
            Numberic string type input dialog result.
            </summary>	
        </member>
        <member name="M:Resto.Front.Api.Data.View.NumericStringInputDialogResult.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.Data.View.NumericStringInputDialogResult.NumericString">
            <summary>
            Numeric string, which was entered by user.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.PhoneInputDialogResult">
            <summary>
            Phone number type input dialog result.
            </summary>	
        </member>
        <member name="M:Resto.Front.Api.Data.View.PhoneInputDialogResult.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.Data.View.PhoneInputDialogResult.PhoneNumber">
            <summary>
            Phone number, which was entered by user.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.RestaurantSectionObject">
            <summary>
            Restaurant section object.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.View.RestaurantSectionObject.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionObject.X">
            <summary>
            X cordinate of left point of item.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionObject.Y">
            <summary>
            Y coordinate of top point of item.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionObject.Z">
            <summary>
            Z-index of item.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionObject.Angle">
            <summary>
            Item's angle of slope.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionObject.Width">
            <summary>
            Item's width in px.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionObject.Height">
            <summary>
            Item's height in px.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.RestaurantSectionEllipse">
            <summary>
            Restaurant section ellipse.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.View.RestaurantSectionEllipse.#ctor(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionEllipse.Color">
            <summary>
            Color.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.RestaurantSectionImage">
            <summary>
            Restaurant section image.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.View.RestaurantSectionImage.#ctor(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionImage.Image">
            <summary>
            Image Base64 string.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.RestaurantSectionMark">
            <summary>
            Restaurant section mark.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.View.RestaurantSectionMark.#ctor(System.String,Resto.Front.Api.Data.View.Font,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionMark.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionMark.Color">
            <summary>
            Color.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionMark.Font">
            <summary>
            Font.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.RestaurantSectionRectangle">
            <summary>
            Restaurant section rectangle.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.View.RestaurantSectionRectangle.#ctor(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionRectangle.Color">
            <summary>
            Color.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.RestaurantSectionTable">
            <summary>
            Restaurant section table.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.View.RestaurantSectionTable.#ctor(Resto.Front.Api.Data.Organization.Sections.ITable,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.RestaurantSectionTable.Table">
            <summary>
            Table.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.Font">
            <summary>
            Font.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.View.Font.#ctor(System.String,System.Single,Resto.Front.Api.Data.View.FontStyle)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.Font.FontFamily">
            <summary>
            Font family.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.Font.Size">
            <summary>
            Font size.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.View.Font.FontStyle">
            <summary>
            Font style.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.FontStyle">
            <summary>
            Font style.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.View.FontStyle.Regular">
            <summary>
            Regular.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.View.FontStyle.Bold">
            <summary>
            Bold.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.View.FontStyle.Italic">
            <summary>
            Italic.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.View.FontStyle.Underline">
            <summary>
            Underline.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.View.FontStyle.Strikeout">
            <summary>
            Strikeout.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.View.InputDialogTypes">
            <summary>
            Input types for the input dialog. Use any input type or combination to specify, which input types do you expect.
            </summary>	
        </member>
        <member name="F:Resto.Front.Api.Data.View.InputDialogTypes.Card">
            <summary>
            To get card track. Window with card slide listener will be shown.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.View.InputDialogTypes.Number">
            <summary>
            To get number. Numpad window will be shown.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Assortment.ProductExtensions">
            <summary>
            Provides a set of static methods to access referenced entities.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductExtensions.GetParent(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.IOperationService)">
            <summary>
            Returns parent of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductExtensions.TryGetParent(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.IOperationService)">
            <summary>
            Returns parent of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductExtensions.GetSimpleModifiers(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.IOperationService)">
            <summary>
            Returns simpleModifiers of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductExtensions.TryGetSimpleModifiers(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.IOperationService)">
            <summary>
            Returns simpleModifiers of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductExtensions.GetGroupModifiers(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.IOperationService)">
            <summary>
            Returns groupModifiers of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductExtensions.TryGetGroupModifiers(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.IOperationService)">
            <summary>
            Returns groupModifiers of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductExtensions.GetIncludedInMenuSections(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.IOperationService)">
            <summary>
            Returns includedInMenuSections of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductExtensions.TryGetIncludedInMenuSections(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.IOperationService)">
            <summary>
            Returns includedInMenuSections of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductExtensions.GetDisabledSizes(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.IOperationService)">
            <summary>
            Returns disabledSizes of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductExtensions.TryGetDisabledSizes(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.IOperationService)">
            <summary>
            Returns disabledSizes of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductExtensions.GetTemplatedModifiersParams(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.IOperationService)">
            <summary>
            Returns templatedModifiersParams of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductExtensions.TryGetTemplatedModifiersParams(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.IOperationService)">
            <summary>
            Returns templatedModifiersParams of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Assortment.ProductGroupExtensions">
            <summary>
            Provides a set of static methods to access referenced entities.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductGroupExtensions.GetParent(Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.IOperationService)">
            <summary>
            Returns parent of the specified productGroup.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductGroupExtensions.TryGetParent(Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.IOperationService)">
            <summary>
            Returns parent of the specified productGroup or <c>null</c> if productGroup doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductGroupExtensions.GetChildProducts(Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.IOperationService)">
            <summary>
            Returns childProducts of the specified productGroup.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductGroupExtensions.TryGetChildProducts(Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.IOperationService)">
            <summary>
            Returns childProducts of the specified productGroup or <c>null</c> if productGroup doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductGroupExtensions.GetChildGroups(Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.IOperationService)">
            <summary>
            Returns childGroups of the specified productGroup.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.ProductGroupExtensions.TryGetChildGroups(Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.IOperationService)">
            <summary>
            Returns childGroups of the specified productGroup or <c>null</c> if productGroup doesn't exist.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Assortment.CompoundItemTemplateExtensions">
            <summary>
            Provides a set of static methods to access referenced entities.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.CompoundItemTemplateExtensions.GetCommonSimpleModifiers(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate,Resto.Front.Api.IOperationService)">
            <summary>
            Returns commonSimpleModifiers of the specified compoundItemTemplate.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.CompoundItemTemplateExtensions.TryGetCommonSimpleModifiers(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate,Resto.Front.Api.IOperationService)">
            <summary>
            Returns commonSimpleModifiers of the specified compoundItemTemplate or <c>null</c> if compoundItemTemplate doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.CompoundItemTemplateExtensions.GetCommonGroupModifiers(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate,Resto.Front.Api.IOperationService)">
            <summary>
            Returns commonGroupModifiers of the specified compoundItemTemplate.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.CompoundItemTemplateExtensions.TryGetCommonGroupModifiers(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate,Resto.Front.Api.IOperationService)">
            <summary>
            Returns commonGroupModifiers of the specified compoundItemTemplate or <c>null</c> if compoundItemTemplate doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.CompoundItemTemplateExtensions.GetSplittableSimpleModifiers(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate,Resto.Front.Api.IOperationService)">
            <summary>
            Returns splittableSimpleModifiers of the specified compoundItemTemplate.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.CompoundItemTemplateExtensions.TryGetSplittableSimpleModifiers(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate,Resto.Front.Api.IOperationService)">
            <summary>
            Returns splittableSimpleModifiers of the specified compoundItemTemplate or <c>null</c> if compoundItemTemplate doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.CompoundItemTemplateExtensions.GetSplittableGroupModifiers(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate,Resto.Front.Api.IOperationService)">
            <summary>
            Returns splittableGroupModifiers of the specified compoundItemTemplate.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Data.Assortment.CompoundItemTemplateExtensions.TryGetSplittableGroupModifiers(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate,Resto.Front.Api.IOperationService)">
            <summary>
            Returns splittableGroupModifiers of the specified compoundItemTemplate or <c>null</c> if compoundItemTemplate doesn't exist.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Assortment.ProductType.Goods">
            <summary>
            Goods
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Assortment.ProductType.Dish">
            <summary>
            Dish
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Assortment.ProductType.Modifier">
            <summary>
            Modifier
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Assortment.ProductType.Service">
            <summary>
            Service
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Assortment.ProductType.Rate">
            <summary>
            Rate
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Assortment.ProductType.Petrol">
            <summary>
            Petrol
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Assortment.ProductType.HalfFinishedGoods">
            <summary>
            Half finished goods
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Assortment.ProductType.ExternalGoods">
            <summary>
            External goods
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Assortment.ProductType.ForPurchase">
            <summary>
            Product for purchase, has a negative price
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.CanSetOpenPrice">
            <summary>Gets a value that indicates whether the product possible to set an open price.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.IsActive">
            <summary>Gets a value that indicates whether this product is active in assortment base. Product can be activated or deactivated via iikoOffice.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.MenuIndex">
            <summary>Gets an index of product in hierarchical menu, can be used to sort products inside the same product group.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.Number">
            <summary>Nomenclature article of product.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.Scale">
            <summary>Scale of the current product sizes or <c>null</c> for product without sizes.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.Template">
            <summary>Template of the current product or <c>null</c> for product without template.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.TaxPercent">
            <summary>Tax percent or <c>null</c> for not taxed products.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.MeasuringUnitName">
            <summary>Measurement unit of product to be displayed</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.RateSchedule">
            <summary>For products of type <see cref="F:Resto.Front.Api.Data.Assortment.ProductType.Service" /> is a schedule of a service rates. <c>null</c> for other product types.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.BackgroundColor">
            <summary>Background color of a menu button for the product. If the product has a menu image (<see cref="P:Resto.Front.Api.Data.Assortment.IProduct.HasMenuImage" />, <see cref="M:Resto.Front.Api.IOperationService.GetProductMenuImage(Resto.Front.Api.Data.Assortment.IProduct)" />) and UI supports images in menu, image should be used as a background instead of solid <see cref="P:Resto.Front.Api.Data.Assortment.IProduct.BackgroundColor" /></summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.FastCode">
            <summary>Quick type product code</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.FontColor">
            <summary>Font color of a menu button for the product's name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProduct.HasMenuImage">
            <summary>Whether the product has an image to be used as a background in menu. If <c>true</c>, call <see cref="M:Resto.Front.Api.IOperationService.GetProductMenuImage(Resto.Front.Api.Data.Assortment.IProduct)" /> to get an image. If the product doesn't have an image or UI doesn't support images in menu, use <see cref="P:Resto.Front.Api.Data.Assortment.IProduct.BackgroundColor" /> as a menu button background.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProductGroup.MenuIndex">
            <summary>Gets an index of product group in hierarchical menu, can be used to sort product groups inside the same parent product group.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProductGroup.BackgroundColor">
            <summary>Background color of a menu button for the product group. If the product group has a menu image (<see cref="P:Resto.Front.Api.Data.Assortment.IProductGroup.HasMenuImage" />, <see cref="M:Resto.Front.Api.IOperationService.GetProductGroupMenuImage(Resto.Front.Api.Data.Assortment.IProductGroup)" />) and UI supports images in menu, image should be used as a background instead of solid <see cref="P:Resto.Front.Api.Data.Assortment.IProductGroup.BackgroundColor" /></summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProductGroup.FontColor">
            <summary>Font color of a menu button for the product group's name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProductGroup.HasMenuImage">
            <summary>Whether the product group has an image to be used as a background in menu. If <c>true</c>, call <see cref="M:Resto.Front.Api.IOperationService.GetProductGroupMenuImage(Resto.Front.Api.Data.Assortment.IProductGroup)" /> to get an image. If the product group doesn't have an image or UI doesn't support images in menu, use <see cref="P:Resto.Front.Api.Data.Assortment.IProductGroup.BackgroundColor" /> as a menu button background.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Assortment.IProductScale">
            <summary>Scale of the product sizes.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProductScale.Name">
            <summary>Name of the product scale.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProductScale.DefaultSize">
            <summary>Size to use by default when using products with this scale.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Assortment.IProductSize">
            <summary>Size of the product, affects ingredient consumption and price.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProductSize.Name">
            <summary>Name of the product size.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProductSize.KitchenName">
            <summary>Name of the product size adapted for kitchen displays (usually as short as possible).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IProductSize.MenuIndex">
            <summary>Gets an index of the current size in the list of the product scale sizes, can be used to sort product sizes in menu.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Assortment.ICompoundItemTemplate">
            <summary>Template describing a family of customizable, interchangeable and combinable products.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.ICompoundItemTemplate.Name">
            <summary>Template name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.ICompoundItemTemplate.AllowProductsCombining">
            <summary>Whether compound items created using this template may be splitted into two components, each of which with own product and individual set of modifiers.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.ICompoundItemTemplate.Scale">
            <summary>Scale of the current template sizes or <c>null</c> for template without sizes.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Assortment.ITemplatedModifierParams">
            <summary>Product-specific settings of the compound item template modifier. <see cref="!:CompoundItemTemplate" /> describes general modifier settings for all products of that template, different products may specify different default amount and free of charge amount for each group modifier, child modifier or simple modifier. If <see cref="P:Resto.Front.Api.Data.Assortment.ITemplatedModifierParams.ProductGroup" /> is null, this instance is about simple modifier, otherwise this instance describes params for group modifier, then <see cref="P:Resto.Front.Api.Data.Assortment.ITemplatedModifierParams.Product" /> says whether it's about group itself or about child of that group.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.ITemplatedModifierParams.Product">
            <summary>Product of the modifier, depending on <see cref="P:Resto.Front.Api.Data.Assortment.ITemplatedModifierParams.ProductGroup" /> it is a simple or a child modifier.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.ITemplatedModifierParams.ProductGroup">
            <summary>Group of the child modifier or <c>null</c> for simple modifier.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.ITemplatedModifierParams.DefaultAmount">
            <summary>Default amount of the modifier for this object's owner product within compound item template. If the compound item is splitted, default amount of the common modifier is determined by the primary component's product.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.ITemplatedModifierParams.FreeOfChargeAmount">
            <summary>Maximum amount that will be free, additional amount will be paid.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IGroupModifier.FreeOfChargeAmount">
            <summary>Maximum amount of child modifiers that will be free, additional amount will be paid.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Assortment.IQuickMenuProductItem">
            <summary>Presents product cell of quick menu page grid.</summary>	
        </member>
        <member name="T:Resto.Front.Api.Data.Assortment.IQuickMenuProductGroupItem">
            <summary>Presents product group cell of quick menu page grid.</summary>	
        </member>
        <member name="T:Resto.Front.Api.Data.Assortment.IQuickMenuPage">
            <summary>Presents page of quick menu.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IQuickMenuPage.Name">
            <summary>Quick menu page name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Assortment.IQuickMenuPage.Items">
            <summary>Quick menu items grid. Empty cells are null, others are either product or product group.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Assortment.IQuickMenuItem">
            <summary>Presents cell of quick menu page grid.</summary>	
        </member>
        <member name="T:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus">
            <summary>Describes order item processing lifecycle from kitchen point of view.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Idle">
            <summary>Order item was printed, but cooking didn't start yet.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing1">
            <summary>Order item cooking was started, cooking is in first step progress.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing2">
            <summary>Order item cooking was started, cooking is in second step progress.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing3">
            <summary>Order item cooking was started, cooking is in third step progress.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing4">
            <summary>Order item cooking was started, cooking is in fourth step progress.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processed">
            <summary>Order item cooking completed, dish is ready to be served.</summary>
        </member>
        <member name="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Served">
            <summary>Order item was cooked and served.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Kitchen.IKitchenOrder">
            <summary>Order equivalent for kitchen. Kitchen orders created automatically from <see cref="T:Resto.Front.Api.Data.Orders.IOrder" /> and have independent lifetime.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrder.Number">
            <summary>Number of the source order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrder.Table">
            <summary>Table of the source order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrder.Waiter">
            <summary>Person who serves the source order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrder.Items">
            <summary>Source order item products equivalent for kitchen. Only printed order item products are taken into account for kitchen.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrder.BaseOrderId">
            <summary>Base order id.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrder.IsTopCookingPriority">
            <summary>The flag specifies that this order should be cooked out-of-order at kitchen. All orders which have this flag set on will appear above other orders at the kitchen display. Both groups (top priority and non-top priority) will be sorted separately using usual sorting logic (custom cooking priority, then default built-in criterions. Default value is false.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrder.CookingPriority">
            <summary>Specifies a custom cooking priority. While the application provides built-in prioritization logic for orders based on timing, dish courses, etc., you can override it and enforce custom cooking order based on your external logic. Ideally, all dishes should be cooked timely, but in case of concurrency when kitchen is high-loaded, you have to decide which orders are more important and should be cooked in the first place and which orders are allowed to be delayed. Higher priority values mean that the order, its serve groups and dishes will appear at the kitchen display earlier. Default value is zero. Both positive and negative values are allowed for raising and lowering the priority correspondingly. Orders with the same cooking priority will be sorted using default built-in logic.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem">
            <summary>Order cooking item equivalent for kitchen.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.Course">
            <summary>Gets course of this kitchen order item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.IsCookingStarted">
            <summary>Whether cooking of the item started. Depending on kitchen settings and waiter intentions item cooking can start immediately after printing or with some delay. Item with short cooking time may wait for long-time cooking item from the same serve group (to be served together), item of second or above course may wait for corresponding serve cheque printing. This property is perfect, expected state, do not mess up with processing status, which means actual status (cook can begin processing before or after the appointed time).</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.PrintTime">
            <summary>Source order item print time.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.EstimatedCookingBeginTime">
            <summary>Moment when item cooking should be started. This property is null until cooking should be started.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.Processing1BeginTime">
            <summary>Moment when item last time switched to the <see cref="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing1" /> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.Processing2BeginTime">
            <summary>Moment when item last time switched to the <see cref="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing2" /> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.Processing3BeginTime">
            <summary>Moment when item last time switched to the <see cref="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing3" /> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.Processing4BeginTime">
            <summary>Moment when item last time switched to the <see cref="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing4" /> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.ProcessingCompleteTime">
            <summary>Moment when item last time switched to the <see cref="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processed" /> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.ServeTime">
            <summary>Moment when item last time switched to the <see cref="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Served" /> status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.ProcessingStatus">
            <summary>Gets current position in a item processing lifecycle.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.CookingTime">
            <summary>Standard cooking time defined by settings if cooking is started, otherwise <c>null</c>.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.Kitchen">
            <summary>Item cooking place.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.Size">
            <summary>Gets size of the order item if it's product or template has scale, otherwise <c>null</c>.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.Deleted">
            <summary>Whether printed item has been deleted from source order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.ServeGroupNumber">
            <summary>Identifies order item products group to be served together. Cooking of items from the same order with the same serve group number should be completed at the same time, so that waiter will serve them together.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCookingItem.Comment">
            <summary>Optional text comment, can be used as a message from waiter to cook.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemProduct">
            <summary>Order item product equivalent for kitchen.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemProduct.Amount">
            <summary>Product amount to be cooked.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemProduct.Product">
            <summary>Product to be cooked.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemProduct.Modifiers">
            <summary>Gets product modifiers. This collection is kitchen equivalent of simple and group child modifiers of the source product.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Kitchen.IKitchenOrderCompoundItem">
            <summary>Order item compound item equivalent for kitchen.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCompoundItem.Template">
            <summary>Template of the current kitchen compound item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCompoundItem.PrimaryComponent">
            <summary>Primary part of the kitchen compound item. For the undivided compound item this part is single, for splitted — primary.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCompoundItem.SecondaryComponent">
            <summary>Secondary part of the splitted kitchen compound item or <c>null</c> for undivided compound item.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCompoundItem.CommonModifiers">
            <summary>Common (non-splittable) assigned modifiers. Apply to all components.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Kitchen.IKitchenOrderCompoundItemComponent">
            <summary>Order item compound item component equivalent for kitchen.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCompoundItemComponent.Product">
            <summary>Compound item component product to be cooked.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCompoundItemComponent.Amount">
            <summary>Compound item component amount to be cooked.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderCompoundItemComponent.Modifiers">
            <summary>Get compound component's modifiers.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemProductComment">
            <summary>Comment for order item product, kitchen equivalent of <see cref="!:Orders.IOrderItemProductComment" />.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemProductComment.Comment">
            <summary>Text of the comment.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemProductComment.Deleted">
            <summary>Whether comment of the printed product was deleted.</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier">
            <summary>Specifies some kind of predefined product cooking customization.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.Amount">
            <summary>Modifier amount to be cooked.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.AmountIndependentOfParentAmount">
            <summary>Whether amount of the modifier is absolute or relative to parent amount. When modifier amount depends on parent, it means multiplication — specified amount of modifier should be cooked per each parent unit, otherwise it means addition — specified amount of modifier should be cooked for whole parent.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.Product">
            <summary>Modifier to be cooked.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.Kitchen">
            <summary>Modifier cooking place.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.Deleted">
            <summary>Whether modifier or the printed product has been deleted from source order.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.EstimatedCookingBeginTime">
            <summary>Moment when modifier cooking should be started. This property is null until cooking should be started.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.Processing1BeginTime">
            <summary>Moment when product last time switched to the <see cref="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing1" /> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.Processing2BeginTime">
            <summary>Moment when product last time switched to the <see cref="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing2" /> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.Processing3BeginTime">
            <summary>Moment when product last time switched to the <see cref="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing3" /> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.Processing4BeginTime">
            <summary>Moment when product last time switched to the <see cref="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processing4" /> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.ProcessingCompleteTime">
            <summary>Moment when product last time switched to the <see cref="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Processed" /> or greater status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.ServeTime">
            <summary>Moment when product last time switched to the <see cref="F:Resto.Front.Api.Data.Kitchen.KitchenOrderItemProcessingStatus.Served" /> status.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.ProcessingStatus">
            <summary>Gets current position in a product processing lifecycle.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.CookingTime">
            <summary>For separate modifiers standard cooking time defined by settings if cooking is started, otherwise <c>null</c>. This property is meaningless for non-separate modifiers.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Kitchen.IKitchenOrderItemModifier.IsSeparate">
            <summary>Whether modifier should be cooked separately from its product. In general this property exposes modifier semantics: while some modifiers specify <i>how</i> to cook their product, another modifiers are additional dish parts or even separate dishes. First type completely depends on product and has the same cooking property values, second type is separate and has own kitchen, status etc.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.DataTransferObjects.SmsSendingResultDto.IsError">
            <summary>Indicates if sms was sent successfully or not.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.DataTransferObjects.SmsSendingResultDto.ErrorText">
            <summary>Error text in case of unsuccessfully sending.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.DataTransferObjects.CheckSplitResultDto.CheckSplitRequiredResult">
            <summary>Whether order should be splitted between cash registers before payment.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.DataTransferObjects.CheckSplitResultDto.PointOfSale">
            <summary>Estimated point of sale for order payment if it can be determinated at the moment.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.DataTransferObjects.PreliminaryOrderItemModifier.Dish">
            <summary>Modifier dish</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.DataTransferObjects.PreliminaryOrderItemModifier.Amount">
            <summary>Modifier amount</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.DataTransferObjects.PreliminaryOrderItemModifier.IsChildModifier">
            <summary>Is modifier child of group modifier</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.DataTransferObjects.PreliminaryOrderItemProduct.Dish">
            <summary>Product dish</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.DataTransferObjects.PreliminaryOrderItemProduct.Amount">
            <summary>Product amount</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.DataTransferObjects.PreliminaryOrderItemProduct.ProductSize">
            <summary>Size of the product.</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.DataTransferObjects.PreliminaryOrderItemProduct.Modifiers">
            <summary>Product modifiers</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrderModifierItem.Dish">
            <summary>Modifier product</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrderModifierItem.Amount">
            <summary>Modifier amount</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrderModifierItem.IsChildModifier">
            <summary>Is modifier child of group modifier</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrderProductItem.Dish">
            <summary>Product product</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrderProductItem.Amount">
            <summary>Product amount</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrderProductItem.ProductSize">
            <summary>Size of the product if it has scale, otherwise <c>null</c>.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrderProductItem.Modifiers">
            <summary>Product modifiers</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrder.CreateTime">
            <summary>Time of creation</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrder.Number">
            <summary>Arbitrary non-unique identifier (tag)</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrder.OriginName">
            <summary>Optional marker used to specify order origin. This property contains either null or name of the source order was received from. Specifying origin allows to analyse efficiency of external order sources such as different web-sites, mobile applications and so on.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrder.Products">
            <summary>Order products</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.ProductStocks.IProductBatch">
            <summary>Cooked product batch</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.ProductStocks.IProductBatch.CookingTime">
            <summary>Batch cooking time</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.ProductStocks.IProductBatch.Amount">
            <summary>Batch rest amount</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.ProductStocks.IProductStock">
            <summary>Stock of cooked product batches</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.ProductStocks.IProductStock.Product">
            <summary>Stock product</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.ProductStocks.IProductStock.Batches">
            <summary>Cooked product batches</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.ProductStocks.IProductStock.CookDebt">
            <summary>Amount of product waiting for cook</summary>
        </member>
        <member name="T:Resto.Front.Api.Data.ProductStocks.IProductStocksList">
            <summary>List of all stocks of cooked product batches</summary>	
        </member>
        <member name="P:Resto.Front.Api.Data.ProductStocks.IProductStocksList.Stocks">
            <summary>Stocks of cooked product batches</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Taxes.ITaxCategory.Name">
            <summary>Vat name.</summary>
        </member>
        <member name="P:Resto.Front.Api.Data.Taxes.ITaxCategory.VatPercent">
            <summary>Vat percent.</summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Resto.Front.Api.Attributes.JetBrains.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:Resto.Front.Api.Attributes.JetBrains.MeansImplicitUseAttribute"/> or <see cref="T:Resto.Front.Api.Attributes.JetBrains.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:Resto.Front.Api.Attributes.JetBrains.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:Resto.Front.Api.Attributes.JetBrains.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:Resto.Front.Api.Attributes.JetBrains.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:Resto.Front.Api.Attributes.JetBrains.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:Resto.Front.Api.Attributes.JetBrains.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:Resto.Front.Api.Attributes.JetBrains.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:Resto.Front.Api.Attributes.JetBrains.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Attributes.JetBrains.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:Resto.Front.Api.Attributes.JetBrains.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:Resto.Front.Api.Attributes.JetBrains.SourceTemplateAttribute">source template</see> if the
            <see cref="T:Resto.Front.Api.Attributes.JetBrains.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:Resto.Front.Api.Attributes.JetBrains.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:Resto.Front.Api.Attributes.JetBrains.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:Resto.Front.Api.Attributes.JetBrains.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Attributes.JetBrains.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:Resto.Front.Api.Attributes.JetBrains.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:Resto.Front.Api.Attributes.PluginLicenseModuleIdAttribute">
            <summary>
            Specifies plugin's licensable module identifier.
            </summary>
            <remarks>
            If plugin is intended to be distributed by “license per plugin” scheme,
            contact iiko to register licensable module for your plugin,
            then apply this attribute to plugin with received module identifier.
            
            Each plugin instance will require another one license slot,
            so total slots number for given license module should correspond to count of simultaneously running iikoFronts with your plugin installed to.
            </remarks>
            <example>
            <code>
            [PluginLicenseModuleId(42)]
            public sealed class MyPlugin : IFrontPlugin
            { ... }
            </code>
            </example>
        </member>
        <member name="P:Resto.Front.Api.Attributes.PluginLicenseModuleIdAttribute.ModuleId">
            <summary>
            Licensable module identifier.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Attributes.PluginLicenseModuleIdAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Attributes.PluginLicenseModuleIdAttribute"/> class.
            </summary>
            <param name="moduleId">The licensable module identifier.</param>
        </member>
        <member name="T:Resto.Front.Api.Devices.ICashRegister">
            <summary>
            Common interface for cash register plugin.
            Derive from <see cref="T:System.MarshalByRefObject"/> and implement this interface to make custom cash register.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.DoCheque(Resto.Front.Api.Data.Device.Tasks.ChequeTask,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform a cheque printing operation on a cash register.
            </summary>
            <param name="chequeTask"><see cref="T:Resto.Front.Api.Data.Device.Tasks.ChequeTask"/> Information about the order items, payments, discounts, cashier and other.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <remarks>Called when the order is closed or storned on the plug-in cash register.</remarks>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
            <returns cref="T:Resto.Front.Api.Data.Device.Results.CashRegisterResult">State of the cash register: sums, vat, sale number and other.</returns>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.GetCashRegisterData">
            <summary>
            Get the current state of the cash register.
            </summary>
            <remarks>It is called to compare the sums for each cheque printing, opening and closing a cafe session on a cash register. </remarks>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
            <returns cref="T:Resto.Front.Api.Data.Device.Results.CashRegisterResult">State of the cash register: sums, vat, sale number and other.</returns>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.DoZReport(System.String,System.String,System.Boolean,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform Z-report printing operation at the cafe session closing.
            </summary>
            <param name="cashierName">Cashier's name.</param>
            <param name="cashierTaxpayerId">Cashier's taxpayer id.</param>
            <param name="printEklzReport">True, if need to print a cafe session settlement status report.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <remarks>Called at the cafe session closing.</remarks>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
            <returns cref="T:Resto.Front.Api.Data.Device.Results.CashRegisterResult">State of the cash register: sums, vat, sale number and other.</returns>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.GetCashRegisterStatus(System.Collections.Generic.IReadOnlyCollection{Resto.Front.Api.Data.Device.Tasks.CashRegisterStatusField})">
            <summary>
            Get the current status of the cash register.
            </summary>
            <param name="statusFields">List of the fields.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
            <returns cref="T:Resto.Front.Api.Data.Device.Results.CashRegisterStatus">Status of the cash register with completed requested fields.</returns>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.DoXReport(System.String,System.String,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform X-report printing operation at the cafe session opening.
            </summary>
            <param name="cashierName">Cashier's name.</param>
            <param name="cashierTaxpayerId">Cashier's taxpayer id.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <remarks>Called at the opening cafe session.</remarks>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
            <returns cref="T:Resto.Front.Api.Data.Device.Results.CashRegisterResult">State of the cash register: sums, vat, sale number and other.</returns>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.PrintText(System.String)">
            <summary>
            Perform the operation of printing non-fiscal cheque (information, advertising or other).
            </summary>
            <param name="text">Text for printing.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.DoOpenSession(System.String,System.String,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform open cafe session operation.
            </summary>
            <param name="cashierName">Cashier's name.</param>
            <param name="cashierTaxpayerId">Cashier's taxpayer id.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.DoPayIn(System.Decimal,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform pay in cash operation.
            </summary>
            <param name="sum">Cash sum.</param>
            <param name="cashier">Cashier.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.DoPayOut(System.Decimal,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform pay out cash operation.
            </summary>
            <param name="sum">Cash sum.</param>
            <param name="cashier">Cashier.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.OpenDrawer(System.String,System.String,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform open drawer operation.
            </summary>
            <param name="cashierName">Cashier's name.</param>
            <param name="cashierTaxpayerId">Cashier's taxpayer id.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.IsDrawerOpened">
            <summary>
            Checks a cash drawer status.
            </summary>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
            <returns><c>true</c> if the cash drawer is open, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.GetQueryInfo">
            <summary>
            Returns supported additional operations.  
            </summary>
            <remarks>These operations are specific. For each device, these operations can be different.</remarks>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.DirectIo(Resto.Front.Api.Data.Device.Tasks.CommandExecute)">
            <summary>
            Perform additional specific operation.  
            </summary>
            <param name="execute">Specific command to execute.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
            <returns cref="T:Resto.Front.Api.Data.Device.Results.DirectIoResult">A document with the text of the command execution result. For example, a cash register's control tape.</returns>
            <seealso cref="M:Resto.Front.Api.Devices.ICashRegister.GetQueryInfo"/>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.DoBillCheque(Resto.Front.Api.Data.Device.Tasks.BillTask,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform a cheque printing operation on a cash register without payments.
            </summary>
            <param name="billTask"><see cref="T:Resto.Front.Api.Data.Device.Tasks.BillTask"/> Information about the order items, discounts, cashier and other.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
            <returns cref="T:Resto.Front.Api.Data.Device.Results.CashRegisterResult">State of the cash register: sums, vat, bill number and other.</returns>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.DoCorrection(Resto.Front.Api.Data.Device.Tasks.CorrectionTask,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform a cheque correction.
            </summary>
            <param name="task"><see cref="T:Resto.Front.Api.Data.Device.Tasks.CorrectionTask"/> Contains information about sums that need to correct.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.CustomerDisplayIdle(System.TimeSpan)">
            <summary>
            Put a customer display into idle mode.
            </summary>
            <param name="timeToIdle">Time to turn off the display.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.CustomerDisplayText(Resto.Front.Api.Data.Device.Tasks.CustomerDisplayTextTask)">
            <summary>
            Display a text on the customer display.
            </summary>
            <param name="task"><see cref="T:Resto.Front.Api.Data.Device.Tasks.CustomerDisplayTextTask"/> Text with markup for display.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegister.GetCashRegisterDriverParameters">
            <summary>
            Get the cash register driver parameters.
            </summary>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
            <returns cref="T:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters">State of the cash register driver: can it print text, print barcode, QR code and other.</returns>
        </member>
        <member name="T:Resto.Front.Api.Devices.ICashRegisterFactory">
            <summary>
            Common interface for creating device plugin.
            Derive from <see cref="T:System.MarshalByRefObject"/> and implement this interface to make custom device factory.
            Your implementation should be registered by <see cref="M:Resto.Front.Api.IOperationService.RegisterCashRegisterFactory(Resto.Front.Api.Devices.ICashRegisterFactory)"/>.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Devices.ICashRegisterFactory.Create(System.Guid,Resto.Front.Api.Data.Device.Settings.CashRegisterSettings)">
            <summary>
            Create cash register.
            </summary>
            <param name="deviceId">Cash register id.</param>
            <param name="settings">Cash register settings.</param>
            <returns>Cash register device.</returns>
        </member>
        <member name="T:Resto.Front.Api.Devices.IDevice">
            <summary>
            Common interface for device plugin.
            Derive from <see cref="T:System.MarshalByRefObject"/> and implement this interface to make custom device processor.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Devices.IDevice.DeviceId">
            <summary>
            Device id.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Devices.IDevice.DeviceName">
            <summary>
            Device title that will be displayed in BackOffice.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Devices.IDevice.GetDeviceInfo">
            <summary>
            Device status.
            </summary>
            <seealso cref="T:Resto.Front.Api.Data.Device.State"/>
        </member>
        <member name="M:Resto.Front.Api.Devices.IDevice.Start">
            <summary>
            Perform start device operation.
            </summary>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.Devices.IDevice.Stop">
            <summary>
            Perform stop device operation.
            </summary>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.Devices.IDevice.Setup(Resto.Front.Api.Data.Device.Settings.DeviceSettings)">
            <summary>
            Perform setup new configuration operation.
            </summary>
            <param name="settings"><see cref="T:Resto.Front.Api.Data.Device.Settings.DeviceSettings"/> New device configuration.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.Devices.IDevice.RemoveDevice">
            <summary>
            Perform remove device operation.
            </summary>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="P:Resto.Front.Api.Devices.IDeviceFactory.CodeName">
            <summary>
            Device title that will be displayed in BackOffice.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Devices.IDeviceFactory.DefaultDeviceSettings">
            <summary>
            Get the initial configuration of the device.
            </summary>
            <exception cref="T:Resto.Front.Api.Exceptions.DeviceException">Exception to notify that device actions was not successful.</exception>
        </member>
        <member name="T:Resto.Front.Api.Devices.ChequeTaskProcessor.IEditableChequeTaskProcessor">
            <summary>
            Common interface for extending the functionality of fiscal operations.
            Derive from <see cref="T:System.MarshalByRefObject"/> and implement this interface to make custom cheque task processor.
            Your implementation should be registered by <see cref="M:Resto.Front.Api.IOperationService.RegisterChequeTaskProcessor(Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor)"/>.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IEditableChequeTaskProcessor.BeforePayIn(Resto.Front.Api.Data.Device.ICashRegisterInfo,System.Decimal,System.Boolean,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action before pay in.
            </summary>
            <param name="device">Cash register.</param>
            <param name="sum">Sum to pay in.</param>
            <param name="isCloseSession">Is the close session closed?</param>
            <param name="cashier">Cashier.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IEditableChequeTaskProcessor.BeforePayOut(Resto.Front.Api.Data.Device.ICashRegisterInfo,System.Decimal,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action before pay out when the cafe session is open.
            </summary>
            <param name="device">Cash register.</param>
            <param name="sum">Sum to pay in.</param>
            <param name="cashier">Cashier.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IEditableChequeTaskProcessor.BeforePayOutSessionClosed(Resto.Front.Api.Data.Device.ICashRegisterInfo,System.Decimal,System.Decimal@,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action before pay out when the cafe session closed.
            </summary>
            <param name="device">Cash register.</param>
            <param name="opeationSum">Sum to pay out.</param>
            <param name="estimatedSum">The estimated sum.</param>
            <param name="cashier">Cashier.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="T:Resto.Front.Api.Devices.ChequeTaskProcessor.IReadonlyChequeTaskProcessor">
            <summary>
            Common interface for extending the functionality of fiscal operations.
            Derive from <see cref="T:System.MarshalByRefObject"/> and implement this interface to make custom cheque task processor.
            Your implementation should be registered by <see cref="M:Resto.Front.Api.IOperationService.RegisterChequeTaskProcessor(Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor)"/>.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IReadonlyChequeTaskProcessor.BeforePayIn(Resto.Front.Api.Data.Device.ICashRegisterInfo,System.Decimal,System.Boolean,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action before pay in.
            </summary>
            <param name="device">Cash register.</param>
            <param name="sum">Sum to pay in.</param>
            <param name="isCloseSession">Is the close session closed?</param>
            <param name="cashier">Cashier.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IReadonlyChequeTaskProcessor.BeforePayOut(Resto.Front.Api.Data.Device.ICashRegisterInfo,System.Decimal,System.Boolean,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action before pay out.
            </summary>
            <param name="device">Cash register.</param>
            <param name="sum">Sum to pay in.</param>
            <param name="isCloseSession">Is the close session closed?</param>
            <param name="cashier">Cashier.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="T:Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor">
            <summary>
            Common interface for extending the functionality of fiscal operations.
            Derive from <see cref="T:System.MarshalByRefObject"/> and implement this interface to make custom cheque task processor.
            Your implementation should be registered by <see cref="M:Resto.Front.Api.IOperationService.RegisterChequeTaskProcessor(Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor)"/>.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor.BeforeDoCheckAction(Resto.Front.Api.Data.Device.Tasks.ChequeTask,Resto.Front.Api.Data.Device.ICashRegisterInfo,Resto.Front.Api.Data.Device.CashRegisterChequeExtensions,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action before do cheque. 
            </summary>
            <param name="chequeTask">Cheque task.</param>
            <param name="device">Cash register.</param>
            <param name="chequeExtensions">Additional data to the operation.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor.BeforeZReport(Resto.Front.Api.Data.Device.ICashRegisterInfo,System.Decimal,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action before printing the Z-report.
            </summary>
            <param name="device">Cash register.</param>
            <param name="cashRest">Cash rest.</param>
            <param name="authUser">User.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor.BeforeXReport(Resto.Front.Api.Data.Device.ICashRegisterInfo,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action before printing the X-report.
            </summary>
            <param name="device">Cash register.</param>
            <param name="authUser">User.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor.AfterDoCheckAction(Resto.Front.Api.Data.Device.Tasks.ChequeTask,Resto.Front.Api.Data.Device.Results.PostResult,Resto.Front.Api.Data.Device.ICashRegisterInfo,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action after do cheque.
            </summary>
            <param name="chequeTask">Cheque task.</param>
            <param name="result">The result of the operation do check.</param>
            <param name="device">Cash register.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor.AfterZReport(Resto.Front.Api.Data.Device.ICashRegisterInfo,Resto.Front.Api.Data.Device.Results.PostResult,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action after printing the Z-report.
            </summary>
            <param name="device">Cash register.</param>
            <param name="result">The result of the operation print Z-report.</param>
            <param name="authUser">User.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor.AfterXReport(Resto.Front.Api.Data.Device.ICashRegisterInfo,Resto.Front.Api.Data.Device.Results.PostResult,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action after printing the X-report.
            </summary>
            <param name="device">Cash register.</param>
            <param name="result">The result of the operation print X-report.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor.AfterPayIn(Resto.Front.Api.Data.Device.ICashRegisterInfo,System.Decimal,Resto.Front.Api.Data.Device.Results.PostResult,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action after pay in.
            </summary>
            <param name="device">Cash register.</param>
            <param name="sum">Sum to pay in.</param>
            <param name="result">The result of the operation pay in.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="M:Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor.AfterPayOut(Resto.Front.Api.Data.Device.ICashRegisterInfo,System.Decimal,Resto.Front.Api.Data.Device.Results.PostResult,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform the action after pay out.
            </summary>
            <param name="device">Cash register.</param>
            <param name="sum">Sum to pay out.</param>
            <param name="result">The result of the operation pay out.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
        </member>
        <member name="T:Resto.Front.Api.Devices.IScale">
            <summary>
            Common interface for scale front plugin.
            Derive from <see cref="T:System.MarshalByRefObject"/> and implement this interface to make custom scale processor.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Devices.IScale.MeasureWeight">
            <summary>
            Perform measure of weight operation.
            </summary>
            <returns>Product weight in kilograms.</returns>
        </member>
        <member name="T:Resto.Front.Api.Devices.IScaleFactory">
            <summary>
            Common interface for creating device plugin.
            Derive from <see cref="T:System.MarshalByRefObject"/> and implement this interface to make custom device factory.
            Your implementation should be registered by <see cref="M:Resto.Front.Api.IOperationService.RegisterScaleFactory(Resto.Front.Api.Devices.IScaleFactory)"/>.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Devices.IScaleFactory.Create(System.Guid,Resto.Front.Api.Data.Device.Settings.DeviceSettings)">
            <summary>
            Create Scale.
            </summary>
            <param name="deviceId">Scale id.</param>
            <param name="settings">Scale settings.</param>
            <returns>Scale device.</returns>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.CreateJournalEvent(System.String,Resto.Front.Api.Data.JournalEvents.Severity,System.String,System.Nullable{System.DateTime})">
            <summary>Creates new journal event.</summary>
            <param name="sender">Sender of new journal event. Max length - 255 chars.</param>
            <param name="severity">Severity of new journal event.</param>
            <param name="eventType">Event type of new journal event. Max length - 255 chars.</param>
            <param name="dateTime">Date and time of new journal event. You can leave it unspecified to use current date and time.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.SetJournalEventAttribute(System.String,System.String,Resto.Front.Api.Editors.Stubs.INewJournalEventStub)">
            <summary>Sets attribute for journal event.</summary>
            <param name="attributeName">Attribute name. Max length - 255 chars.</param>
            <param name="value">Attribute value. Max length - 1000 chars.</param>
            <param name="journalEvent">Journal event.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AttachToJournalEvent(Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.INewJournalEventStub)">
            <summary>Sets default attributes of order for journal event.</summary>
            <param name="order">Order.</param>
            <param name="journalEvent">Journal event.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.CreateOrder(System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Organization.Sections.ITable},Resto.Front.Api.Data.Security.IUser)">
            <summary>Creates new order on specified table. User must have rights to create orders.</summary>
            <param name="tables">Tables on which order will be created. If tables is null or empty, then order will be created on the default table (depending on select iikoFront mode).</param>
            <param name="waiter">Waiter for new order. If <c>null</c>, user from credentials will be used.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.CreateDeliveryOrder(System.Nullable{System.Int32},System.DateTime,System.String,Resto.Front.Api.Data.Brd.AddressDto,System.DateTime,Resto.Front.Api.Data.Organization.IOrderType,Resto.Front.Api.Editors.Stubs.IClientStub,Resto.Front.Api.Data.Security.IUser,System.Nullable{System.TimeSpan})">
            <summary>Creates new delivery order. User must have rights to edit delivery orders. Specify address for courier-service; leave it null for self-service.</summary>
            <param name="number">Delivery number</param>
            <param name="creationTime">Creation time of the delivery. Cannot be greater than current time at the moment of processing action at front.</param>
            <param name="phone">Contact phone of the client.</param>
            <param name="address">Address where order should be delivered for courier-service or null for self-service.</param>
            <param name="duration">Calculated delivery duration (accurate within minutes) or <c>null</c> to use default predefined duration.</param>
            <param name="expectedDeliverTime">Time when client wants the order to be delivered.</param>
            <param name="type">Order type. Order service type should be <see cref="!:Resto.Front.Api.Data.Organization.OrderServiceType.DeliveryByCourier"/> or <see cref="!:Resto.Front.Api.Data.Organization.OrderServiceType.DeliveryByClient"/>.</param>
            <param name="client">Client who ordered the delivery</param>
            <param name="deliveryOperator">User who creates the order.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.CreateDeliveryOrder(System.Guid,System.Guid,System.Nullable{System.Int32},System.DateTime,System.String,Resto.Front.Api.Data.Brd.AddressDto,System.DateTime,Resto.Front.Api.Data.Organization.IOrderType,Resto.Front.Api.Editors.Stubs.IClientStub,Resto.Front.Api.Data.Security.IUser,System.Nullable{System.TimeSpan})">
            <summary>Creates new delivery order. User must have rights to edit delivery orders. Specify address for courier-service; leave it null for self-service.</summary>
            <param name="id">Unique identifier of the new order. MUST be unique for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid().</param>
            <param name="deliveryId">Id of the new delivery</param>
            <param name="number">Delivery number</param>
            <param name="creationTime">Creation time of delivery. Cannot be greater than current time at the moment of processing action at front.</param>
            <param name="phone">Contact phone of the client.</param>
            <param name="address">Address where order should be delivered for courier-service or null for self-service.</param>
            <param name="duration">Calculated delivery duration (accurate within minutes) or <c>null</c> to use default predefined duration.</param>
            <param name="expectedDeliverTime">Time when client wants the order to be delivered.</param>
            <param name="type">Order type. Order service type should be <see cref="!:Resto.Front.Api.Data.Organization.OrderServiceType.DeliveryByCourier"/> or <see cref="!:Resto.Front.Api.Data.Organization.OrderServiceType.DeliveryByClient"/>.</param>
            <param name="client">Delivery client</param>
            <param name="deliveryOperator">User who creates the order.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryLastVerifiedRestrictionsHash(System.String,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Set last verified restirictions hash from server.</summary>
            <param name="lastVerifiedDeliveryRestrictionsHash">last verified restirictions hash from server</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryLastDefaultTerminalDeliveryDurationInMinutes(System.Nullable{System.Int64},Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Set calculated delivery duration without overrided value on terminal.</summary>
            <param name="lastDefaultTerminalDeliveryDurationInMinutes">delivery duration without overriden value on terminal</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.SetOrderType(Resto.Front.Api.Data.Organization.IOrderType,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Sets order type for order.</summary>
            <param name="type">Order type to set</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderPricingTime(System.Nullable{System.DateTime},Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Change order pricing time, which determines the price of products. By default time taken from items print time.</summary>
            <param name="pricingTime">New order pricing time</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderIikoCard5Coupon(System.String,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Change order iikoCard5 coupon, used in iikoCard5 system.</summary>
            <param name="iikoCard5Coupon">New iikoCard5 coupon</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderGuest(System.String,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Adds new guest to existing order. User must have rights to edit orders.</summary>
            <param name="name">Name of the new guest. If name is null, then it will be generated automatically.</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderGuest(System.Guid,System.String,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Adds new guest with the given ID to existing order. User must have rights to edit orders.</summary>
            <param name="id">Unique identifier of the new guest in the order. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="name">Name of the new guest. If name is null, then it will be generated automatically.</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeEstimatedOrderGuestsCount(System.Int32,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Changes estimated order guests count. Use this method to set estimated guests count when guests collection doesn't reflect actual state of affairs.</summary>
            <param name="estimatedGuestsCount">How many people will be served using this order, in spite of how many guests this order will be splitted by.</param>
            <param name="order">Order to change estimated guests count.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderProductItem(System.Decimal,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderGuestItemStub,Resto.Front.Api.Data.Assortment.IProductSize,Resto.Front.Api.Data.Orders.OrderItemCourse,System.Nullable{System.Decimal})">
            <summary>Adds assortment position to the guest in existing order. User must have rights to edit orders.</summary>
            <param name="amount">For positions with weight: weight in defined measure unit. For positions without weight: amount of the position. Can be from 0.001 to 999.999</param>
            <param name="course">Cooking and serving priority of the order item.</param>
            <param name="predefinedPrice">Predefined fixed price of the order item, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
            <param name="size">Size of the order item if it's product has scale, otherwise <c>null</c>.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderProductItem(System.Guid,System.Decimal,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderGuestItemStub,Resto.Front.Api.Data.Assortment.IProductSize,Resto.Front.Api.Data.Orders.OrderItemCourse,System.Nullable{System.Decimal})">
            <summary>Adds assortment position to the guest in existing order. User must have rights to edit orders.</summary>
            <param name="id">Unique identifier of the new item in the order. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">For positions with weight: weight in defined measure unit. For positions without weight: amount of the position. Can be from 0.001 to 999.999</param>
            <param name="course">Cooking and serving priority of the order item.</param>
            <param name="predefinedPrice">Predefined fixed price of the order item, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
            <param name="size">Size of the order item if it's product has scale, otherwise <c>null</c>.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderModifierItem(System.Int32,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderProductItemStub,System.Nullable{System.Decimal})">
            <summary>Adds order item modifier to the order item in existing order. User must have rights to edit orders.</summary>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="predefinedPrice">Predefined fixed price of the modifier, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderProductItem.AvailableSimpleModifiers collection or one of the IOrderProductItem.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderProductItem.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="productItem">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderModifierItem(System.Int32,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,System.Nullable{System.Decimal})">
            <summary>Adds order item modifier to the compound item in existing order. User must have rights to edit orders.</summary>
            <remarks>Compound item should have at least one component, so <see cref="M:Resto.Front.Api.Editors.IEditSession.AddPrimaryComponent(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,System.Nullable{System.Decimal})"/> should be called before adding modifiers.</remarks>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="predefinedPrice">Predefined fixed price of the modifier, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderProductItem.AvailableSimpleModifiers collection or one of the IOrderProductItem.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderProductItem.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="compoundItem">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderModifierItem(System.Int32,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemComponentStub,System.Nullable{System.Decimal})">
            <summary>Adds order item modifier to the compound item component in existing order. User must have rights to edit orders.</summary>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="predefinedPrice">Predefined fixed price of the modifier, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderProductItem.AvailableSimpleModifiers collection or one of the IOrderProductItem.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderProductItem.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="component">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderModifierItem(System.Guid,System.Int32,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderProductItemStub,System.Nullable{System.Decimal})">
            <summary>Adds order item modifier to the order item in existing order. User must have rights to edit orders.</summary>
            <param name="id">Unique identifier of the new order item modifier. MUST be unique not only for the order item or order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="predefinedPrice">Predefined fixed price of the modifier, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderProductItem.AvailableSimpleModifiers collection or one of the IOrderProductItem.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderProductItem.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="productItem">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderModifierItem(System.Guid,System.Int32,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,System.Nullable{System.Decimal})">
            <summary>Adds order item modifier to the compound item in existing order. User must have rights to edit orders.</summary>
            <remarks>Compound item should have at least one component, so <see cref="M:Resto.Front.Api.Editors.IEditSession.AddPrimaryComponent(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,System.Nullable{System.Decimal})"/> should be called before adding modifiers.</remarks>
            <param name="id">Unique identifier of the new order item modifier. MUST be unique not only for the order item or order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="predefinedPrice">Predefined fixed price of the modifier, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderProductItem.AvailableSimpleModifiers collection or one of the IOrderProductItem.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderProductItem.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="compoundItem">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderModifierItem(System.Guid,System.Int32,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemComponentStub,System.Nullable{System.Decimal})">
            <summary>Adds order item modifier to the compound item component in existing order. User must have rights to edit orders.</summary>
            <param name="id">Unique identifier of the new order item modifier. MUST be unique not only for the order item or order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="predefinedPrice">Predefined fixed price of the modifier, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderProductItem.AvailableSimpleModifiers collection or one of the IOrderProductItem.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderProductItem.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="component">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderServiceItem(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderGuestItemStub,System.Nullable{System.TimeSpan})">
            <summary>Adds time pay service item to the guest in existing order. User must have permission to edit orders.</summary>
            <param name="timeLimit">Total amount of time after which the service will be stopped or <c>null</c> for default limit (12 hours). Includes all periods.</param>
            <param name="service">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderCompoundItem(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderGuestItemStub,Resto.Front.Api.Data.Assortment.IProductSize,Resto.Front.Api.Data.Orders.OrderItemCourse)">
            <summary>Adds compound item to the guest in existing order. User must have permission to edit orders.</summary>
            <remarks>Compound item should have at least one component, so <see cref="M:Resto.Front.Api.Editors.IEditSession.AddPrimaryComponent(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,System.Nullable{System.Decimal})"/> should be called after adding a compound item.</remarks>
            <param name="course">Cooking and serving priority of the order item.</param>
            <param name="product">Assortment position used to fix modifiers. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added.</param>
            <param name="guest">Guest to which position will be added.</param>
            <param name="size">Size of the order item if it's template has scale, otherwise <c>null</c>.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddPrimaryComponent(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,System.Nullable{System.Decimal})">
            <summary>Adds a primary component to the compound item.</summary>
            <param name="predefinedPrice">Predefined fixed price of the component, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added.</param>
            <param name="compoundItem">Compound item to which new component will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddSecondaryComponent(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,System.Nullable{System.Decimal})">
            <summary>Adds a secondary component to the compound item.</summary>
            <param name="predefinedPrice">Predefined fixed price of the component, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added.</param>
            <param name="compoundItem">Compound item to which new component will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderCompoundItem(System.Guid,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderGuestItemStub,Resto.Front.Api.Data.Assortment.IProductSize,Resto.Front.Api.Data.Orders.OrderItemCourse)">
            <summary>Adds compound item to the guest in existing order. User must have permission to edit orders.</summary>
            <remarks>Compound item should have at least one component, so <see cref="M:Resto.Front.Api.Editors.IEditSession.AddPrimaryComponent(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,System.Nullable{System.Decimal})"/> should be called after adding a compound item.</remarks>
            <param name="id">Unique identifier of the new order item modifier. MUST be unique not only for the order item or order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="course">Cooking and serving priority of the order item.</param>
            <param name="product">Assortment position used to fix modifiers. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added.</param>
            <param name="guest">Guest to which position will be added.</param>
            <param name="size">Size of the order item if it's template has scale, otherwise <c>null</c>.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddPrimaryComponent(System.Guid,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,System.Nullable{System.Decimal})">
            <summary>Adds a primary component to the compound item.</summary>
            <param name="id">Unique identifier of the new order item modifier. MUST be unique not only for the order item or order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="predefinedPrice">Predefined fixed price of the component, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added.</param>
            <param name="compoundItem">Compound item to which new component will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddSecondaryComponent(System.Guid,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,System.Nullable{System.Decimal})">
            <summary>Adds a secondary component to the compound item.</summary>
            <param name="id">Unique identifier of the new order item modifier. MUST be unique not only for the order item or order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="predefinedPrice">Predefined fixed price of the component, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added.</param>
            <param name="compoundItem">Compound item to which new component will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderExternalData(System.String,System.String,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Adds external data to the order. Use <see cref="M:Resto.Front.Api.Editors.IEditSession.DeleteOrderExternalData(System.String,Resto.Front.Api.Editors.Stubs.IOrderStub)" /> to delete the data when it's no longer needed.</summary>
            <param name="key">External data key. Max length - 256 chars.</param>
            <param name="value">External data value. Max length - 32000 chars.</param>
            <param name="order">Order to which external data will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeleteOrderExternalData(System.String,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Deletes external data from the order.</summary>
            <param name="key">External data key. Should be the same as it was used with <see cref="M:Resto.Front.Api.Editors.IEditSession.AddOrderExternalData(System.String,System.String,Resto.Front.Api.Editors.Stubs.IOrderStub)" /></param>
            <param name="order">Order to delete external data from.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderCookingItemAmount(System.Decimal,Resto.Front.Api.Editors.Stubs.IOrderCookingItemStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Changes the amount of the assortment position in existing order. User must have rights to edit orders.</summary>
            <param name="amount">For positions with weight: new weight in defined measure unit. For positions without weight: new amount of the position. Can be from 0.001 to 999.999</param>
            <param name="cookingItem">Order item that represents the assortment position and which amount will be changed.</param>
            <param name="order">Order which contains the product.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.SplitOrderCookingItem(System.Decimal,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCookingItemStub)">
            <summary>Cut off specified amount from product to new one.</summary>
            <param name="amount">Amount to cut off. Source cooking item's amount will be reduced by this amount, resultant item will get this amount.</param>
            <param name="order">Order which contains the product.</param>
            <param name="cookingItem">Product to split.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderCookingItemCourse(Resto.Front.Api.Data.Orders.OrderItemCourse,Resto.Front.Api.Data.Orders.IOrderCookingItem,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Changes the course of the order item.</summary>
            <param name="course">New course for order item.</param>
            <param name="cookingItem">Order item which course will be changed.</param>
            <param name="order">Order which contains the product.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderCookingItemSize(Resto.Front.Api.Data.Assortment.IProductSize,Resto.Front.Api.Data.Orders.IOrderCookingItem,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Changes the product size of the order item.</summary>
            <param name="size">Size of the order item.</param>
            <param name="cookingItem">Order item which course will be changed.</param>
            <param name="order">Order which contains the product.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.MoveOrderItemToAnotherGuest(Resto.Front.Api.Editors.Stubs.IOrderRootItemStub,Resto.Front.Api.Editors.Stubs.IOrderGuestItemStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Moves product item between guests of the same order.</summary>
            <param name="product">Product item to be moved.</param>
            <param name="destinationGuest">Guest the product item will be assigned to.</param>
            <param name="order">Order which contains the product.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderModifierItemAmount(System.Int32,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderProductItemStub,Resto.Front.Api.Editors.Stubs.IOrderModifierItemStub)">
            <summary>Changes the amount of the product item modifier. User must have rights to edit orders.</summary>
            <param name="amount">New amount of the modifier. Can be from 1 to 999.</param>
            <param name="order">Order that contains element with changing modifier.</param>
            <param name="orderItem">Order item with changing modifier.</param>
            <param name="modifier">Modifier which amount will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderModifierItemAmount(System.Int32,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,Resto.Front.Api.Editors.Stubs.IOrderModifierItemStub)">
            <summary>Changes the amount of the compound item common modifier. User must have rights to edit orders.</summary>
            <param name="amount">New amount of the modifier. Can be from 1 to 999.</param>
            <param name="order">Order that contains element with changing modifier.</param>
            <param name="orderItem">Order item with changing modifier.</param>
            <param name="modifier">Modifier which amount will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderModifierItemAmount(System.Int32,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemComponentStub,Resto.Front.Api.Editors.Stubs.IOrderModifierItemStub)">
            <summary>Changes the amount of the compound component modifier. User must have rights to edit orders.</summary>
            <param name="amount">New amount of the modifier. Can be from 1 to 999.</param>
            <param name="order">Order that contains element with changing modifier.</param>
            <param name="compoundComponent">Order item with changing modifier.</param>
            <param name="modifier">Modifier which amount will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ServeOrderCookingItem(Resto.Front.Api.Editors.Stubs.IOrderCookingItemStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Mark order item product as served.</summary>
            <param name="cookingItem">Order item product to mark as served. This item should be printed, but not served yet.</param>
            <param name="order">Order which product will be served.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.UnserveOrderCookingItem(Resto.Front.Api.Editors.Stubs.IOrderCookingItemStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Mark order item product as unserved.</summary>
            <param name="cookingItem">Order item product to mark as unserved. This item should be served.</param>
            <param name="order">Order which product will be unserved.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.GroupOrderCookingItems(System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Editors.Stubs.IOrderCookingItemStub},Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Combines the order item products into mix group so that they will be cooked together. Only consecutive products of the same guest can be combined into mix group.</summary>
            <param name="cookingItems">Order item products to be cooked together.</param>
            <param name="order">Order which products will be combined into mix group.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.UngroupOrderCookingItems(System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Editors.Stubs.IOrderCookingItemStub},Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Separates the order item products from mix group so that they will be cooked independently.</summary>
            <param name="cookingItems">Order item products to be separated from mix group.</param>
            <param name="order">Order which products will be separated from mix group.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeleteOrderGuest(Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Data.Orders.IOrderGuestItem)">
            <summary>Deletes guest without any products from order.</summary>
            <param name="order">Order to delete guest from.</param>
            <param name="guest">Guest to be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.RenameOrderGuest(System.Guid,System.String,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Renames order's guest.</summary>
            <param name="id">Unique identifier of the guest to be renamed.</param>
            <param name="newName">New name of the guest.</param>
            <param name="order">Order to rename guest in.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeleteOrderItem(Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Data.Orders.IOrderRootItem)">
            <summary>Deletes order item from order that represents the assortment position. User must have rights to edit orders.</summary>
            <param name="order">Order that contains the item to be deleted.</param>
            <param name="orderItem">Order item to be deleted. Item must not be printed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeleteOrderModifierItem(Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderProductItemStub,Resto.Front.Api.Data.Orders.IOrderModifierItem)">
            <summary>Deletes order item modifier from order item that represents the assortment position. User must have rights to edit orders.</summary>
            <param name="order">Order that contains the item to be removed. Item must not be printed.</param>
            <param name="orderItem">Order item that contains the modifier to be removed.</param>
            <param name="modifier">Modifier to be removed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeleteOrderModifierItem(Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,Resto.Front.Api.Data.Orders.IOrderModifierItem)">
            <summary>Deletes order item modifier from order item that represents the assortment position. User must have rights to edit orders.</summary>
            <param name="order">Order that contains the item to be removed. Item must not be printed.</param>
            <param name="orderItem">Order item that contains the modifier to be removed.</param>
            <param name="modifier">Modifier to be removed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeleteOrderModifierItem(Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemComponentStub,Resto.Front.Api.Data.Orders.IOrderModifierItem)">
            <summary>Deletes order item modifier from order item that represents the assortment position. User must have rights to edit orders.</summary>
            <param name="order">Order that contains the item to be removed. Item must not be printed.</param>
            <param name="orderItem">Order item that contains the modifier to be removed.</param>
            <param name="modifier">Modifier to be removed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeletePrintedOrderItem(System.String,Resto.Front.Api.Data.Orders.WriteoffOptions,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderRootItemStub)">
            <summary>Deletes order item that is already printed. User must have rights to edit orders.</summary>
            <param name="comment">Comment to the charge-off. Max length - 255 chars.</param>
            <param name="writeoffOptions">Object that describes how item should be removed and charged-off.</param>
            <param name="order">Order that contains the item to be removed.</param>
            <param name="orderItem">Order item to be removed. Item must be printed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeletePrintedOrderModifierItem(System.String,Resto.Front.Api.Data.Orders.WriteoffOptions,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderProductItemStub,Resto.Front.Api.Editors.Stubs.IOrderModifierItemStub)">
            <summary>Deletes order item modifier that is already printed. User must have rights to edit orders.</summary>
            <param name="comment">Comment to the charge-off. Max length - 255 chars.</param>
            <param name="writeoffOptions">Object that describes how item should be removed and charged-off.</param>
            <param name="order">Order that contains the item to be removed. Item must not be printed.</param>
            <param name="orderItemProduct">Order item that contains the modifier to be removed.Item must be prin /ted.</param>
            <param name="orderModifierItem">Order item modifier to be removed. Modifier must be printed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderItemComment(System.String,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCookingItemStub)">
            <summary>Changes product order item's comment.</summary>
            <param name="comment">New comment for product order item.</param>
            <param name="order">Order that contains product order item which comment will be changed.</param>
            <param name="cookingItem">Product order item which comment will be changed. Product order item should not been printed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeleteOrderItemComment(Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCookingItemStub)">
            <summary>Deletes product order item's comment.</summary>
            <param name="order">Order that contains product order item which comment will be changed.</param>
            <param name="cookingItem">Product order item which comment will be changed. Product order item should not been printed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderItemWaiter(Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderRootItemStub,Resto.Front.Api.Data.Security.IUser)">
            <summary>Changes product order item's waiter.</summary>
            <param name="order">Order that contains product order item which waiter will be changed.</param>
            <param name="orderItem">Product order item which waiterId will be changed. Product order item should not been printed.</param>
            <param name="waiter">Waiter.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderWaiter(Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Data.Security.IUser)">
            <summary>Changes order's waiter.</summary>
            <param name="order">Order which waiter will be changed.</param>
            <param name="waiter">New waiter.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddDiscount(Resto.Front.Api.Data.Orders.IDiscountType,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Adds simple discount of known type to existing order. User must have rights to work with discounts.</summary>
            <param name="discount">Type of the discount</param>
            <param name="order">Order where discount will be applied.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddFlexibleSumDiscount(System.Decimal,Resto.Front.Api.Data.Orders.IDiscountType,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Adds simple discount of known type to existing order. User must have rights to work with discounts.</summary>
            <param name="sum">Discount sum.</param>
            <param name="discount">Type of the discount</param>
            <param name="order">Order where discount will be applied.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddDiscountByCardNumber(System.String,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Data.Orders.IDiscountCard)">
            <summary>Add discount by card number.</summary>
            <param name="cardNumber">Number of iiko discount card.</param>
            <param name="order">Order where discount will be applied.</param>
            <param name="discountCard">Iiko discount card data.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddFlexibleSumDiscountByCardNumber(System.String,System.Decimal,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Data.Orders.IDiscountCard)">
            <summary>Add discount by card number.</summary>
            <param name="cardNumber">Number of iiko discount card.</param>
            <param name="sum">Discount sum.</param>
            <param name="order">Order where discount will be applied.</param>
            <param name="discountCard">Iiko discount card data.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeSelectiveDiscount(Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Data.Orders.IDiscountType,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Editors.Stubs.IOrderProductItemStub},System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Editors.Stubs.IOrderModifierItemStub},System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Editors.Stubs.IOrderCompoundItemComponentStub})">
            <summary>Change discount item selective application settings. Set both <paramref name="products" /> and <paramref name="modifiers" /> to <c>null</c> if you want the discount item to be applied to the whole order (including future order items), otherwise provide order item products and modifiers for selective discount item application.</summary>
            <param name="order">Order containing the discount item.</param>
            <param name="discountType">Type of discount item to change.</param>
            <param name="products">Order item products to which the discount item can be applied to.</param>
            <param name="modifiers">Order item modifiers to which the discount item can be applied to.</param>
            <param name="components">Compound item components to which the discount item can be applied to.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeleteDiscount(Resto.Front.Api.Data.Orders.IDiscountItem,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Removes discount of known type from existing order. User must have rights to work with discounts.</summary>
            <param name="discountItem">Discount to be removed.</param>
            <param name="order">Order to delete discount from.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddPaymentItem(System.Decimal,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Add new payment item to order.</summary>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="additionalData">Instance of a payment specific type carrying properties, which will be used to initialize a payment item, or null if payment type doesn't require additional data for payment item initialization.</param>
            <param name="paymentType">Type of payment item that will be added.</param>
            <param name="order">Order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddPaymentItem(System.Guid,System.Decimal,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Add new payment item to order.</summary>
            <param name="id">Unique identifier of the new payment item. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="additionalData">Instance of a payment specific type carrying properties, which will be used to initialize a payment item, or null if payment type doesn't require additional data for payment item initialization.</param>
            <param name="paymentType">Type of payment item that will be added.</param>
            <param name="order">Order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddPreliminaryPaymentItem(System.Decimal,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Add new preliminary payment item to order.</summary>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="additionalData">Instance of a payment specific type carrying properties, which will be used to initialize a payment item, or null if payment type doesn't require additional data for payment item initialization.</param>
            <param name="paymentType">Type of payment item that will be added.</param>
            <param name="order">Delivery order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddPreliminaryPaymentItem(System.Guid,System.Decimal,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Add new preliminary payment item to order.</summary>
            <param name="id">Unique identifier of the new payment item. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="additionalData">Instance of a payment specific type carrying properties, which will be used to initialize a payment item, or null if payment type doesn't require additional data for payment item initialization.</param>
            <param name="paymentType">Type of payment item that will be added.</param>
            <param name="order">Delivery order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddExternalPaymentItem(System.Decimal,System.Boolean,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Add new external payment item to order.</summary>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="isProcessed">Whether payment item was already processed by some external system.</param>
            <param name="additionalData">Instance of a payment specific type carrying properties, which will be used to initialize a payment item, or null if payment type doesn't require additional data for payment item initialization.</param>
            <param name="paymentType">Type of payment item that will be added. It should be allowed to create external payment items of this type.</param>
            <param name="order">Order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddExternalPaymentItem(System.Guid,System.Decimal,System.Boolean,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Add new external payment item to order.</summary>
            <param name="id">Unique identifier of the new payment item. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="isProcessed">Whether payment item was already processed by some external system.</param>
            <param name="additionalData">Instance of a payment specific type carrying properties, which will be used to initialize a payment item, or null if payment type doesn't require additional data for payment item initialization.</param>
            <param name="paymentType">Type of payment item that will be added. It should be allowed to create external payment items of this type.</param>
            <param name="order">Order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangePaymentItemSum(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},Resto.Front.Api.Editors.Stubs.IPaymentItemStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Changes sum of existing payment item.</summary>
            <param name="paymentSum">New sum of payment item.</param>
            <param name="minPaymentSum">Minimum allowed payment sum, lower bound for the payment. <c>null</c> means default limit value.</param>
            <param name="maxPaymentSum">Maximum allowed payment sum, upper bound for the payment. <c>null</c> means default limit value.</param>
            <param name="paymentItem">Payment item to be edited.</param>
            <param name="order">Order of which payment item will be edited.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangePreliminaryPaymentItemSum(System.Decimal,Resto.Front.Api.Editors.Stubs.IPaymentItemStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Changes sum of existing preliminary payment item.</summary>
            <param name="paymentSum">New sum of payment item.</param>
            <param name="paymentItem">Preliminary payment item to be edited.</param>
            <param name="order">Order of which payment item will be edited.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangePaymentItemCustomData(System.String,Resto.Front.Api.Editors.Stubs.IPaymentItemStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Changes custom data of existing payment item.</summary>
            <param name="customData">New custom data for payment item. Max serialized data length is <see cref="F:Resto.Front.Api.Extensions.PaymentDataContextExtensions.MaxExternalPaymentItemDataLength"/>.</param>
            <param name="paymentItem">Payment item to be edited. Currently should be payment item of plugin payment type.</param>
            <param name="order">Order of which payment item will be edited.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangePreliminaryPaymentItemCustomData(System.String,Resto.Front.Api.Editors.Stubs.IPaymentItemStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Changes custom data of existing preliminary payment item.</summary>
            <param name="customData">New custom data for payment item. Max serialized data length is <see cref="F:Resto.Front.Api.Extensions.PaymentDataContextExtensions.MaxExternalPaymentItemDataLength"/>.</param>
            <param name="paymentItem">Preliminary payment item to be edited. Currently should be payment item of plugin payment type.</param>
            <param name="order">Order of which payment item will be edited.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeExternalPaymentItemCustomData(System.String,Resto.Front.Api.Editors.Stubs.IPaymentItemStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Changes custom data of existing external payment item.</summary>
            <param name="customData">New custom data for payment item. Max serialized data length is <see cref="F:Resto.Front.Api.Extensions.PaymentDataContextExtensions.MaxExternalPaymentItemDataLength"/>.</param>
            <param name="paymentItem">External payment item to be edited. Currently should be payment item of plugin payment type.</param>
            <param name="order">Order of which payment item will be edited.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeletePaymentItem(Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Delete existing payment item from order.</summary>
            <param name="paymentItem">Payment item to be deleted.</param>
            <param name="order">Order from which payment item will be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeletePreliminaryPaymentItem(Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Delete existing preliminary payment item from order.</summary>
            <param name="paymentItem">Payment item to be deleted.</param>
            <param name="order">Delivery order from which payment item will be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeleteExternalPaymentItem(Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Delete existing external payment item from order.</summary>
            <param name="paymentItem">External payment item to be deleted.</param>
            <param name="order">Order from which payment item will be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.CreateStreet(System.Guid,System.String,Resto.Front.Api.Data.Brd.ICity)">
            <summary>Creates new street.</summary>
            <param name="id">Id of creating street</param>
            <param name="name">Name of creating street</param>
            <param name="city">City of creating street</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.CreateStreet(System.String)">
            <summary>Creates new street.</summary>
            <param name="name">Name of creating street</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeStreetName(System.String,Resto.Front.Api.Editors.Stubs.IStreetStub)">
            <summary>Changes street's name.</summary>
            <param name="name">Name of street</param>
            <param name="street">Changing street</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeleteOrRestoreStreet(System.Boolean,Resto.Front.Api.Editors.Stubs.IStreetStub)">
            <summary>Deletes street.</summary>
            <param name="delete">Delete or restore street flag. true - to delete, false - to restore.</param>
            <param name="street">Changing street</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.CreateClient(System.Guid,System.String,System.Collections.Generic.List{Resto.Front.Api.Data.Brd.PhoneDto},System.String,System.Nullable{System.DateTime})">
            <summary>Creates new client. The client must have a card number or at least one phone number.</summary>
            <param name="id">Id of creating client</param>
            <param name="name">Name of client</param>
            <param name="phones">List of client phones. Cannot contain null values and more than one main phone (i.e. with property IsMain = true)</param>
            <param name="cardNumber">Discount card number or <c>null</c> if the client doesn't have discount card. If the discount card doesn't exist, consider creating one using <see cref="!:IOperationService.CreateOrUpdateDiscountCard" />.</param>
            <param name="dateCreated">Date when client was created. Must be not null, for actual reports by date created of clients.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientLinkedCounteragent(Resto.Front.Api.Editors.Stubs.IClientStub,Resto.Front.Api.Data.Security.IUser)">
            <summary>Changes client linked counter agent.</summary>
            <param name="client">Changing client.</param>
            <param name="linkedCounteragent">New linked counteragent.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientName(System.String,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client name.</summary>
            <param name="name">new name of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientSurname(System.String,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client surname.</summary>
            <param name="surname">new surname of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientNick(System.String,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client nickname.</summary>
            <param name="nick">new nick of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientCardNumber(System.String,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client card number.</summary>
            <param name="cardNumber">New card number of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientComment(System.String,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client comment.</summary>
            <param name="comment">new name of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientPhones(System.Collections.Generic.List{Resto.Front.Api.Data.Brd.PhoneDto},Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client phones list.</summary>
            <param name="phones">new phones list of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientEmails(System.Collections.Generic.List{Resto.Front.Api.Data.Brd.EmailDto},Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client emails list.</summary>
            <param name="emails">new emails list of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientAddresses(System.Collections.Generic.List{Resto.Front.Api.Data.Brd.AddressDto},System.Nullable{System.Int32},Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client addresses.</summary>
            <param name="addresses">new addresses list of client</param>
            <param name="mainAddressIndex">index of client main address</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientMainAddressIndex(System.Int32,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client main address index.</summary>
            <param name="mainAddressIndex">index of client main address</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientBlacklistInfo(System.Boolean,System.String,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client blacklist info.</summary>
            <param name="isInBlacklist">Is changing client in blacklist.</param>
            <param name="reason">The reason of adding client to blacklist.</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientIikoNetId(System.Guid,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client's account in Plazius.</summary>
            <param name="iikoNetId">New account in Plazius</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientIikoBizId(System.Guid,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client's account in iiko.biz.</summary>
            <param name="iikoBizId">New account in iiko.biz</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientMarketingSource(Resto.Front.Api.Data.Brd.IMarketingSource,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client marketing source.</summary>
            <param name="marketingSource">New marketing source of the client.</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientBirthDate(System.Nullable{System.DateTime},Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client's birth date.</summary>
            <param name="birthDate">New birth date</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientLastOrderDate(System.DateTime,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes client's last order date.</summary>
            <param name="lastOrderDate">New last order date</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientReceivesNotifications(System.Boolean,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes whether client receives notification messages.</summary>
            <param name="receivesNotifications">Whether client receives notification messages</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientGender(Resto.Front.Api.Data.Brd.Gender,Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Change client's gender.</summary>
            <param name="gender">New gender.</param>
            <param name="client">Changing client.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeClientPersonalDataConsent(System.Nullable{System.Boolean},Resto.Front.Api.Editors.Stubs.IClientStub)">
            <summary>Changes whether client consented processing their personal data.</summary>
            <param name="consent">Client's consent status to the processing of the personal data</param>
            <param name="client">Changing client.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryProblemStatus(System.Boolean,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change the order problem status.</summary>
            <param name="hasProblem">Problem flag</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryProblemComment(System.String,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change the order problem comment.</summary>
            <param name="comment">Problem comment. MaxLength = 1000 symbols. If HasProblem = false it does not mean that ProblemComment = null, because comment isn't erased automatically after set HasProblem to false.</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryPhone(System.String,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Changes the order phone.</summary>
            <param name="phone">New phone value of the order</param>
            <param name="order">Order to change phone</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryEmail(System.String,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change the order e-mail.</summary>
            <param name="email">E-mail</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryCustomApiData(System.String,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change the delivery custom data from api.</summary>
            <param name="customApiData">Custom data from api</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryComment(System.String,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change the order comment.</summary>
            <param name="comment">Comment</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryExpectedDeliverTime(System.DateTime,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change time when client wants the order to be delivered.</summary>
            <param name="expectedDeliverTime">Expected deliver time</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryOrderPredictedCookingCompleteTime(System.Nullable{System.DateTime},Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change predicted time when the order cooking should be completed. Can change property only for Unconfirmed, New or Waiting delivery.</summary>
            <param name="predictedCookingCompleteTime">Predicted time</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryPredictedDeliveryTime(System.Nullable{System.DateTime},Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change predicted time when the order should be delivered. Can change property only for Unconfirmed, New or Waiting delivery.</summary>
            <param name="predictedDeliveryTime">Predicted time</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryAddress(Resto.Front.Api.Data.Brd.AddressDto,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Changes address of delivery</summary>
            <param name="address">New address of delivery</param>
            <param name="order">Order to change address</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryCourier(System.Boolean,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub,Resto.Front.Api.Data.Security.IUser)">
            <summary>Assign/Change the order courier. Can use this action only before the order is to be delivered.</summary>
            <param name="isCourierSelectedManually">Is courier selected manually and can't be replaced with automatic logistic system</param>
            <param name="order">Order to assign courier.</param>
            <param name="courier">Courier to assign to delivery.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.SetDeliveryConfirmed(Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change delivery status to confirmed.</summary>
            <param name="order">Order to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryConfirmTime(System.Nullable{System.DateTime},Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change when the order was confirmed.</summary>
            <param name="confirmTime">Confirmation time</param>
            <param name="order">Order to change time.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.SetDeliveryUnconfirmed(Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change delivery status to unconfirmed.</summary>
            <param name="order">Order to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.SetDeliveryUndelivered(Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change delivery status to OnWay from status delivered.</summary>
            <param name="order">Order to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.SetDeliveryDelivered(Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change delivery status to delivered.</summary>
            <param name="order">Order to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryActualDeliverTime(System.Nullable{System.DateTime},Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change time when the order was actually delivered.</summary>
            <param name="actualDeliverTime">Actual deliver time</param>
            <param name="order">Order to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryDuration(System.TimeSpan,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Change duration of delivery processing.</summary>
            <param name="duration">Calculated delivery duration (accurate within minutes).</param>
            <param name="order">Change precalculated delivery duration.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryOperator(Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub,Resto.Front.Api.Data.Security.IUser)">
            <summary>Assign/change the order operator.</summary>
            <param name="order">Order to assign operator.</param>
            <param name="deliveryOperator">Operator to assign the order to.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliverySplitBetweenPersons(System.Boolean,Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Changes the order property if it should be splitted between persons.</summary>
            <param name="splitBetweenPersons">Whether the order should be splitted between persons</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.SetDeliveryCustomerAuthorizedInIikoNet(Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Changes whether the client is already authorized in Plazius. WARNING: use with caution! Illegal value can lead to unsuccessful Plazius operations. Do NOT set this property to 'true' if you are not sure that all authorization properties are correct and customer is registered in Plazius; that will cause Plazius payment failure.</summary>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.SetDeliveryCustomerAuthorizedInIikoBiz(Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Changes whether the client is already authorized in iiko.biz. WARNING: use with caution! Illegal value can lead to unsuccessful iiko.biz operations. Do NOT set this property to 'true' if you are not sure that all authorization properties are correct and customer is registered in iiko.biz; that will cause iiko.biz payment failure.</summary>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryMarketingSource(Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub,Resto.Front.Api.Data.Brd.IMarketingSource)">
            <summary>Assign/change order marketing source.</summary>
            <param name="order">Order to assign marketing source.</param>
            <param name="marketingSource">Source of the order.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeDeliveryLocation(System.Nullable{System.Double},System.Nullable{System.Double},Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Changes delivery address location.</summary>
            <param name="latitude">Latitude of geolocation of delivery address.</param>
            <param name="longitude">Longitude of geolocation of delivery address.</param>
            <param name="order">Order to change marketing source.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.CreateReserve(System.DateTime,Resto.Front.Api.Editors.Stubs.IClientStub,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Organization.Sections.ITable})">
            <summary>Creates reservation for planned visit in future. Table will be marked as reserved to prevent collision with other guests at the same time.</summary>
            <param name="estimatedStartTime">Approximate date and time of planned visit, used to divide different visits and remind staff to prepare table.</param>
            <param name="client">Client who asked to reserve table for him.</param>
            <param name="tables">Specifies tables to be reserved at some moment in future.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.CreateBanquet(System.DateTime,Resto.Front.Api.Editors.Stubs.IClientStub,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Organization.Sections.ITable})">
            <summary>Creates reservation for planned event in future. Table will be marked as reserved to prevent collision with other events at the same time.</summary>
            <param name="estimatedStartTime">Approximate date and time of planned event, used to divide different events and remind staff to prepare table and ingredients.</param>
            <param name="client">Client who asked to reserve table for his event.</param>
            <param name="tables">Specifies tables to be reserved at some moment in future.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.CreateBanquet(System.DateTime,Resto.Front.Api.Editors.Stubs.IClientStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Creates reservation for planned event in future. Order's table will be marked as reserved to prevent collision with other events at the same time.</summary>
            <param name="estimatedStartTime">Approximate date and time of planned event, used to divide different events and remind staff to prepare table and ingredients.</param>
            <param name="client">Client who asked to reserve table for his event.</param>
            <param name="order">Order used to form menu for coming event, specify serve sequence (via courses), prepay.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeReserveComment(System.String,Resto.Front.Api.Editors.Stubs.IReserveStub)">
            <summary>Changes reserve comment. Use empty string to clear comment.</summary>
            <param name="comment">Arbitrary string comment for the reserve, maximum length is 250 chars.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeReserveDuration(System.TimeSpan,Resto.Front.Api.Editors.Stubs.IReserveStub)">
            <summary>Changes estimated reserve duration (amount of time betwen visit's start and end). Default reserve duration is 2 hours, banquet duration is 3 hours.</summary>
            <param name="duration">Reserve duration, minimum value is 15 minutes, maximum value is 23 hours and 59 minutes, maximum precision is 1 minute (so 1h 25m 42s is invalid as too precise value).</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeReserveEstimatedStartTime(System.DateTime,Resto.Front.Api.Editors.Stubs.IReserveStub)">
            <summary>Changes estimated reserve start time.</summary>
            <param name="estimatedStartTime">Approximate date and time of planned visit, used to divide different visits and remind staff to prepare table.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeReserveGuestsCount(System.Int32,Resto.Front.Api.Editors.Stubs.IReserveStub)">
            <summary>Changes estimated guests count for reserve. Default value is 2.</summary>
            <param name="guestsCount">Estimated guests count, minimum value is 1, maximum value is 1000.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeReserveTables(System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Organization.Sections.ITable},Resto.Front.Api.Editors.Stubs.IReserveStub)">
            <summary>Changes reserving tables.</summary>
            <param name="tables">Specifies tables to be reserved at some moment in future.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeReserveReminder(System.Boolean,Resto.Front.Api.Editors.Stubs.IReserveStub)">
            <summary>Changes reserve reminder flag.</summary>
            <param name="shouldRemind">Whether to remind staff to prepare table beforehand.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.BindReserveToOrder(Resto.Front.Api.Editors.Stubs.IReserveStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Converts exising reserve or banquet without order to banquet with order.</summary>
            <param name="reserve">Reserve to bind.</param>
            <param name="order">Order used to bind reserve to.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ActivateReserve(Resto.Front.Api.Editors.Stubs.IReserveStub)">
            <summary>Closes reserve and creates order on reserved table.</summary>
            <param name="reserve">Reserve to activate.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ReopenReserve(Resto.Front.Api.Editors.Stubs.IReserveStub)">
            <summary>Reopens previously closed or canceled reserve.</summary>
            <param name="reserve">Reserve to reopen.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.RecoverCorruptedReserve(Resto.Front.Api.Editors.Stubs.IReserveStub)">
            <summary>Recovers banquet which is bound to non-existent order. Normally such cases should never occur, but due to entities storage implementation details sometimes banquet may loose its order. Note that new empty order will be created from scratch.</summary>
            <param name="reserve">Banquet to recover.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.StartBanquet(Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Security.IUser)">
            <summary>Transits banquet to the started status.</summary>
            <param name="reserve">Banquet to start. Banquet must have an order binding, otherwise call <see cref="M:Resto.Front.Api.Editors.IEditSession.BindReserveToOrder(Resto.Front.Api.Editors.Stubs.IReserveStub,Resto.Front.Api.Editors.Stubs.IOrderStub)" /> first.</param>
            <param name="waiter">Waiter who will serve the banquet.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderOriginName(System.String,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Sets order origin — name of the source this order was received from. Specifying origin allows to analyse efficiency of external order sources such as different web-sites, mobile applications and so on. Origin name can be set only once.</summary>
            <param name="originName">Non-empty string of the new origin name. Maximum length is 20 chars.</param>
            <param name="order">Order to specify origin.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.MoveOrderItemToAnotherOrder(Resto.Front.Api.Editors.Stubs.IOrderRootItemStub,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderGuestItemStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Moves product item between orders.</summary>
            <param name="orderItem">Product item to be moved.</param>
            <param name="sourceOrder">Order which currently contains the product.</param>
            <param name="destinationGuest">Guest the product item will be assigned to.</param>
            <param name="destinationOrder">Order to move to.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ResetIsPrintedDeliveryBillActual(Resto.Front.Api.Editors.Stubs.IDeliveryOrderStub)">
            <summary>Resets whether latest printed bill is actual to 'false' value. Use when you want delivery bill to be print again according to settings. For example, if you changed courier and wish to have actual name on the bill, call this action and delivery will automatically printed according to settings. On the contrary, if you don't want bill to be printed again (for example, courier is written to the bill later by hands), you have no need to call this action.</summary>
            <param name="order">Order to reset whether its bill is considered to be actual.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.AddOrderCombo(System.Guid,System.String,System.Int32,System.Decimal,System.Guid,System.Guid,System.Collections.Generic.IReadOnlyDictionary{System.Guid,Resto.Front.Api.Editors.Stubs.IOrderCookingItemStub},Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderGuestItemStub)">
            <summary>Create order combo item. Order must contain new combo items.</summary>
            <param name="id">Unique identifier of the new combo.</param>
            <param name="name">Name of combo.</param>
            <param name="amount">Amount of combo.</param>
            <param name="price">Price of combo.</param>
            <param name="sourceActionId">Unique identifier of source combo (template identifier).</param>
            <param name="programId">Identifier of the loyalty program.</param>
            <param name="comboItems">Combo items dictionary. Key - combo group identifier, Value - item id (must be contained in order).</param>
            <param name="order">Order to which combo will be added.</param>
            <param name="guest">Guest to which combo will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.UpdateOrderComboItems(System.Guid,System.Collections.Generic.IReadOnlyDictionary{System.Guid,Resto.Front.Api.Editors.Stubs.IOrderCookingItemStub},Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Update existing order combo items. Order must contain new combo items.</summary>
            <param name="id">Unique identifier of the existing combo.</param>
            <param name="comboItems">Combo items dictionary. Key - combo group identifier, Value - item id (must be contained in order).</param>
            <param name="order">Order to which combo will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.DeleteOrderCombo(Resto.Front.Api.Editors.Stubs.IOrderComboStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Delete order combo item.</summary>
            <param name="combo">Combo which will be deleted.</param>
            <param name="order">Order from which combo will be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeComboAmount(System.Int32,Resto.Front.Api.Editors.Stubs.IOrderComboStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Change combo amount.</summary>
            <param name="amount">New combo amount.</param>
            <param name="combo">Combo which amount will be changed.</param>
            <param name="order">Order which combo amount will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeComboPrice(System.Decimal,Resto.Front.Api.Editors.Stubs.IOrderComboStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Change combo price.</summary>
            <param name="price">New combo price.</param>
            <param name="combo">Combo which price will be changed.</param>
            <param name="order">Order which combo price will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderAppliedIikoCard5ManualConditions(System.Collections.Generic.List{System.Guid},Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Change iikoCard5 manual conditions applied for order.</summary>
            <param name="appliedManualConditions">List of iikoCard5 manual condition identifiers applied to order.</param>
            <param name="order">Order to apply iikoCard5 manual conditions.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeCookingPriority(System.Int32,System.Boolean,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Changes custom cooking priority and top priority flag.</summary>
            <param name="customPriority">Specifies a custom cooking priority.</param>
            <param name="isTopPriority">Sets a top priority flag.</param>
            <param name="order">Order to apply custom priority</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.SetOpenPrice(System.Decimal,Resto.Front.Api.Editors.Stubs.IOrderProductItemStub,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Changes order item open price.</summary>
            <param name="openPrice">New open price value.</param>
            <param name="productOrderItem">Order item.</param>
            <param name="sourceOrder">Order which currently contains the product.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangePriceCategory(Resto.Front.Api.Data.Orders.IPriceCategory,Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Changes price category of the order.</summary>
            <param name="priceCategory">New price category.</param>
            <param name="order">Order to change price category.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ResetPriceCategory(Resto.Front.Api.Editors.Stubs.IOrderStub)">
            <summary>Resets price category of the order.</summary>
            <param name="order">Order to reset price category.</param>
        </member>
        <member name="M:Resto.Front.Api.Editors.IEditSession.ChangeOrderTables(Resto.Front.Api.Editors.Stubs.IOrderStub,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Organization.Sections.ITable})">
            <summary>Changes tables of the order.</summary>
            <remarks>If specified tables belongs to another restaurant section then section property, price category and products cooking palces will also be changed.</remarks>
            <param name="order">Order to change tables.</param>
            <param name="tables">Tables to be assigned to the order.</param>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.DeviceNotStartedException">
            <summary>
            The exception that should be thrown when a specified device isn't started.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.DeviceNotStartedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.DeviceNotStartedException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.DeviceNotStartedException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.DeviceNotStartedException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.DeviceNotStartedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.DeviceNotStartedException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.DeviceException">
            <summary>
            The exception that is thrown when a specified  device could not execute the command.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.DeviceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.DeviceException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.DeviceException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.DeviceException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.DeviceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.DeviceException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.DeviceException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.DeviceException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="deviceErrorCode">Internal device error number</param>
            <param name="message">Device error message text</param>
            <param name="innerException">Exception instance that caused the current exception</param>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.DeviceException.#ctor(System.Int32,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.DeviceException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="deviceErrorCode">Internal device error number</param>
            <param name="messageFormat">Device error message text format</param>
            <param name="args">Message args</param>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.DeviceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.Exceptions.DeviceException.InternalErrorCode">
            <summary>
            Internal error number, thrown by external device or adapter.
            </summary>
            <value>Internal device error number.</value>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.DeviceRegistrationException">
            <summary>
            The exception that is thrown when a specified external device was not registered.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.DeviceRegistrationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.DeviceRegistrationException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.DeviceRegistrationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.DeviceRegistrationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.DeviceRegistrationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.DeviceRegistrationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.CafeSessionException">
            <summary>
            The exception that is thrown when cafe session opening or closing fails.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CafeSessionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.CafeSessionException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CafeSessionException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.CafeSessionException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CafeSessionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.CafeSessionException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CafeSessionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.CafeSessionException"/> class with serialized data.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.ExternalOperationFailedException">
            <summary>
            The exception that is thrown when external operation execution fails.
            Most likely reason for this exception is network problem.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.ExternalOperationFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.FrontApiException"/> class.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.OrderWithoutTypeException">
            <summary>
            The exception that is thrown when the operation results in an order which has no mandatory order type.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.OrderWithoutTypeException.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.OrderWithoutTypeException"/> class with a specified order id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.OrderWithoutTypeException.#ctor(System.Guid,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.OrderWithoutTypeException"/> class with a specified order id and error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.OrderWithoutTypeException.#ctor(System.Guid,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.OrderWithoutTypeException"/> class with a specified order id,
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.BillChequeTaskResolverRegistrationException">
            <summary>
            The exception that is thrown when a specified bill chequetask resolver was not registered.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.BillChequeTaskResolverRegistrationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.BillChequeTaskResolverRegistrationException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.BillChequeTaskResolverRegistrationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.BillChequeTaskResolverRegistrationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.BillChequeTaskResolverRegistrationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.BillChequeTaskResolverRegistrationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.PluginSettingsException">
            <summary>
            The exception that is thrown when plugin settings operation fails.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PluginSettingsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PluginSettingsException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PluginSettingsException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PluginSettingsException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PluginSettingsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PluginSettingsException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.UnexpectedInternalException">
            <summary>
            The exception that is sent into <see cref="M:System.IObserver`1.OnError(System.Exception)"/> handler of the notification stream from <see cref="P:Resto.Front.Api.PluginContext.Notifications"/>
            when the underlying event source throws unexpected exception.
            </summary>
            <remarks>
            The original exception generally cannot be rethrown as-is because of inter-process serialization issues.
            See the <c>cash-server.log</c> file for original exception details.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.UnexpectedInternalException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.UnexpectedInternalException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.UnexpectedInternalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.UnexpectedInternalException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.UnexpectedInternalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.UnexpectedInternalException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.PreliminaryOrderEditTemporaryUnavailableException">
            <summary>
            The exception that is thrown when a preliminary order edit temporarily cannot be executed due to networking issues.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PreliminaryOrderEditTemporaryUnavailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PreliminaryOrderEditTemporaryUnavailableException"/> class with specified error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.LicenseRestrictionException">
            <summary>
            The exception that is thrown on calling unlicensed operation.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.LicenseRestrictionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.LicenseRestrictionException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.LicenseRestrictionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.LicenseRestrictionException"/> class with a specified error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.PaymentActionCancelledException">
            <summary>
            Exception to notify that payment action was cancelled.
            </summary>
            <remarks>
            Used for cancellation of operation when the reason of cancellation is obvious.<br/>
            For example, user pressed "Cancel" button during collecting of required data - it's clear that operation will not be resumed.<br/>
            No message box will be shown.<br/>
            If the reason is not obvious, use <see cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException"/> that will show message box for user.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PaymentActionCancelledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PaymentActionCancelledException"/> class.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.PaymentActionFailedException">
            <summary>
            Exception to notify that payment, cancel payment or return payment actions was not successful.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PaymentActionFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PaymentActionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException"/> class with a specified error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.PaymentSystemRegistrationException">
            <summary>
            The exception that is thrown when a specified payment system was not registered.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PaymentSystemRegistrationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PaymentSystemRegistrationException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PaymentSystemRegistrationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PaymentSystemRegistrationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PaymentSystemRegistrationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PaymentSystemRegistrationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.CannotAddInactiveProductException">
            <summary>
            The exception that is thrown on attempt to use product which isn't included in menu.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CannotAddInactiveProductException.#ctor(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.CannotAddInactiveProductException"/> class with a specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CannotAddInactiveProductException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.Exceptions.CannotAddInactiveProductException.Product">
            <summary>
            Gets the product that caused this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.CannotCancelNotNewDeliveryException">
            <summary>
            The exception that is thrown on attempt to cancel delivery, which status is other than <see cref="F:Resto.Front.Api.Data.Brd.DeliveryStatus.New"/> or <see cref="F:Resto.Front.Api.Data.Brd.DeliveryStatus.Unconfirmed"/>.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CannotCancelNotNewDeliveryException.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.CannotCancelNotNewDeliveryException"/> class with a specified delivery id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CannotCancelNotNewDeliveryException.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.CannotCancelNotNewDeliveryException"/> class with a specified delivery id and error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CannotCancelNotNewDeliveryException.#ctor(System.Guid,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.CannotCancelNotNewDeliveryException"/> class with a specified delivery id,
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.CannotUseInactiveEntityException">
            <summary>
            The exception that is thrown when entity cannot be used in specific context because it is inactive.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CannotUseInactiveEntityException.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.CannotUseInactiveEntityException"/> class with specified entity id and error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.CannotCreateEntityException">
            <summary>
            The exception that is thrown when entity creation fails.
            Most likely reason for this exception is network problem.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CannotCreateEntityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.CannotCreateEntityException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CannotCreateEntityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.CannotCreateEntityException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.CannotCreateEntityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.CannotCreateEntityException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.ConstraintViolationException">
            <summary>
            The exception that is thrown when an operation violates business model constraints.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.ConstraintViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.ConstraintViolationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.ConstraintViolationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.ConstraintViolationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.ConstraintViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.ConstraintViolationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.ConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.ConstraintViolationException"/> class with serialized data.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.InsufficientLicenseException">
            <summary>
            The exception that is thrown when license slot cannot be acquired.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.InsufficientLicenseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.InsufficientLicenseException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.InsufficientLicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.InsufficientLicenseException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.InsufficientLicenseException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.InsufficientLicenseException"/> class with a specified error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.ServerConnectionException">
            <summary>
            The exception that is thrown when message wasn't sent due to connection troubles.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.ServerConnectionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.ServerConnectionException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.ServerConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.ServerConnectionException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.ServerConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.ServerConnectionException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.EntityStubUsingException">
            <summary>
            Entity stub usage outruns its creation or entity stub from one edit session is used in another edit session.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityStubUsingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.EntityStubUsingException"/> class with a specified error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.AuthenticationException">
            <summary>
            The exception that is thrown when plugin authentication fails.
            </summary>
            <seealso cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)"/>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.AuthenticationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.AuthenticationException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.AuthenticationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.AuthenticationException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.AuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.AuthenticationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.EntityModifiedException">
            <summary>
            The exception that is thrown when versioned entity was modified by someone between reading an entity and applying changes to it.
            In general case parallel changes cannot be merged automatically, so optimistic locking prevents overwriting someones changes or getting inconsistent entity state.
            </summary>
            <remarks>
            Plugin should re-read changed entity, ensure that rejected changes are compatible with new entity state and re-apply them.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityModifiedException.#ctor(Resto.Front.Api.Data.Common.IVersionedEntity,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.EntityModifiedException"/> class with specified entity stub and actual version.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.EntityUsingException">
            <summary>
            The exception that is thrown when entity cannot be used in specific context.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityUsingException.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.EntityUsingException"/> class with specified entity id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityUsingException.#ctor(System.Guid,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.EntityUsingException"/> class with specified entity id and error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityUsingException.#ctor(System.Guid,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.EntityUsingException"/> class with specified entity id, error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityUsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.EntityUsingException"/> class with serialized data.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityUsingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.Exceptions.EntityUsingException.EntityId">
            <summary>
            Identifier of entity which usage caused this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.FrontApiException">
            <summary>
            Represents a common base error in either the service or client side of Api.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.FrontApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.FrontApiException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.FrontApiException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.FrontApiException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.FrontApiException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.FrontApiException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.FrontApiException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.FrontApiException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.FrontApiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.FrontApiException"/> class with serialized data.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.EntityAlreadyInUseException">
            <summary>
            The exception that is thrown on attempt to change entity that is already being edited by someone.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityAlreadyInUseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.EntityAlreadyInUseException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityAlreadyInUseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.EntityAlreadyInUseException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityAlreadyInUseException.#ctor(System.String,System.String,Resto.Front.Api.Data.Security.IUser)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.EntityAlreadyInUseException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityAlreadyInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.EntityAlreadyInUseException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Exceptions.EntityAlreadyInUseException.LockedTerminalName">
            <summary>
            Terminal that locked entity.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.Exceptions.EntityAlreadyInUseException.LockedUser">
            <summary>
            User, who locked entity.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.EntityNotFoundException">
            <summary>
            The exception that is thrown on attempt to use entity that doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityNotFoundException.#ctor(System.Guid,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.EntityNotFoundException"/> class with specified entity id and type.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.EntityNotFoundException.#ctor(System.Guid,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.EntityNotFoundException"/> class with specified entity id, type and error message.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.PaymentTypeConfigurationException">
            <summary>
            The exception that is thrown when a specified payment type is not well configured.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PaymentTypeConfigurationException.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PaymentTypeConfigurationException"/> class.
            </summary>
            <param name="paymentTypeId">The payment type id.</param>
            <param name="message">The error message (optional).</param>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PaymentTypeConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.Exceptions.PaymentTypeConfigurationException.PaymentTypeId">
            <summary>
            Gets the misconfigured payment type id.
            </summary>
            <value>The payment type id.</value>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.PermissionDeniedException">
            <summary>
            The exception that is thrown on trying to execute operation without having required permissions.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PermissionDeniedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PermissionDeniedException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PermissionDeniedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PermissionDeniedException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.PermissionDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.PermissionDeniedException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Exceptions.UserSessionInvalidException">
            <summary>
            The exception that is thrown on trying to use credentials that doesn't correspond to valid user session.
            Session may become outdated if user is deactivated or his pin is changed since session start.
            </summary>
            <seealso cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)"/>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.UserSessionInvalidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.UserSessionInvalidException"/> class.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.UserSessionInvalidException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.UserSessionInvalidException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Exceptions.UserSessionInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Resto.Front.Api.Exceptions.UserSessionInvalidException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.Extensions.NotificationServiceExtensions">
            <summary>
            Helper class, wraps subscription callbacks for remoting.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Extensions.NotificationServiceExtensions.SubscribeOnBeforeServiceCheque(Resto.Front.Api.INotificationService,System.Action{Resto.Front.Api.Data.Orders.IOrder,System.Collections.Generic.IReadOnlyCollection{Resto.Front.Api.Data.Orders.IOrderCookingItem},Resto.Front.Api.UI.IViewManager})">
            <summary>
            Subscription on order printing operation. You can abort printing operation by <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="notificationService">Notification Service</param>
            <param name="callback">Action with access to <see cref="T:Resto.Front.Api.Data.Orders.IOrder"/>, collections of <see cref="T:Resto.Front.Api.Data.Orders.IOrderCookingItem"/> printing cooking order items and <see cref="T:Resto.Front.Api.UI.IViewManager"/>.</param>
            <returns>
            You may dispose result to remove subscription.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.Extensions.NotificationServiceExtensions.SubscribeOnBeforeOrderBill(Resto.Front.Api.INotificationService,System.Action{Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.UI.IViewManager})">
            <summary>
            Subscription on order billing operation. You can abort printing operation by <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="notificationService">Notification Service</param>
            <param name="callback">Action with access to <see cref="T:Resto.Front.Api.Data.Orders.IOrder"/> and <see cref="T:Resto.Front.Api.UI.IViewManager"/>.</param>
            <returns>
            You may dispose result to remove subscription.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.Extensions.NotificationServiceExtensions.SubscribeOnBeforeDeletePrintedItem(Resto.Front.Api.INotificationService,System.Action{Resto.Front.Api.Data.Orders.IOrder,System.Collections.Generic.IReadOnlyCollection{Resto.Front.Api.Data.Orders.IOrderRootItem},System.Collections.Generic.IReadOnlyCollection{Resto.Front.Api.Data.Orders.IOrderModifierItem},Resto.Front.Api.Data.Orders.IDeletionMethod,Resto.Front.Api.UI.IViewManager})">
            <summary>
            Subscription on printed order item deletion operation. You can abort deleting operation by <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="notificationService">Notification Service</param>
            <param name="callback">Action with access to <see cref="T:Resto.Front.Api.Data.Orders.IOrder"/>, collections of <see cref="T:Resto.Front.Api.Data.Orders.IOrderRootItem"/> and <see cref="T:Resto.Front.Api.Data.Orders.IOrderModifierItem"/> deleting root order items, <see cref="T:Resto.Front.Api.Data.Orders.IDeletionMethod"/> and <see cref="T:Resto.Front.Api.UI.IViewManager"/>.</param>
            <returns>
            You may dispose result to remove subscription.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.Extensions.NotificationServiceExtensions.SubscribeOnBeforeDeleteOrder(Resto.Front.Api.INotificationService,System.Action{Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.UI.IViewManager})">
            <summary>
             Subscription on order deletion operation. You can abort operation by <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="notificationService">Notification Service</param>
            <param name="callback">Action with access to <see cref="T:Resto.Front.Api.Data.Orders.IOrder"/> and <see cref="T:Resto.Front.Api.UI.IViewManager"/>.</param>
            <returns>
            You may dispose result to remove subscription.
            </returns>
        </member>
        <member name="T:Resto.Front.Api.Extensions.EditSessionExtensions">
            <summary>
            A set of helper methods for <see cref="T:Resto.Front.Api.Editors.IEditSession"/>.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Extensions.EditSessionExtensions.CreateOrder(Resto.Front.Api.Editors.IEditSession,Resto.Front.Api.Data.Organization.Sections.ITable)">
            <summary>Creates new order on specified table. User must have rights to create orders.</summary>
            <param name="editSession">Order will be created within the specified session.</param>
            <param name="table">Table on which order will be created. If table is null, then order will be created on the default table (depending on select iikoFront mode).</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.EditSessionExtensions.CreateReserve(Resto.Front.Api.Editors.IEditSession,System.DateTime,Resto.Front.Api.Editors.Stubs.IClientStub,Resto.Front.Api.Data.Organization.Sections.ITable)">
            <summary>Creates reservation for planned visit in future. Table will be marked as reserved to prevent collision with other guests at the same time.</summary>
            <param name="editSession">Order will be created within the specified session.</param>
            <param name="estimatedStartTime">Approximate date and time of planned visit, used to divide different visits and remind staff to prepare table.</param>
            <param name="client">Client who asked to reserve table for him.</param>
            <param name="table">Specifies table to be reserved at some moment in future.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.EditSessionExtensions.CreateBanquet(Resto.Front.Api.Editors.IEditSession,System.DateTime,Resto.Front.Api.Editors.Stubs.IClientStub,Resto.Front.Api.Data.Organization.Sections.ITable)">
            <summary>Creates reservation for planned event in future. Table will be marked as reserved to prevent collision with other events at the same time.</summary>
            <param name="editSession">Order will be created within the specified session.</param>
            <param name="estimatedStartTime">Approximate date and time of planned event, used to divide different events and remind staff to prepare table and ingredients.</param>
            <param name="client">Client who asked to reserve table for his event.</param>
            <param name="table">Specifies table to be reserved at some moment in future.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.EditSessionExtensions.ChangeReserveTable(Resto.Front.Api.Editors.IEditSession,Resto.Front.Api.Data.Organization.Sections.ITable,Resto.Front.Api.Editors.Stubs.IReserveStub)">
            <summary>Changes reserving table.</summary>
            <param name="editSession">Order will be created within the specified session.</param>
            <param name="table">Specifies table to be reserved at some moment in future.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="T:Resto.Front.Api.Extensions.OperationServiceExtensions">
            <summary>
            Provides a set of static methods for executing operations.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CreateReserve(Resto.Front.Api.IOperationService,System.DateTime,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Organization.Sections.ITable,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Creates reservation for planned visit in future. Table will be marked as reserved to prevent collision with other guests at the same time.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="estimatedStartTime">Approximate date and time of planned visit, used to divide different visits and remind staff to prepare table.</param>
            <param name="client">Client who asked to reserve table for him.</param>
            <param name="table">Specifies tables to be reserved at some moment in future.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CreateBanquet(Resto.Front.Api.IOperationService,System.DateTime,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Organization.Sections.ITable,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Creates reservation for planned event in future. Table will be marked as reserved to prevent collision with other events at the same time.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="estimatedStartTime">Approximate date and time of planned event, used to divide different events and remind staff to prepare table and ingredients.</param>
            <param name="client">Client who asked to reserve table for his event.</param>
            <param name="table">Specifies tables to be reserved at some moment in future.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeReserveTable(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Organization.Sections.ITable,Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes reserving tables.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="table">Specifies table to be reserved at some moment in future.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.RegisterExternalOperation``2(Resto.Front.Api.IOperationService,System.String,System.String,System.Func{``0,``1},System.Runtime.Serialization.SerializationBinder,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Exposes a custom operation to be available for call by other plugins. The registration is not permanent, it holds true until disposing the return value, or plugin shutdown.
            </summary>
            <remarks>
            Different plugins running under the same iikoFront application instance can communicate via external operations. iikoFront just transfers requests and responses between plugins without knowing any details. Both producer and consumer plugins should understand the data structure, developers should negotiate a protocol specification, pre-share operation names, handle versioning and so on. Producer plugin registers an operation using <see cref="M:Resto.Front.Api.Extensions.OperationServiceExtensions.RegisterExternalOperation``2(Resto.Front.Api.IOperationService,System.String,System.String,System.Func{``0,``1},System.Runtime.Serialization.SerializationBinder,System.Runtime.Serialization.ISurrogateSelector)" /> and consumer plugin call it using <see cref="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CallExternalOperation``2(Resto.Front.Api.IOperationService,System.String,System.String,``0,System.Runtime.Serialization.SerializationBinder,System.Runtime.Serialization.ISurrogateSelector)" />.
            </remarks>
            <param name="operationService">Operation service.</param>
            <param name="serviceName">
            Identifies the external service, just a namespace for a set of interrelated operations, which helps to group them logically. It's recommended to choose a unique name to avoid collisions with other plugins, i.e. include company's name or plugin's name into the service name. Min length is 1, max length is 50 chars.
            </param>
            <param name="operationName">
            In aggregate with <paramref name="serviceName"/> identifies the operation. Both names have to be pre-shared with consumer plugins, so that they will be able to call the operation referring it by service and operation name. The combination of a service name and operation name must be unique at the same time. Min length is 1, max length is 50 chars.
            </param>
            <param name="callback">
            The operation implementation, which will be called by other plugins via <see cref="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CallExternalOperation``2(Resto.Front.Api.IOperationService,System.String,System.String,``0,System.Runtime.Serialization.SerializationBinder,System.Runtime.Serialization.ISurrogateSelector)" />.
            </param>
            <param name="binder">A serialization binder for custom mapping between types and names. Default is <c>null</c>.</param>
            <param name="surrogateSelector">The <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> to use for serialization. Default is <c>null</c>.</param>
            <seealso cref="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CallExternalOperation``2(Resto.Front.Api.IOperationService,System.String,System.String,``0,System.Runtime.Serialization.SerializationBinder,System.Runtime.Serialization.ISurrogateSelector)" />
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CallExternalOperation``2(Resto.Front.Api.IOperationService,System.String,System.String,``0,System.Runtime.Serialization.SerializationBinder,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Calls an operation which is implemented in another plugin.
            </summary>
            <remarks>
            Different plugins running under the same iikoFront application instance can communicate via external operations. iikoFront just transfers requests and responses between plugins without knowing any details. Both producer and consumer plugins should understand the data structure, developers should negotiate a protocol specification, pre-share operation names, handle versioning and so on. Producer plugin registers an operation using <see cref="M:Resto.Front.Api.Extensions.OperationServiceExtensions.RegisterExternalOperation``2(Resto.Front.Api.IOperationService,System.String,System.String,System.Func{``0,``1},System.Runtime.Serialization.SerializationBinder,System.Runtime.Serialization.ISurrogateSelector)" /> and consumer plugin call it using <see cref="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CallExternalOperation``2(Resto.Front.Api.IOperationService,System.String,System.String,``0,System.Runtime.Serialization.SerializationBinder,System.Runtime.Serialization.ISurrogateSelector)" />.
            </remarks>
            <param name="operationService">Operation service.</param>
            <param name="serviceName">
            Name of the external service which is implemented in another plugin. That name have to be pre-shared with consumer plugins.
            </param>
            <param name="operationName">
            Name of the external operation which is implemented in another plugin and have been registered using <see cref="M:Resto.Front.Api.Extensions.OperationServiceExtensions.RegisterExternalOperation``2(Resto.Front.Api.IOperationService,System.String,System.String,System.Func{``0,``1},System.Runtime.Serialization.SerializationBinder,System.Runtime.Serialization.ISurrogateSelector)" />. That name have to be pre-shared between producer and consumer plugins.
            </param>
            <param name="request">
            The data which will be transferred as an incoming argument into the external operation.
            </param>
            <param name="binder">A serialization binder for custom mapping between types and names. Default is <c>null</c>.</param>
            <param name="surrogateSelector">The <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> to use for serialization. Default is <c>null</c>.</param>
            <returns>
            Response returned by the producer plugin.
            </returns>
            <seealso cref="M:Resto.Front.Api.Extensions.OperationServiceExtensions.RegisterExternalOperation``2(Resto.Front.Api.IOperationService,System.String,System.String,System.Func{``0,``1},System.Runtime.Serialization.SerializationBinder,System.Runtime.Serialization.ISurrogateSelector)" />
            <exception cref="T:Resto.Front.Api.Exceptions.ExternalOperationFailedException">When an external operation throws any kind of exception, callee receives the <see cref="T:Resto.Front.Api.Exceptions.ExternalOperationFailedException" /> with original message. Orignal stacktrace can be found in api.log.</exception>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ExecuteContinuousOperation(Resto.Front.Api.IOperationService,System.Action{Resto.Front.Api.IOperationService})">
            <summary>
            Executes the callback function as one continuous operation by providing temporary instance of <see cref="T:Resto.Front.Api.IOperationService" />,
            which holds internal locks taken on lockable entities (such as order) until the operation ends.
            It's strongly recommended to avoid potentially obstructive calls in the callback, i.e network calls, heavy I/O or CPU-bound calls, thread blocking and so on, because touched entities will remain locked for a long time.
            </summary>
            <remarks>
            It could be useful for calling several methods of the local <see cref="T:Resto.Front.Api.IOperationService" /> instance sequentially
            when it's important to call them one by one without outside changes.
            While all committed changes will immediately become visible for everyone,
            no one except of the provided callback will be allowed to alter entities which were touched via that short-living <see cref="T:Resto.Front.Api.IOperationService" /> (input argument of the callback).                       For example, you can create a new order and add there guests, products and external prepay using one edit session, but you cannot print order items or process external prepay in the same session, because these operations can't be rolled back and thus aren't available via <see cref="T:Resto.Front.Api.Editors.IEditSession" />.                       Executing these operations separately on a global <see cref="P:Resto.Front.Api.PluginContext.Operations" /> isn't reliable because there is a chance to be interrupted by a user, other plugin or background entity change handlers, which may prevent further our edits by applying conflicting changes or by locking an entity for a long time.
            </remarks>
            <param name="operationService">Operation service.</param>
            <param name="continuousOperation">Callback to be executed continuously.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ExecuteContinuousOperation``1(Resto.Front.Api.IOperationService,System.Func{Resto.Front.Api.IOperationService,``0})">
            <summary>
            Executes the callback function as one continuous operation by providing temporary instance of <see cref="T:Resto.Front.Api.IOperationService" />,
            which holds internal locks taken on lockable entities (such as order) until the operation ends.
            It's strongly recommended to avoid potentially obstructive calls in the callback, i.e network calls, heavy I/O or CPU-bound calls, thread blocking and so on, because touched entities will remain locked for a long time.
            </summary>
            <remarks>
            It could be useful for calling several methods of the local <see cref="T:Resto.Front.Api.IOperationService" /> instance sequentially
            when it's important to call them one by one without outside changes.
            While all committed changes will immediately become visible for everyone,
            no one except of the provided callback will be allowed to alter entities which were touched via that short-living <see cref="T:Resto.Front.Api.IOperationService" /> (input argument of the callback).                       For example, you can create a new order and add there guests, products and external prepay using one edit session, but you cannot print order items or process external prepay in the same session, because these operations can't be rolled back and thus aren't available via <see cref="T:Resto.Front.Api.Editors.IEditSession" />.                       Executing these operations separately on a global <see cref="P:Resto.Front.Api.PluginContext.Operations" /> isn't reliable because there is a chance to be interrupted by a user, other plugin or background entity change handlers, which may prevent further our edits by applying conflicting changes or by locking an entity for a long time.
            </remarks>
            <param name="operationService">Operation service.</param>
            <param name="continuousOperation">Callback to be executed continuously.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.RegisterBillChequeTaskResolver(Resto.Front.Api.IOperationService,System.Func{Resto.Front.Api.Data.Orders.IOrder,System.Boolean,Resto.Front.Api.Data.Organization.IPointOfSale})">
            <summary>
            Registers the bill cheque task resolver.
            </summary>
            <param name="operationService">The operation service.</param>
            <param name="callback">Func with access to <see cref="T:Resto.Front.Api.Data.Orders.IOrder"/>, is bill storning bool flag and returning <see cref="T:Resto.Front.Api.Data.Organization.IPointOfSale"/> to redirect bill cheque task to.</param>
            <seealso cref="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.IsBillTaskSupported" />
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.GetProductMenuImage(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns a byte sequence presenting an image to be shown as a background on a menu button for the specified product. If the product doesn't have an image, <c>null</c> will be returned.
            </summary>
            <remarks>
            The image may be of any format, depending on what the user has uploaded.
            </remarks>
            <param name="product">
            Product to get menu image for.
            </param>
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProduct.HasMenuImage" />
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProduct.BackgroundColor" />
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProduct.FontColor" />
            <seealso cref="M:Resto.Front.Api.IOperationService.GetProductMenuImage(Resto.Front.Api.Data.Assortment.IProduct)"/>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.GetProductMenuBitmap(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns a bitmap image to be shown as a background on a menu button for the specified product. If the product doesn't have an image, <c>null</c> will be returned.
            </summary>
            <remarks>
            The image may be of any format, depending on what the user has uploaded.
            </remarks>
            <param name="product">
            Product to get menu image for.
            </param>
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProduct.HasMenuImage" />
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProduct.BackgroundColor" />
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProduct.FontColor" />
            <seealso cref="M:Resto.Front.Api.IOperationService.GetProductMenuImage(Resto.Front.Api.Data.Assortment.IProduct)"/>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.GetProductGroupMenuImage(Resto.Front.Api.Data.Assortment.IProductGroup)">
            <summary>
            Returns a byte sequence presenting an image to be shown as a background on a menu button for the specified product group. If the product group doesn't have an image, <c>null</c> will be returned.
            </summary>
            <remarks>
            The image may be of any format, depending on what the user has uploaded.
            </remarks>
            <param name="productGroup">
            Product group to get menu image for.
            </param>
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProductGroup.HasMenuImage" />
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProductGroup.BackgroundColor" />
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProductGroup.FontColor" />
            <seealso cref="M:Resto.Front.Api.IOperationService.GetProductGroupMenuImage(Resto.Front.Api.Data.Assortment.IProductGroup)"/>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.GetProductGroupMenuBitmap(Resto.Front.Api.Data.Assortment.IProductGroup)">
            <summary>
            Returns a bitmap image to be shown as a background on a menu button for the specified product group. If the product group doesn't have an image, <c>null</c> will be returned.
            </summary>
            <remarks>
            The image may be of any format, depending on what the user has uploaded.
            </remarks>
            <param name="productGroup">
            Product group to get menu image for.
            </param>
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProductGroup.HasMenuImage" />
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProductGroup.BackgroundColor" />
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProductGroup.FontColor" />
            <seealso cref="M:Resto.Front.Api.IOperationService.GetProductGroupMenuImage(Resto.Front.Api.Data.Assortment.IProductGroup)"/>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryLastVerifiedRestrictionsHash(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Set last verified restirictions hash from server.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="lastVerifiedDeliveryRestrictionsHash">last verified restirictions hash from server</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryLastDefaultTerminalDeliveryDurationInMinutes(Resto.Front.Api.IOperationService,System.Nullable{System.Int64},Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Set calculated delivery duration without overrided value on terminal.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="lastDefaultTerminalDeliveryDurationInMinutes">delivery duration without overriden value on terminal</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.SetOrderType(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Organization.IOrderType,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Sets order type for order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="type">Order type to set</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderPricingTime(Resto.Front.Api.IOperationService,System.Nullable{System.DateTime},Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change order pricing time, which determines the price of products. By default time taken from items print time.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="pricingTime">New order pricing time</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderIikoCard5Coupon(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change order iikoCard5 coupon, used in iikoCard5 system.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="iikoCard5Coupon">New iikoCard5 coupon</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderGuest(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Adds new guest to existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="name">Name of the new guest. If name is null, then it will be generated automatically.</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderGuest(Resto.Front.Api.IOperationService,System.Guid,System.String,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Adds new guest with the given ID to existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new guest in the order. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="name">Name of the new guest. If name is null, then it will be generated automatically.</param>
            <param name="order">Existing order</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeEstimatedOrderGuestsCount(Resto.Front.Api.IOperationService,System.Int32,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes estimated order guests count. Use this method to set estimated guests count when guests collection doesn't reflect actual state of affairs.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="estimatedGuestsCount">How many people will be served using this order, in spite of how many guests this order will be splitted by.</param>
            <param name="order">Order to change estimated guests count.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderProductItem(Resto.Front.Api.IOperationService,System.Decimal,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderGuestItem,Resto.Front.Api.Data.Assortment.IProductSize,Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.OrderItemCourse,System.Nullable{System.Decimal})">
            <summary>Adds assortment position to the guest in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">For positions with weight: weight in defined measure unit. For positions without weight: amount of the position. Can be from 0.001 to 999.999</param>
            <param name="course">Cooking and serving priority of the order item.</param>
            <param name="predefinedPrice">Predefined fixed price of the order item, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
            <param name="size">Size of the order item if it's product has scale, otherwise <c>null</c>.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderProductItem(Resto.Front.Api.IOperationService,System.Guid,System.Decimal,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderGuestItem,Resto.Front.Api.Data.Assortment.IProductSize,Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.OrderItemCourse,System.Nullable{System.Decimal})">
            <summary>Adds assortment position to the guest in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new item in the order. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">For positions with weight: weight in defined measure unit. For positions without weight: amount of the position. Can be from 0.001 to 999.999</param>
            <param name="course">Cooking and serving priority of the order item.</param>
            <param name="predefinedPrice">Predefined fixed price of the order item, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="product">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
            <param name="size">Size of the order item if it's product has scale, otherwise <c>null</c>.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderModifierItem(Resto.Front.Api.IOperationService,System.Int32,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderProductItem,Resto.Front.Api.Data.Security.ICredentials,System.Nullable{System.Decimal})">
            <summary>Adds order item modifier to the order item in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="predefinedPrice">Predefined fixed price of the modifier, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderProductItem.AvailableSimpleModifiers collection or one of the IOrderProductItem.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderProductItem.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="productItem">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderModifierItem(Resto.Front.Api.IOperationService,System.Int32,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderCompoundItem,Resto.Front.Api.Data.Security.ICredentials,System.Nullable{System.Decimal})">
            <summary>Adds order item modifier to the compound item in existing order. User must have rights to edit orders.</summary>
            <remarks>Compound item should have at least one component, so <see cref="!:AddPrimaryComponent(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,System.Nullable&lt;decimal&gt;)"/> should be called before adding modifiers.</remarks>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="predefinedPrice">Predefined fixed price of the modifier, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderProductItem.AvailableSimpleModifiers collection or one of the IOrderProductItem.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderProductItem.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="compoundItem">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderModifierItem(Resto.Front.Api.IOperationService,System.Int32,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderCompoundItemComponent,Resto.Front.Api.Data.Security.ICredentials,System.Nullable{System.Decimal})">
            <summary>Adds order item modifier to the compound item component in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="predefinedPrice">Predefined fixed price of the modifier, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderProductItem.AvailableSimpleModifiers collection or one of the IOrderProductItem.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderProductItem.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="component">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderModifierItem(Resto.Front.Api.IOperationService,System.Guid,System.Int32,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderProductItem,Resto.Front.Api.Data.Security.ICredentials,System.Nullable{System.Decimal})">
            <summary>Adds order item modifier to the order item in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new order item modifier. MUST be unique not only for the order item or order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="predefinedPrice">Predefined fixed price of the modifier, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderProductItem.AvailableSimpleModifiers collection or one of the IOrderProductItem.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderProductItem.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="productItem">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderModifierItem(Resto.Front.Api.IOperationService,System.Guid,System.Int32,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderCompoundItem,Resto.Front.Api.Data.Security.ICredentials,System.Nullable{System.Decimal})">
            <summary>Adds order item modifier to the compound item in existing order. User must have rights to edit orders.</summary>
            <remarks>Compound item should have at least one component, so <see cref="!:AddPrimaryComponent(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderCompoundItemStub,System.Nullable&lt;decimal&gt;)"/> should be called before adding modifiers.</remarks>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new order item modifier. MUST be unique not only for the order item or order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="predefinedPrice">Predefined fixed price of the modifier, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderProductItem.AvailableSimpleModifiers collection or one of the IOrderProductItem.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderProductItem.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="compoundItem">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderModifierItem(Resto.Front.Api.IOperationService,System.Guid,System.Int32,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductGroup,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderCompoundItemComponent,Resto.Front.Api.Data.Security.ICredentials,System.Nullable{System.Decimal})">
            <summary>Adds order item modifier to the compound item component in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new order item modifier. MUST be unique not only for the order item or order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="amount">Amount of the modifier. Can be from 1 to 999.</param>
            <param name="predefinedPrice">Predefined fixed price of the modifier, allows to use external quotation instead of default price list. <c>null</c> means default price.</param>
            <param name="modifier">Assortment position for modifier. Must be accessible through IOrderProductItem.AvailableSimpleModifiers collection or one of the IOrderProductItem.AvailableGroupModifiers child collections.</param>
            <param name="parentGroup">Assortment position group for modifier. Must be specified if new modifier will be part of the group modifier. Otherwise null. Group modifier must be chosen from IOrderProductItem.AvailableGroupModifiers</param>
            <param name="order">Order to which modifier will be added</param>
            <param name="component">Order item to which modifier will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderServiceItem(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderGuestItem,Resto.Front.Api.Data.Security.ICredentials,System.Nullable{System.TimeSpan})">
            <summary>Adds time pay service item to the guest in existing order. User must have permission to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="timeLimit">Total amount of time after which the service will be stopped or <c>null</c> for default limit (12 hours). Includes all periods.</param>
            <param name="service">Assortment position. Must exist in iikoFront assortment.</param>
            <param name="order">Order to which position will be added</param>
            <param name="guest">Guest to which position will be added</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderExternalData(Resto.Front.Api.IOperationService,System.String,System.String,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Adds external data to the order. Use <see cref="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeleteOrderExternalData(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)" /> to delete the data when it's no longer needed.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="key">External data key. Max length - 256 chars.</param>
            <param name="value">External data value. Max length - 32000 chars.</param>
            <param name="order">Order to which external data will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeleteOrderExternalData(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Deletes external data from the order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="key">External data key. Should be the same as it was used with <see cref="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderExternalData(Resto.Front.Api.IOperationService,System.String,System.String,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)" /></param>
            <param name="order">Order to delete external data from.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderCookingItemAmount(Resto.Front.Api.IOperationService,System.Decimal,Resto.Front.Api.Data.Orders.IOrderCookingItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes the amount of the assortment position in existing order. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">For positions with weight: new weight in defined measure unit. For positions without weight: new amount of the position. Can be from 0.001 to 999.999</param>
            <param name="cookingItem">Order item that represents the assortment position and which amount will be changed.</param>
            <param name="order">Order which contains the product.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.SplitOrderCookingItem(Resto.Front.Api.IOperationService,System.Decimal,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderCookingItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Cut off specified amount from product to new one.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">Amount to cut off. Source cooking item's amount will be reduced by this amount, resultant item will get this amount.</param>
            <param name="order">Order which contains the product.</param>
            <param name="cookingItem">Product to split.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderCookingItemCourse(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.OrderItemCourse,Resto.Front.Api.Data.Orders.IOrderCookingItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes the course of the order item.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="course">New course for order item.</param>
            <param name="cookingItem">Order item which course will be changed.</param>
            <param name="order">Order which contains the product.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderCookingItemSize(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Assortment.IProductSize,Resto.Front.Api.Data.Orders.IOrderCookingItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes the product size of the order item.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="size">Size of the order item.</param>
            <param name="cookingItem">Order item which course will be changed.</param>
            <param name="order">Order which contains the product.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.MoveOrderItemToAnotherGuest(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrderRootItem,Resto.Front.Api.Data.Orders.IOrderGuestItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Moves product item between guests of the same order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="product">Product item to be moved.</param>
            <param name="destinationGuest">Guest the product item will be assigned to.</param>
            <param name="order">Order which contains the product.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderModifierItemAmount(Resto.Front.Api.IOperationService,System.Int32,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderProductItem,Resto.Front.Api.Data.Orders.IOrderModifierItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes the amount of the product item modifier. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">New amount of the modifier. Can be from 1 to 999.</param>
            <param name="order">Order that contains element with changing modifier.</param>
            <param name="orderItem">Order item with changing modifier.</param>
            <param name="modifier">Modifier which amount will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderModifierItemAmount(Resto.Front.Api.IOperationService,System.Int32,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderCompoundItem,Resto.Front.Api.Data.Orders.IOrderModifierItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes the amount of the compound item common modifier. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">New amount of the modifier. Can be from 1 to 999.</param>
            <param name="order">Order that contains element with changing modifier.</param>
            <param name="orderItem">Order item with changing modifier.</param>
            <param name="modifier">Modifier which amount will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderModifierItemAmount(Resto.Front.Api.IOperationService,System.Int32,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderCompoundItemComponent,Resto.Front.Api.Data.Orders.IOrderModifierItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes the amount of the compound component modifier. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">New amount of the modifier. Can be from 1 to 999.</param>
            <param name="order">Order that contains element with changing modifier.</param>
            <param name="compoundComponent">Order item with changing modifier.</param>
            <param name="modifier">Modifier which amount will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ServeOrderCookingItem(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrderCookingItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Mark order item product as served.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="cookingItem">Order item product to mark as served. This item should be printed, but not served yet.</param>
            <param name="order">Order which product will be served.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.UnserveOrderCookingItem(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrderCookingItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Mark order item product as unserved.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="cookingItem">Order item product to mark as unserved. This item should be served.</param>
            <param name="order">Order which product will be unserved.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.GroupOrderCookingItems(Resto.Front.Api.IOperationService,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Orders.IOrderCookingItem},Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Combines the order item products into mix group so that they will be cooked together. Only consecutive products of the same guest can be combined into mix group.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="cookingItems">Order item products to be cooked together.</param>
            <param name="order">Order which products will be combined into mix group.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.UngroupOrderCookingItems(Resto.Front.Api.IOperationService,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Orders.IOrderCookingItem},Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Separates the order item products from mix group so that they will be cooked independently.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="cookingItems">Order item products to be separated from mix group.</param>
            <param name="order">Order which products will be separated from mix group.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeleteOrderGuest(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderGuestItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Deletes guest without any products from order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to delete guest from.</param>
            <param name="guest">Guest to be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.RenameOrderGuest(Resto.Front.Api.IOperationService,System.Guid,System.String,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Renames order's guest.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the guest to be renamed.</param>
            <param name="newName">New name of the guest.</param>
            <param name="order">Order to rename guest in.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeleteOrderItem(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderRootItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Deletes order item from order that represents the assortment position. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order that contains the item to be deleted.</param>
            <param name="orderItem">Order item to be deleted. Item must not be printed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeleteOrderModifierItem(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderProductItem,Resto.Front.Api.Data.Orders.IOrderModifierItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Deletes order item modifier from order item that represents the assortment position. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order that contains the item to be removed. Item must not be printed.</param>
            <param name="orderItem">Order item that contains the modifier to be removed.</param>
            <param name="modifier">Modifier to be removed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeleteOrderModifierItem(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderCompoundItem,Resto.Front.Api.Data.Orders.IOrderModifierItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Deletes order item modifier from order item that represents the assortment position. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order that contains the item to be removed. Item must not be printed.</param>
            <param name="orderItem">Order item that contains the modifier to be removed.</param>
            <param name="modifier">Modifier to be removed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeleteOrderModifierItem(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderCompoundItemComponent,Resto.Front.Api.Data.Orders.IOrderModifierItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Deletes order item modifier from order item that represents the assortment position. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order that contains the item to be removed. Item must not be printed.</param>
            <param name="orderItem">Order item that contains the modifier to be removed.</param>
            <param name="modifier">Modifier to be removed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeletePrintedOrderItem(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.WriteoffOptions,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderRootItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Deletes order item that is already printed. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">Comment to the charge-off. Max length - 255 chars.</param>
            <param name="writeoffOptions">Object that describes how item should be removed and charged-off.</param>
            <param name="order">Order that contains the item to be removed.</param>
            <param name="orderItem">Order item to be removed. Item must be printed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeletePrintedOrderModifierItem(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.WriteoffOptions,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderProductItem,Resto.Front.Api.Data.Orders.IOrderModifierItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Deletes order item modifier that is already printed. User must have rights to edit orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">Comment to the charge-off. Max length - 255 chars.</param>
            <param name="writeoffOptions">Object that describes how item should be removed and charged-off.</param>
            <param name="order">Order that contains the item to be removed. Item must not be printed.</param>
            <param name="orderItemProduct">Order item that contains the modifier to be removed.Item must be prin /ted.</param>
            <param name="orderModifierItem">Order item modifier to be removed. Modifier must be printed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderItemComment(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderCookingItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes product order item's comment.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">New comment for product order item.</param>
            <param name="order">Order that contains product order item which comment will be changed.</param>
            <param name="cookingItem">Product order item which comment will be changed. Product order item should not been printed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeleteOrderItemComment(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderCookingItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Deletes product order item's comment.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order that contains product order item which comment will be changed.</param>
            <param name="cookingItem">Product order item which comment will be changed. Product order item should not been printed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderItemWaiter(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderRootItem,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes product order item's waiter.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order that contains product order item which waiter will be changed.</param>
            <param name="orderItem">Product order item which waiterId will be changed. Product order item should not been printed.</param>
            <param name="waiter">Waiter.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderWaiter(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes order's waiter.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order which waiter will be changed.</param>
            <param name="waiter">New waiter.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddDiscount(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IDiscountType,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Adds simple discount of known type to existing order. User must have rights to work with discounts.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="discount">Type of the discount</param>
            <param name="order">Order where discount will be applied.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddFlexibleSumDiscount(Resto.Front.Api.IOperationService,System.Decimal,Resto.Front.Api.Data.Orders.IDiscountType,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Adds simple discount of known type to existing order. User must have rights to work with discounts.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="sum">Discount sum.</param>
            <param name="discount">Type of the discount</param>
            <param name="order">Order where discount will be applied.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddDiscountByCardNumber(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IDiscountCard,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Add discount by card number.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="cardNumber">Number of iiko discount card.</param>
            <param name="order">Order where discount will be applied.</param>
            <param name="discountCard">Iiko discount card data.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddFlexibleSumDiscountByCardNumber(Resto.Front.Api.IOperationService,System.String,System.Decimal,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IDiscountCard,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Add discount by card number.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="cardNumber">Number of iiko discount card.</param>
            <param name="sum">Discount sum.</param>
            <param name="order">Order where discount will be applied.</param>
            <param name="discountCard">Iiko discount card data.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeSelectiveDiscount(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IDiscountType,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Orders.IOrderProductItem},System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Orders.IOrderModifierItem},System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Orders.IOrderCompoundItemComponent},Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change discount item selective application settings. Set both <paramref name="products" /> and <paramref name="modifiers" /> to <c>null</c> if you want the discount item to be applied to the whole order (including future order items), otherwise provide order item products and modifiers for selective discount item application.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order containing the discount item.</param>
            <param name="discountType">Type of discount item to change.</param>
            <param name="products">Order item products to which the discount item can be applied to.</param>
            <param name="modifiers">Order item modifiers to which the discount item can be applied to.</param>
            <param name="components">Compound item components to which the discount item can be applied to.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeleteDiscount(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IDiscountItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Removes discount of known type from existing order. User must have rights to work with discounts.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="discountItem">Discount to be removed.</param>
            <param name="order">Order to delete discount from.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddPaymentItem(Resto.Front.Api.IOperationService,System.Decimal,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Add new payment item to order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="additionalData">Instance of a payment specific type carrying properties, which will be used to initialize a payment item, or null if payment type doesn't require additional data for payment item initialization.</param>
            <param name="paymentType">Type of payment item that will be added.</param>
            <param name="order">Order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddPaymentItem(Resto.Front.Api.IOperationService,System.Guid,System.Decimal,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Add new payment item to order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new payment item. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="additionalData">Instance of a payment specific type carrying properties, which will be used to initialize a payment item, or null if payment type doesn't require additional data for payment item initialization.</param>
            <param name="paymentType">Type of payment item that will be added.</param>
            <param name="order">Order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddPreliminaryPaymentItem(Resto.Front.Api.IOperationService,System.Decimal,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Add new preliminary payment item to order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="additionalData">Instance of a payment specific type carrying properties, which will be used to initialize a payment item, or null if payment type doesn't require additional data for payment item initialization.</param>
            <param name="paymentType">Type of payment item that will be added.</param>
            <param name="order">Delivery order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddPreliminaryPaymentItem(Resto.Front.Api.IOperationService,System.Guid,System.Decimal,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Add new preliminary payment item to order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new payment item. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="additionalData">Instance of a payment specific type carrying properties, which will be used to initialize a payment item, or null if payment type doesn't require additional data for payment item initialization.</param>
            <param name="paymentType">Type of payment item that will be added.</param>
            <param name="order">Delivery order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddExternalPaymentItem(Resto.Front.Api.IOperationService,System.Decimal,System.Boolean,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Add new external payment item to order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="isProcessed">Whether payment item was already processed by some external system.</param>
            <param name="additionalData">Instance of a payment specific type carrying properties, which will be used to initialize a payment item, or null if payment type doesn't require additional data for payment item initialization.</param>
            <param name="paymentType">Type of payment item that will be added. It should be allowed to create external payment items of this type.</param>
            <param name="order">Order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddExternalPaymentItem(Resto.Front.Api.IOperationService,System.Guid,System.Decimal,System.Boolean,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Add new external payment item to order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new payment item. MUST be unique not only for the order, but for the whole system. Therefore it must be taken from some synchronization operation or generated with Guid.NewGuid()</param>
            <param name="paymentSum">Sum of payment item that will be added.</param>
            <param name="isProcessed">Whether payment item was already processed by some external system.</param>
            <param name="additionalData">Instance of a payment specific type carrying properties, which will be used to initialize a payment item, or null if payment type doesn't require additional data for payment item initialization.</param>
            <param name="paymentType">Type of payment item that will be added. It should be allowed to create external payment items of this type.</param>
            <param name="order">Order to which payment item will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangePaymentItemSum(Resto.Front.Api.IOperationService,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes sum of existing payment item.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="paymentSum">New sum of payment item.</param>
            <param name="minPaymentSum">Minimum allowed payment sum, lower bound for the payment. <c>null</c> means default limit value.</param>
            <param name="maxPaymentSum">Maximum allowed payment sum, upper bound for the payment. <c>null</c> means default limit value.</param>
            <param name="paymentItem">Payment item to be edited.</param>
            <param name="order">Order of which payment item will be edited.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangePreliminaryPaymentItemSum(Resto.Front.Api.IOperationService,System.Decimal,Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes sum of existing preliminary payment item.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="paymentSum">New sum of payment item.</param>
            <param name="paymentItem">Preliminary payment item to be edited.</param>
            <param name="order">Order of which payment item will be edited.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangePaymentItemCustomData(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes custom data of existing payment item.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="customData">New custom data for payment item. Max serialized data length is <see cref="F:Resto.Front.Api.Extensions.PaymentDataContextExtensions.MaxExternalPaymentItemDataLength"/>.</param>
            <param name="paymentItem">Payment item to be edited. Currently should be payment item of plugin payment type.</param>
            <param name="order">Order of which payment item will be edited.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangePreliminaryPaymentItemCustomData(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes custom data of existing preliminary payment item.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="customData">New custom data for payment item. Max serialized data length is <see cref="F:Resto.Front.Api.Extensions.PaymentDataContextExtensions.MaxExternalPaymentItemDataLength"/>.</param>
            <param name="paymentItem">Preliminary payment item to be edited. Currently should be payment item of plugin payment type.</param>
            <param name="order">Order of which payment item will be edited.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeExternalPaymentItemCustomData(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes custom data of existing external payment item.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="customData">New custom data for payment item. Max serialized data length is <see cref="F:Resto.Front.Api.Extensions.PaymentDataContextExtensions.MaxExternalPaymentItemDataLength"/>.</param>
            <param name="paymentItem">External payment item to be edited. Currently should be payment item of plugin payment type.</param>
            <param name="order">Order of which payment item will be edited.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeletePaymentItem(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Delete existing payment item from order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="paymentItem">Payment item to be deleted.</param>
            <param name="order">Order from which payment item will be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeletePreliminaryPaymentItem(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Delete existing preliminary payment item from order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="paymentItem">Payment item to be deleted.</param>
            <param name="order">Delivery order from which payment item will be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeleteExternalPaymentItem(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Delete existing external payment item from order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="paymentItem">External payment item to be deleted.</param>
            <param name="order">Order from which payment item will be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CreateStreet(Resto.Front.Api.IOperationService,System.Guid,System.String,Resto.Front.Api.Data.Brd.ICity,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Creates new street.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Id of creating street</param>
            <param name="name">Name of creating street</param>
            <param name="city">City of creating street</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CreateStreet(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Creates new street.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="name">Name of creating street</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeStreetName(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Brd.IStreet,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes street's name.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="name">Name of street</param>
            <param name="street">Changing street</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeleteOrRestoreStreet(Resto.Front.Api.IOperationService,System.Boolean,Resto.Front.Api.Data.Brd.IStreet,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Deletes street.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="delete">Delete or restore street flag. true - to delete, false - to restore.</param>
            <param name="street">Changing street</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CreateClient(Resto.Front.Api.IOperationService,System.Guid,System.String,System.Collections.Generic.List{Resto.Front.Api.Data.Brd.PhoneDto},System.String,System.Nullable{System.DateTime},Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Creates new client. The client must have a card number or at least one phone number.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Id of creating client</param>
            <param name="name">Name of client</param>
            <param name="phones">List of client phones. Cannot contain null values and more than one main phone (i.e. with property IsMain = true)</param>
            <param name="cardNumber">Discount card number or <c>null</c> if the client doesn't have discount card. If the discount card doesn't exist, consider creating one using <see cref="!:IOperationService.CreateOrUpdateDiscountCard" />.</param>
            <param name="dateCreated">Date when client was created. Must be not null, for actual reports by date created of clients.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientLinkedCounteragent(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client linked counter agent.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="client">Changing client.</param>
            <param name="linkedCounteragent">New linked counteragent.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientName(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client name.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="name">new name of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientSurname(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client surname.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="surname">new surname of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientNick(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client nickname.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="nick">new nick of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientCardNumber(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client card number.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="cardNumber">New card number of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientComment(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client comment.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">new name of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientPhones(Resto.Front.Api.IOperationService,System.Collections.Generic.List{Resto.Front.Api.Data.Brd.PhoneDto},Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client phones list.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="phones">new phones list of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientEmails(Resto.Front.Api.IOperationService,System.Collections.Generic.List{Resto.Front.Api.Data.Brd.EmailDto},Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client emails list.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="emails">new emails list of client</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientAddresses(Resto.Front.Api.IOperationService,System.Collections.Generic.List{Resto.Front.Api.Data.Brd.AddressDto},System.Nullable{System.Int32},Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client addresses.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="addresses">new addresses list of client</param>
            <param name="mainAddressIndex">index of client main address</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientMainAddressIndex(Resto.Front.Api.IOperationService,System.Int32,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client main address index.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="mainAddressIndex">index of client main address</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientBlacklistInfo(Resto.Front.Api.IOperationService,System.Boolean,System.String,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client blacklist info.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="isInBlacklist">Is changing client in blacklist.</param>
            <param name="reason">The reason of adding client to blacklist.</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientIikoNetId(Resto.Front.Api.IOperationService,System.Guid,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client's account in Plazius.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="iikoNetId">New account in Plazius</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientIikoBizId(Resto.Front.Api.IOperationService,System.Guid,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client's account in iiko.biz.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="iikoBizId">New account in iiko.biz</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientMarketingSource(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Brd.IMarketingSource,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client marketing source.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="marketingSource">New marketing source of the client.</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientBirthDate(Resto.Front.Api.IOperationService,System.Nullable{System.DateTime},Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client's birth date.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="birthDate">New birth date</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientLastOrderDate(Resto.Front.Api.IOperationService,System.DateTime,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes client's last order date.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="lastOrderDate">New last order date</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientReceivesNotifications(Resto.Front.Api.IOperationService,System.Boolean,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes whether client receives notification messages.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="receivesNotifications">Whether client receives notification messages</param>
            <param name="client">Changing client</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientGender(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Brd.Gender,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change client's gender.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="gender">New gender.</param>
            <param name="client">Changing client.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeClientPersonalDataConsent(Resto.Front.Api.IOperationService,System.Nullable{System.Boolean},Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes whether client consented processing their personal data.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="consent">Client's consent status to the processing of the personal data</param>
            <param name="client">Changing client.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryProblemStatus(Resto.Front.Api.IOperationService,System.Boolean,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change the order problem status.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="hasProblem">Problem flag</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryProblemComment(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change the order problem comment.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">Problem comment. MaxLength = 1000 symbols. If HasProblem = false it does not mean that ProblemComment = null, because comment isn't erased automatically after set HasProblem to false.</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryPhone(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes the order phone.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="phone">New phone value of the order</param>
            <param name="order">Order to change phone</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryEmail(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change the order e-mail.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="email">E-mail</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryCustomApiData(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change the delivery custom data from api.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="customApiData">Custom data from api</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryComment(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change the order comment.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">Comment</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryExpectedDeliverTime(Resto.Front.Api.IOperationService,System.DateTime,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change time when client wants the order to be delivered.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="expectedDeliverTime">Expected deliver time</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryOrderPredictedCookingCompleteTime(Resto.Front.Api.IOperationService,System.Nullable{System.DateTime},Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change predicted time when the order cooking should be completed. Can change property only for Unconfirmed, New or Waiting delivery.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="predictedCookingCompleteTime">Predicted time</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryPredictedDeliveryTime(Resto.Front.Api.IOperationService,System.Nullable{System.DateTime},Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change predicted time when the order should be delivered. Can change property only for Unconfirmed, New or Waiting delivery.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="predictedDeliveryTime">Predicted time</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryAddress(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Brd.AddressDto,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes address of delivery</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="address">New address of delivery</param>
            <param name="order">Order to change address</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryCourier(Resto.Front.Api.IOperationService,System.Boolean,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Assign/Change the order courier. Can use this action only before the order is to be delivered.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="isCourierSelectedManually">Is courier selected manually and can't be replaced with automatic logistic system</param>
            <param name="order">Order to assign courier.</param>
            <param name="courier">Courier to assign to delivery.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.SetDeliveryConfirmed(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change delivery status to confirmed.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryConfirmTime(Resto.Front.Api.IOperationService,System.Nullable{System.DateTime},Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change when the order was confirmed.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="confirmTime">Confirmation time</param>
            <param name="order">Order to change time.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.SetDeliveryUnconfirmed(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change delivery status to unconfirmed.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.SetDeliveryUndelivered(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change delivery status to OnWay from status delivered.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.SetDeliveryDelivered(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change delivery status to delivered.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryActualDeliverTime(Resto.Front.Api.IOperationService,System.Nullable{System.DateTime},Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change time when the order was actually delivered.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="actualDeliverTime">Actual deliver time</param>
            <param name="order">Order to change status.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryDuration(Resto.Front.Api.IOperationService,System.TimeSpan,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change duration of delivery processing.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="duration">Calculated delivery duration (accurate within minutes).</param>
            <param name="order">Change precalculated delivery duration.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryOperator(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Assign/change the order operator.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to assign operator.</param>
            <param name="deliveryOperator">Operator to assign the order to.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliverySplitBetweenPersons(Resto.Front.Api.IOperationService,System.Boolean,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes the order property if it should be splitted between persons.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="splitBetweenPersons">Whether the order should be splitted between persons</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.SetDeliveryCustomerAuthorizedInIikoNet(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes whether the client is already authorized in Plazius. WARNING: use with caution! Illegal value can lead to unsuccessful Plazius operations. Do NOT set this property to 'true' if you are not sure that all authorization properties are correct and customer is registered in Plazius; that will cause Plazius payment failure.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.SetDeliveryCustomerAuthorizedInIikoBiz(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes whether the client is already authorized in iiko.biz. WARNING: use with caution! Illegal value can lead to unsuccessful iiko.biz operations. Do NOT set this property to 'true' if you are not sure that all authorization properties are correct and customer is registered in iiko.biz; that will cause iiko.biz payment failure.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to change</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryMarketingSource(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Brd.IMarketingSource,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Assign/change order marketing source.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to assign marketing source.</param>
            <param name="marketingSource">Source of the order.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeDeliveryLocation(Resto.Front.Api.IOperationService,System.Nullable{System.Double},System.Nullable{System.Double},Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes delivery address location.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="latitude">Latitude of geolocation of delivery address.</param>
            <param name="longitude">Longitude of geolocation of delivery address.</param>
            <param name="order">Order to change marketing source.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CreateReserve(Resto.Front.Api.IOperationService,System.DateTime,Resto.Front.Api.Data.Brd.IClient,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Organization.Sections.ITable},Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Creates reservation for planned visit in future. Table will be marked as reserved to prevent collision with other guests at the same time.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="estimatedStartTime">Approximate date and time of planned visit, used to divide different visits and remind staff to prepare table.</param>
            <param name="client">Client who asked to reserve table for him.</param>
            <param name="tables">Specifies tables to be reserved at some moment in future.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CreateBanquet(Resto.Front.Api.IOperationService,System.DateTime,Resto.Front.Api.Data.Brd.IClient,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Organization.Sections.ITable},Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Creates reservation for planned event in future. Table will be marked as reserved to prevent collision with other events at the same time.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="estimatedStartTime">Approximate date and time of planned event, used to divide different events and remind staff to prepare table and ingredients.</param>
            <param name="client">Client who asked to reserve table for his event.</param>
            <param name="tables">Specifies tables to be reserved at some moment in future.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.CreateBanquet(Resto.Front.Api.IOperationService,System.DateTime,Resto.Front.Api.Data.Brd.IClient,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Creates reservation for planned event in future. Order's table will be marked as reserved to prevent collision with other events at the same time.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="estimatedStartTime">Approximate date and time of planned event, used to divide different events and remind staff to prepare table and ingredients.</param>
            <param name="client">Client who asked to reserve table for his event.</param>
            <param name="order">Order used to form menu for coming event, specify serve sequence (via courses), prepay.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeReserveComment(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes reserve comment. Use empty string to clear comment.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="comment">Arbitrary string comment for the reserve, maximum length is 250 chars.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeReserveDuration(Resto.Front.Api.IOperationService,System.TimeSpan,Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes estimated reserve duration (amount of time betwen visit's start and end). Default reserve duration is 2 hours, banquet duration is 3 hours.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="duration">Reserve duration, minimum value is 15 minutes, maximum value is 23 hours and 59 minutes, maximum precision is 1 minute (so 1h 25m 42s is invalid as too precise value).</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeReserveEstimatedStartTime(Resto.Front.Api.IOperationService,System.DateTime,Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes estimated reserve start time.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="estimatedStartTime">Approximate date and time of planned visit, used to divide different visits and remind staff to prepare table.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeReserveGuestsCount(Resto.Front.Api.IOperationService,System.Int32,Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes estimated guests count for reserve. Default value is 2.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="guestsCount">Estimated guests count, minimum value is 1, maximum value is 1000.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeReserveTables(Resto.Front.Api.IOperationService,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Organization.Sections.ITable},Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes reserving tables.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="tables">Specifies tables to be reserved at some moment in future.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeReserveReminder(Resto.Front.Api.IOperationService,System.Boolean,Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes reserve reminder flag.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="shouldRemind">Whether to remind staff to prepare table beforehand.</param>
            <param name="reserve">Reserve to edit.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.BindReserveToOrder(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Converts exising reserve or banquet without order to banquet with order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="reserve">Reserve to bind.</param>
            <param name="order">Order used to bind reserve to.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ReopenReserve(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Reopens previously closed or canceled reserve.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="reserve">Reserve to reopen.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.StartBanquet(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Transits banquet to the started status.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="reserve">Banquet to start. Banquet must have an order binding, otherwise call <see cref="M:Resto.Front.Api.Extensions.OperationServiceExtensions.BindReserveToOrder(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)" /> first.</param>
            <param name="waiter">Waiter who will serve the banquet.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderOriginName(Resto.Front.Api.IOperationService,System.String,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Sets order origin — name of the source this order was received from. Specifying origin allows to analyse efficiency of external order sources such as different web-sites, mobile applications and so on. Origin name can be set only once.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="originName">Non-empty string of the new origin name. Maximum length is 20 chars.</param>
            <param name="order">Order to specify origin.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.MoveOrderItemToAnotherOrder(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrderRootItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderGuestItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Moves product item between orders.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="orderItem">Product item to be moved.</param>
            <param name="sourceOrder">Order which currently contains the product.</param>
            <param name="destinationGuest">Guest the product item will be assigned to.</param>
            <param name="destinationOrder">Order to move to.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ResetIsPrintedDeliveryBillActual(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Resets whether latest printed bill is actual to 'false' value. Use when you want delivery bill to be print again according to settings. For example, if you changed courier and wish to have actual name on the bill, call this action and delivery will automatically printed according to settings. On the contrary, if you don't want bill to be printed again (for example, courier is written to the bill later by hands), you have no need to call this action.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to reset whether its bill is considered to be actual.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.AddOrderCombo(Resto.Front.Api.IOperationService,System.Guid,System.String,System.Int32,System.Decimal,System.Guid,System.Guid,System.Collections.Generic.IReadOnlyDictionary{System.Guid,Resto.Front.Api.Data.Orders.IOrderCookingItem},Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderGuestItem,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Create order combo item. Order must contain new combo items.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the new combo.</param>
            <param name="name">Name of combo.</param>
            <param name="amount">Amount of combo.</param>
            <param name="price">Price of combo.</param>
            <param name="sourceActionId">Unique identifier of source combo (template identifier).</param>
            <param name="programId">Identifier of the loyalty program.</param>
            <param name="comboItems">Combo items dictionary. Key - combo group identifier, Value - item id (must be contained in order).</param>
            <param name="order">Order to which combo will be added.</param>
            <param name="guest">Guest to which combo will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.UpdateOrderComboItems(Resto.Front.Api.IOperationService,System.Guid,System.Collections.Generic.IReadOnlyDictionary{System.Guid,Resto.Front.Api.Data.Orders.IOrderCookingItem},Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Update existing order combo items. Order must contain new combo items.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="id">Unique identifier of the existing combo.</param>
            <param name="comboItems">Combo items dictionary. Key - combo group identifier, Value - item id (must be contained in order).</param>
            <param name="order">Order to which combo will be added.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.DeleteOrderCombo(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrderCombo,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Delete order combo item.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="combo">Combo which will be deleted.</param>
            <param name="order">Order from which combo will be deleted.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeComboAmount(Resto.Front.Api.IOperationService,System.Int32,Resto.Front.Api.Data.Orders.IOrderCombo,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change combo amount.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="amount">New combo amount.</param>
            <param name="combo">Combo which amount will be changed.</param>
            <param name="order">Order which combo amount will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeComboPrice(Resto.Front.Api.IOperationService,System.Decimal,Resto.Front.Api.Data.Orders.IOrderCombo,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change combo price.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="price">New combo price.</param>
            <param name="combo">Combo which price will be changed.</param>
            <param name="order">Order which combo price will be changed.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderAppliedIikoCard5ManualConditions(Resto.Front.Api.IOperationService,System.Collections.Generic.List{System.Guid},Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Change iikoCard5 manual conditions applied for order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="appliedManualConditions">List of iikoCard5 manual condition identifiers applied to order.</param>
            <param name="order">Order to apply iikoCard5 manual conditions.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeCookingPriority(Resto.Front.Api.IOperationService,System.Int32,System.Boolean,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes custom cooking priority and top priority flag.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="customPriority">Specifies a custom cooking priority.</param>
            <param name="isTopPriority">Sets a top priority flag.</param>
            <param name="order">Order to apply custom priority</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.SetOpenPrice(Resto.Front.Api.IOperationService,System.Decimal,Resto.Front.Api.Data.Orders.IOrderProductItem,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes order item open price.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="openPrice">New open price value.</param>
            <param name="productOrderItem">Order item.</param>
            <param name="sourceOrder">Order which currently contains the product.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangePriceCategory(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IPriceCategory,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes price category of the order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="priceCategory">New price category.</param>
            <param name="order">Order to change price category.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ResetPriceCategory(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Resets price category of the order.</summary>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to reset price category.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.OperationServiceExtensions.ChangeOrderTables(Resto.Front.Api.IOperationService,Resto.Front.Api.Data.Orders.IOrder,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Organization.Sections.ITable},Resto.Front.Api.Data.Security.ICredentials)">
            <summary>Changes tables of the order.</summary>
            <remarks>If specified tables belongs to another restaurant section then section property, price category and products cooking palces will also be changed.</remarks>
            <param name="operationService">Operation service.</param>
            <param name="credentials">Credentials of the user. Required to pass permission and some other checks, as well as execute personalized operations.</param>
            <param name="order">Order to change tables.</param>
            <param name="tables">Tables to be assigned to the order.</param>
        </member>
        <member name="T:Resto.Front.Api.Extensions.ViewManagerExtensions">
            <summary>
            Provides a set of static methods for executing view manager.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Extensions.ViewManagerExtensions.ShowChooserPopup``1(Resto.Front.Api.UI.IViewManager,System.String,System.Collections.Generic.IList{``0},System.Func{``0,System.String},``0,Resto.Front.Api.UI.ButtonWidth)">
            <summary>Shows chooser dialog.</summary>
            <param name="viewManager">View manager.</param>
            <param name="title">Dialog title.</param>
            <param name="input">Items.</param>
            <param name="namingFunc">Function to get object's name.</param>
            <param name="selectedItem">Preselected item.</param>
            <param name="buttonWidth">Button's width in dialog.</param>
            <returns>Selected item.</returns>
        </member>
        <member name="F:Resto.Front.Api.Extensions.PaymentDataContextExtensions.MaxExternalPaymentItemDataLength">
            <summary>
            Max length of the external data to be saved inside an order in the string representation.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Extensions.PaymentDataContextExtensions.SetRollbackData``1(Resto.Front.Api.IPaymentDataContext,``0)">
            <summary>
            Method to set your rollback data to store in iiko storage. 
            Data will be saved on disk after successful payment.
            </summary>
            <typeparam name="T">Should be <see cref="T:System.SerializableAttribute"/> public class.</typeparam>
            <param name="context">Payment data context.</param>
            <param name="data">Your rollback data. Please save only data that you may need on operation rollback. Max serialized to string data length is <see cref="F:Resto.Front.Api.Extensions.PaymentDataContextExtensions.MaxExternalPaymentItemDataLength"/>.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.PaymentDataContextExtensions.GetRollbackData``1(Resto.Front.Api.IPaymentDataContext)">
            <summary>
            Method to get your rollback data from iiko storage.
            </summary>
            <param name="context">Payment data context.</param>
            <typeparam name="T">Should be <see cref="T:System.SerializableAttribute"/> public class.</typeparam>
            <returns>Rollback data that you previosly stored.</returns>
        </member>
        <member name="M:Resto.Front.Api.Extensions.PaymentDataContextExtensions.SetCustomData``1(Resto.Front.Api.IPaymentDataContext,``0)">
            <summary>
            Method to set your custom data to store in iiko storage. 
            </summary>
            <typeparam name="T">Should be <see cref="T:System.SerializableAttribute"/> public class.</typeparam>
            <param name="context">Payment data context.</param>
            <param name="data">Your custom data. Store any additional data here. Max serialized to string data length is <see cref="F:Resto.Front.Api.Extensions.PaymentDataContextExtensions.MaxExternalPaymentItemDataLength"/>.</param>
        </member>
        <member name="M:Resto.Front.Api.Extensions.PaymentDataContextExtensions.GetCustomData``1(Resto.Front.Api.IPaymentDataContext)">
            <summary>
            Method to get your custom data from iiko storage.
            </summary>
            <param name="context">Payment data context.</param>
            <typeparam name="T">Should be <see cref="T:System.SerializableAttribute"/> public class.</typeparam>
            <returns>Data that you previosly stored.</returns>
        </member>
        <member name="M:Resto.Front.Api.Extensions.PluginIntegrationServiceExtensions.AddButton(Resto.Front.Api.IPluginIntegrationService,System.String,System.Action{Resto.Front.Api.UI.IViewManager,Resto.Front.Api.IReceiptPrinter})">
            <summary>
            Adds action button to display it in plugin menu. Button will be automatically removed on iikoFront restarts or you will dispose method's return value.
            </summary>
            <param name="service"></param>
            <param name="action">
            Action to execute on button pressed.
            </param>
            <param name="caption">
            Text to display on button in 'Additional screen' -> 'Plugins menu'." 
            </param>
            <returns>
            You may dispose result to remove button.
            </returns>
            <seealso cref="M:Resto.Front.Api.IPluginIntegrationService.AddButton(Resto.Front.Api.UI.Button)"/>
        </member>
        <member name="M:Resto.Front.Api.Extensions.PluginIntegrationServiceExtensions.AddButtonOnClosedOrderView(Resto.Front.Api.IPluginIntegrationService,System.String,System.Action{Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Device.ICashRegisterInfo,Resto.Front.Api.UI.IViewManager})">
            <summary>
            Adds action button to display it in the closed order details screen. Button will be automatically removed on iikoFront restarts or you will dispose method's return value.
            </summary>
            <param name="service"></param>
            <param name="action">
            Action to execute on button pressed.
            </param>
            <param name="caption">
            Text to display on button in 'Closed order details screen' -> 'Additional'." 
            </param>
            <returns>
            You may dispose result to remove button.
            </returns>
            <seealso cref="M:Resto.Front.Api.IPluginIntegrationService.AddButtonOnClosedOrderView(Resto.Front.Api.UI.ButtonOnClosedOrderView)"/>
        </member>
        <member name="M:Resto.Front.Api.Extensions.PluginIntegrationServiceExtensions.AddButtonOnPastOrderView(Resto.Front.Api.IPluginIntegrationService,System.String,System.Action{System.Guid,Resto.Front.Api.Data.Device.ICashRegisterInfo,Resto.Front.Api.UI.IViewManager})">
            <summary>
            Adds action button to display it in the past order details screen. Button will be automatically removed on iikoFront restarts or you will dispose method's return value.
            </summary>
            <param name="service"></param>
            <param name="action">
            Action to execute on button pressed.
            </param>
            <param name="caption">
            Text to display on button in 'Past order screen' -> 'Other'." 
            </param>
            <returns>
            You may dispose result to remove button.
            </returns>
            <seealso cref="M:Resto.Front.Api.IPluginIntegrationService.AddButtonOnPastOrderView(Resto.Front.Api.UI.ButtonOnPastOrderView)"/>
        </member>
        <member name="M:Resto.Front.Api.Extensions.SerializationExtensions.GetXmlString(System.Xml.Linq.XNode)">
            <summary>
            Метод частично скопирован из <see cref="M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)"/>
            с аргументом <see cref="F:System.Xml.Linq.SaveOptions.DisableFormatting"/>
            с той лишь разницей, что <see cref="P:System.Xml.XmlWriterSettings.CheckCharacters"/> равен false.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.Extensions.SerializationExtensions.Parse(System.String)">
            <summary>
            Метод частично скопирован из <see cref="M:System.Xml.Linq.XElement.Parse(System.String)"/>
            с той лишь разницей, что <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters"/> равен false.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.ILog">
            <summary>
            Provides a set of methods to log messages.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.ILog.Info(System.String)">
            <summary>
            Logs a message with the <c>Info</c> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Resto.Front.Api.ILog.InfoFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>Info</c> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg">The object to format.</param>
            <remarks>
            The message is formatted using the <see cref="M:System.String.Format(System.String,System.Object)"/> method. See <c>string.Format</c> for details of the syntax of the format string and the behavior of the formatting.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.ILog.InfoFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>Info</c> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <remarks>
            The message is formatted using the <see cref="M:System.String.Format(System.String,System.Object,System.Object)"/> method. See <c>string.Format</c> for details of the syntax of the format string and the behavior of the formatting.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.ILog.InfoFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>Info</c> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <remarks>
            The message is formatted using the <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)"/> method. See <c>string.Format</c> for details of the syntax of the format string and the behavior of the formatting.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.ILog.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>Info</c> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <remarks>
            The message is formatted using the <see cref="M:System.String.Format(System.String,System.Object[])"/> method. See <c>string.Format</c> for details of the syntax of the format string and the behavior of the formatting.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.ILog.Warn(System.String)">
            <summary>
            Logs a message with the <c>Warn</c> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Resto.Front.Api.ILog.WarnFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>Warn</c> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg">The object to format.</param>
            <remarks>
            The message is formatted using the <see cref="M:System.String.Format(System.String,System.Object)"/> method. See <c>string.Format</c> for details of the syntax of the format string and the behavior of the formatting.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.ILog.WarnFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>Warn</c> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <remarks>
            The message is formatted using the <see cref="M:System.String.Format(System.String,System.Object,System.Object)"/> method. See <c>string.Format</c> for details of the syntax of the format string and the behavior of the formatting.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.ILog.WarnFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>Warn</c> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <remarks>
            The message is formatted using the <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)"/> method. See <c>string.Format</c> for details of the syntax of the format string and the behavior of the formatting.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.ILog.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>Warn</c> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <remarks>
            The message is formatted using the <see cref="M:System.String.Format(System.String,System.Object[])"/> method. See <c>string.Format</c> for details of the syntax of the format string and the behavior of the formatting.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.ILog.Error(System.String)">
            <summary>
            Logs a message with the <c>Error</c> level.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Resto.Front.Api.ILog.Error(System.String,System.Exception)">
            <summary>
            Logs a message with the <c>Error</c> level including the stack trace of the exception passed as a parameter.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:Resto.Front.Api.ILog.ErrorFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>Error</c> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg">The object to format.</param>
            <remarks>
            The message is formatted using the <see cref="M:System.String.Format(System.String,System.Object)"/> method. See <c>string.Format</c> for details of the syntax of the format string and the behavior of the formatting.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.ILog.ErrorFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>Error</c> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <remarks>
            The message is formatted using the <see cref="M:System.String.Format(System.String,System.Object,System.Object)"/> method. See <c>string.Format</c> for details of the syntax of the format string and the behavior of the formatting.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.ILog.ErrorFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>Error</c> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <remarks>
            The message is formatted using the <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)"/> method. See <c>string.Format</c> for details of the syntax of the format string and the behavior of the formatting.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.ILog.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>Error</c> level.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <remarks>
            The message is formatted using the <see cref="M:System.String.Format(System.String,System.Object[])"/> method. See <c>string.Format</c> for details of the syntax of the format string and the behavior of the formatting.
            </remarks>
        </member>
        <member name="T:Resto.Front.Api.INotificationService">
            <summary>
            Service provides notifications.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.INotificationService.SubscribeOnBeforeServiceCheque(Resto.Front.Api.RemotingHelpers.RemotableAction{Resto.Front.Api.Data.Orders.IOrder,System.Collections.Generic.IReadOnlyCollection{Resto.Front.Api.Data.Orders.IOrderCookingItem},Resto.Front.Api.UI.IViewManager})">
            <summary>
            Subscription on order service printing operation. You can abort printing operation by <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="callback">Action with access to <see cref="T:Resto.Front.Api.Data.Orders.IOrder"/>, collections of <see cref="T:Resto.Front.Api.Data.Orders.IOrderCookingItem"/> printing cooking order items and <see cref="T:Resto.Front.Api.UI.IViewManager"/>.</param>
            <returns>
            You may dispose result to remove subscription.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.INotificationService.SubscribeOnBeforeOrderBill(Resto.Front.Api.RemotingHelpers.RemotableAction{Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.UI.IViewManager})">
            <summary>
            Subscription on order billing operation. You can abort printing operation by <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="callback">Action with access to <see cref="T:Resto.Front.Api.Data.Orders.IOrder"/> and <see cref="T:Resto.Front.Api.UI.IViewManager"/>.</param>
            <returns>
            You may dispose result to remove subscription.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.INotificationService.SubscribeOnBeforeDeletePrintedItem(Resto.Front.Api.RemotingHelpers.RemotableAction{Resto.Front.Api.Data.Orders.IOrder,System.Collections.Generic.IReadOnlyCollection{Resto.Front.Api.Data.Orders.IOrderRootItem},System.Collections.Generic.IReadOnlyCollection{Resto.Front.Api.Data.Orders.IOrderModifierItem},Resto.Front.Api.Data.Orders.IDeletionMethod,Resto.Front.Api.UI.IViewManager})">
            <summary>
            Subscription on printed order item deletion operation. You can abort deletion operation by <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="callback">Action with access to <see cref="T:Resto.Front.Api.Data.Orders.IOrder"/>, collections of <see cref="T:Resto.Front.Api.Data.Orders.IOrderRootItem"/> and <see cref="T:Resto.Front.Api.Data.Orders.IOrderModifierItem"/> deleting root order items, <see cref="T:Resto.Front.Api.Data.Orders.IDeletionMethod"/> and <see cref="!:IProgressBar"/>.</param>
            <returns>
            You may dispose result to remove subscription.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.INotificationService.SubscribeOnBeforeDeleteOrder(Resto.Front.Api.RemotingHelpers.RemotableAction{Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.UI.IViewManager})">
            <summary>
            Subscription on order deletion operation. You can abort operation by <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="callback">Action with access to <see cref="T:Resto.Front.Api.Data.Orders.IOrder"/> and <see cref="T:Resto.Front.Api.UI.IViewManager"/>.</param>
            <returns>
            You may dispose result to remove subscription.
            </returns>
        </member>
        <member name="T:Resto.Front.Api.PluginContext">
            <summary>
            Provides access to api services.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.PluginContext.Initialize(System.IServiceProvider,System.Action,Resto.Front.Api.ILog)">
            <summary>
            Fills the context with Api services on plugin startup.
            This method isn't intended to be called from plugin.
            </summary>
            <remarks>
            Primarily this method is used by Api infrastructure, but it also can be used in unit tests for checking plugin's code.
            When writing tests against code which is using static properties of <see cref="T:Resto.Front.Api.PluginContext"/>,
            you can initialize the context with dummy (mocked) services.
            Services are retrieved from the provider when corresponding static properties are called,
            so for testing purposes you may provide minimum set of services which are actually used in the code being tested.
            </remarks>
            <seealso cref="M:Resto.Front.Api.PluginContext.Uninitialize"/>
        </member>
        <member name="M:Resto.Front.Api.PluginContext.Uninitialize">
            <summary>
            Resets the context to uninitialized state.
            This method isn't intended to be called from plugin.
            </summary>
            <remarks>
            Use this method in unit tests to reset the context and re-initialize with appropriate services for each test fixture.
            </remarks>
            <seealso cref="M:Resto.Front.Api.PluginContext.Initialize(System.IServiceProvider,System.Action,Resto.Front.Api.ILog)"/>
        </member>
        <member name="P:Resto.Front.Api.PluginContext.Log">
            <summary>
            Provides logger.
            Messages sent to the logger will be written to the log file and optionally to the console or other standard output (latter is available for debug mode).
            </summary>
        </member>
        <member name="P:Resto.Front.Api.PluginContext.Services">
            <summary>
            Provider of all services which are available for current plugin.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.PluginContext.Operations">
            <summary>
            Provides operations.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.PluginContext.Notifications">
            <summary>
            Provides notifications.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.PluginContext.Integration">
            <summary>
            Provides integration features.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.PluginContext.Licensing">
            <summary>
            Provides licensing service.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.PluginContext.Shutdown(System.String)">
            <summary>
            Gracefully terminates current host process.
            Plugin may call this method to stop working.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.RemotingHelpers.DisconnectableMarshalByRefObject.InitializeLifetimeService">
            <inheritdoc />
        </member>
        <member name="M:Resto.Front.Api.RemotingHelpers.DisconnectableMarshalByRefObject.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Resto.Front.Api.UI.ButtonOnClosedOrderView">
            <summary>
            Button to register action for front plugin calling from the closed order screen. <see cref="M:Resto.Front.Api.IPluginIntegrationService.AddButtonOnClosedOrderView(Resto.Front.Api.UI.ButtonOnClosedOrderView)"/>
            </summary>
        </member>
        <member name="M:Resto.Front.Api.UI.ButtonOnClosedOrderView.InitializeLifetimeService">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.UI.ButtonOnClosedOrderView.Caption">
            <summary>
            Text to display on button in 'Closed order screen' -> 'Additional'." />
            </summary>
        </member>
        <member name="T:Resto.Front.Api.UI.ButtonOnPastOrderView">
            <summary>
            Button to register action for front plugin calling from the past order screen. <see cref="M:Resto.Front.Api.IPluginIntegrationService.AddButtonOnPastOrderView(Resto.Front.Api.UI.ButtonOnPastOrderView)"/>
            </summary>
        </member>
        <member name="M:Resto.Front.Api.UI.ButtonOnPastOrderView.InitializeLifetimeService">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.UI.ButtonOnPastOrderView.Caption">
            <summary>
            Text to display on button in 'Past order screen' -> 'Additional'." />
            </summary>
        </member>
        <member name="T:Resto.Front.Api.UI.ButtonWidth">
            <summary>
            Button width in <see cref="M:Resto.Front.Api.UI.IViewManager.ShowChooserPopup(System.String,System.Collections.Generic.IList{System.String},System.Int32,Resto.Front.Api.UI.ButtonWidth)"/>.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.UI.ButtonWidth.Wider">
            <summary>
            Dialog will fit up to 1 column.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.UI.ButtonWidth.Wide">
            <summary>
            Dialog will fit up to 2 columns.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.UI.ButtonWidth.Normal">
            <summary>
            Dialog will fit up to 3 columns.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.UI.ButtonWidth.Narrow">
            <summary>
            Dialog will fit up to 4 columns.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.UI.ButtonWidth.Narrower">
            <summary>
            Dialog will fit up to 5 columns.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.UI.ButtonWidth.Supernarrow">
            <summary>
            Dialog will fit up to 6 columns.
            </summary>
        </member>
        <member name="F:Resto.Front.Api.UI.ButtonWidth.Default">
            <summary>
            Dialog fits up to 3 columns is default.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.UI.IViewManager">
            <summary>
            Interface for displaying data input dialog.
            Can be <c>null</c> in a background context, where is no UI.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:Resto.Front.Api.UI.IViewManager.ShowInputDialog(System.String,Resto.Front.Api.Data.View.InputDialogTypes,System.Nullable{System.Int32})">
            <summary>Shows input dialog.</summary>
            <param name="title">Dialog title.</param>
            <param name="type">Input types. Can be used as flags.</param>
            <param name="initialValue">Initial value. Used if <paramref name="type"/> contains <see cref="F:Resto.Front.Api.Data.View.InputDialogTypes.Number"/> flag.</param>
            <returns>Dialog result. Depending on <paramref name="type"/> argument and user input it could be <see cref="T:Resto.Front.Api.Data.View.CardInputDialogResult"/> or <see cref="T:Resto.Front.Api.Data.View.NumberInputDialogResult"/>.</returns>
            <seealso cref="M:Resto.Front.Api.UI.IViewManager.ShowExtendedInputDialog(System.String,System.String,Resto.Front.Api.UI.ExtendedInputDialogSettings)" />
        </member>
        <member name="M:Resto.Front.Api.UI.IViewManager.ShowChooserPopup(System.String,System.Collections.Generic.IList{System.String},System.Int32,Resto.Front.Api.UI.ButtonWidth)">
            <summary>Shows chooser dialog.</summary>
            <param name="title">Dialog title.</param>
            <param name="input">Items.</param>
            <param name="selectedItemIndex">Preselected item index.</param>
            <param name="buttonWidth">Button's width in dialog.</param>
            <returns>Selected item index.</returns>
        </member>
        <member name="M:Resto.Front.Api.UI.IViewManager.ShowExtendedInputDialog(System.String,System.String,Resto.Front.Api.UI.ExtendedInputDialogSettings)">
            <summary>Shows extended input dialog.</summary>
            <param name="title">Dialog title.</param>
            <param name="hint">Hint to show to the user.</param>
            <param name="settings">Expected input types settings. Dialog will contain separate tab for each enabled input type, so you should provide tab titles for enabled input types.</param>
            <returns>Dialog result. Depending on <paramref name="settings"/> and user input it could be one of <see cref="T:Resto.Front.Api.Data.View.IInputDialogResult"/> inheritors. Use pattern matching to find out specific result type.</returns>
            <seealso cref="M:Resto.Front.Api.UI.IViewManager.ShowInputDialog(System.String,Resto.Front.Api.Data.View.InputDialogTypes,System.Nullable{System.Int32})" />
        </member>
        <member name="M:Resto.Front.Api.UI.IViewManager.ShowOkPopup(System.String,System.String)">
            <summary>Shows dialog with single "OK" button.</summary>
            <param name="title">Dialog title.</param>
            <param name="message">Message text.</param>
        </member>
        <member name="M:Resto.Front.Api.UI.IViewManager.ShowErrorPopup(System.String)">
            <summary>Shows dialog with single "Close" button.</summary>
            <param name="message">Message text.</param>
            <returns>True if "Yes".</returns>
        </member>
        <member name="M:Resto.Front.Api.UI.IViewManager.ShowYesNoPopup(System.String,System.String)">
            <summary>Shows "Yes"/"No" dialog.</summary>
            <param name="title">Dialog title.</param>
            <param name="message">Message text.</param>
            <returns>True if "Yes".</returns>
        </member>
        <member name="M:Resto.Front.Api.UI.IViewManager.ShowKeyboard(System.String,System.String,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>Shows "Keyboard" dialog.</summary>
            <param name="title">Dialog title.</param>
            <param name="initialText">Initial text.</param>
            <param name="isMultiline">Is multiline input supported.</param>
            <param name="maxLength">Max input length.</param>
            <param name="capitalize">Automatic words capitalization.</param>
            <param name="isPassword">Input is password.</param>
            <returns>Entered string or <c>null</c> if cancelled.</returns>
        </member>
        <member name="M:Resto.Front.Api.UI.IViewManager.ChangeProgressBarMessage(System.String)">
            <summary>
            Changes the message of progress bar.
            </summary>
            <param name="message">New message.</param>
        </member>
        <member name="T:Resto.Front.Api.UI.Button">
            <summary>
            Button to register action for front plugin calling from plugin menu. <see cref="M:Resto.Front.Api.IPluginIntegrationService.AddButton(Resto.Front.Api.UI.Button)"/>
            </summary>
        </member>
        <member name="M:Resto.Front.Api.UI.Button.InitializeLifetimeService">
            <inheritdoc />
        </member>
        <member name="P:Resto.Front.Api.UI.Button.Caption">
            <summary>
            Text to display on button in 'Additional screen' -> 'Plugins menu'." />
            </summary>
        </member>
        <member name="P:Resto.Front.Api.UI.ExtendedInputDialogSettings.EnablePhone">
            <summary>To get phone number. Numpad window with phone formatter will be shown.</summary>	
        </member>
        <member name="P:Resto.Front.Api.UI.ExtendedInputDialogSettings.EnableNumericString">
            <summary>To get numeric string. Numpad with numeric string window will be shown.</summary>	
        </member>
        <member name="P:Resto.Front.Api.UI.ExtendedInputDialogSettings.EnableBarcode">
            <summary>To get barcode. Numpad with barcode window will be shown.</summary>	
        </member>
        <member name="P:Resto.Front.Api.UI.ExtendedInputDialogSettings.EnableCardSlider">
            <summary>To get card track. Enable card slide listener.</summary>	
        </member>
        <member name="P:Resto.Front.Api.UI.ExtendedInputDialogSettings.TabTitlePhone">
            <summary>Hint to phone number.</summary>	
        </member>
        <member name="P:Resto.Front.Api.UI.ExtendedInputDialogSettings.TabTitleNumericString">
            <summary>Hint to numeric string.</summary>	
        </member>
        <member name="P:Resto.Front.Api.UI.ExtendedInputDialogSettings.TabTitleBarcode">
            <summary>Hint to barcode.</summary>	
        </member>
        <member name="T:Resto.Front.Api.VoidValue">
            <summary>
            Represents dummy value for <see cref="T:System.IObservable`1"/> where notification itself is the only purpose to have such sequence and notification argument doesn't have any meaning.
            It's something like <see cref="T:System.Void"/>-method in the Rx-world.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.VoidValue.Default">
            <summary>
            Just a syntactic replacement for <c>default(VoidValue)</c>.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.VoidValue.Equals(Resto.Front.Api.VoidValue)">
            <summary>
            Always <c>true</c>.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.VoidValue.op_Equality(Resto.Front.Api.VoidValue,Resto.Front.Api.VoidValue)">
            <summary>
            Always <c>true</c>.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.VoidValue.op_Inequality(Resto.Front.Api.VoidValue,Resto.Front.Api.VoidValue)">
            <summary>
            Always <c>false</c>.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.IPaymentDataContext">
            <summary>
            Helper to work with plugin saved data in iiko storage.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IPaymentDataContext.SetInfoForReports(System.String,System.String)">
            <summary>
            Method to set card number and card type to display in iiko reports.
            Data will be saved on disk after successful payment. 
            </summary>
            <param name="cardNumber"></param>
            <param name="cardType"></param>
        </member>
        <member name="M:Resto.Front.Api.IPaymentDataContext.SetRollbackData(System.String)">
            <summary>
            Method to set your data to store in iiko storage. 
            Data will be saved on disk after successful payment. 
            </summary>
            <param name="serializedData">Your data. Please save only data that you may need on operation rollback. Max serialized to string data length is <see cref="F:Resto.Front.Api.Extensions.PaymentDataContextExtensions.MaxExternalPaymentItemDataLength"/></param>
        </member>
        <member name="M:Resto.Front.Api.IPaymentDataContext.GetRollbackData">
            <summary>
            Method to get your data from iiko storage.
            </summary>
            <returns>Data that you previosly stored.</returns>
        </member>
        <member name="M:Resto.Front.Api.IPaymentDataContext.SetCustomData(System.String)">
            <summary>
            Method to set your custom data to store in iiko storage. 
            </summary>
            <param name="serializedData">Your custom data. Store any additional data here. Max serialized to string data length is <see cref="F:Resto.Front.Api.Extensions.PaymentDataContextExtensions.MaxExternalPaymentItemDataLength"/></param>
        </member>
        <member name="M:Resto.Front.Api.IPaymentDataContext.GetCustomData">
            <summary>
            Method to get your custom data from iiko storage.
            </summary>
            <returns>Data that you previosly stored.</returns>
        </member>
        <member name="T:Resto.Front.Api.IPluginIntegrationService">
            <summary>
            Service provides integration features.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IPluginIntegrationService.AddButton(Resto.Front.Api.UI.Button)">
            <summary>
            Adds action button to display it in plugin menu. Button will be automatically removed on iikoFront restarts or you will dispose method's return value.
            </summary>
            <param name="button">
            Action Button to insert in plugins summary at 'Additional screen' -> 'Plugins menu'.
            </param>
            <returns>
            You may dispose result to remove button.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IPluginIntegrationService.AddButtonOnClosedOrderView(Resto.Front.Api.UI.ButtonOnClosedOrderView)">
            <summary>
            Adds action button to display it in the closed order details screen. Button will be automatically removed on iikoFront restarts or you will dispose method's return value.
            </summary>
            <param name="button">
            Action Button to insert in plugins summary at 'Closed order datails screen' -> 'Additional'.
            </param>
            <returns>
            You may dispose result to remove button.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IPluginIntegrationService.AddButtonOnPastOrderView(Resto.Front.Api.UI.ButtonOnPastOrderView)">
            <summary>
            Adds action button to display it in the past order screen. Button will be automatically removed on iikoFront restarts or you will dispose method's return value.
            </summary>
            <param name="button">
            Action Button to insert in plugins summary at 'Past order screen' -> 'Additional'.
            </param>
            <returns>
            You may dispose result to remove button.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IPluginIntegrationService.GetPluginSettings(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Gets plugin settings by specified plugin key and bound entity id.
            </summary>
            <param name="pluginKey">Plugin key, identifying owner of settings.</param>
            <param name="boundEntityId">Identifier of iikoRMS entity that is bound to settings.</param>
            <returns>Plugin settings or <c>null</c> if there is no settings assotiated with plugin key and entity.</returns>
        </member>
        <member name="M:Resto.Front.Api.IPluginIntegrationService.UpdatePluginSettings(System.Collections.Generic.List{Resto.Front.Api.Data.Settings.IPluginSettings})">
            <summary>
            Updates plugin settings. Makes a call to iikoRMS Server, so it should be available.
            </summary>
            <param name="updatedSettings">New values of settings that should be stored.</param>
        </member>
        <member name="M:Resto.Front.Api.IPluginIntegrationService.GetPaymentProcessorSettingsKey(Resto.Front.Api.IExternalPaymentProcessor)">
            <summary>
            Get <see cref="P:Resto.Front.Api.Data.Settings.IPluginSettings.PluginKey"/> to use with settings of payment processor.
            </summary>
            <param name="processor">Payment processor.</param>
            <returns>Key.</returns>
            <seealso cref="T:Resto.Front.Api.Data.Settings.IPluginSettings"/>
            <seealso cref="P:Resto.Front.Api.Data.Settings.IPluginSettings.PluginKey"/>
        </member>
        <member name="T:Resto.Front.Api.IExternalPaymentProcessor">
            <summary>
            Common interface for payment front plugin.
            Derive from <see cref="T:System.MarshalByRefObject"/> and implement this interface to make custom payment processor.
            Your implementation should be registered by <see cref="M:Resto.Front.Api.IOperationService.RegisterPaymentSystem(Resto.Front.Api.IExternalPaymentProcessor,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.IExternalPaymentProcessor.PaymentSystemKey">
            <summary>
            Key of the payment system, that should be registered as external.
            </summary>
        </member>
        <member name="P:Resto.Front.Api.IExternalPaymentProcessor.PaymentSystemName">
            <summary>
            Payment system title that will be displayed in BackOffice.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IExternalPaymentProcessor.CollectData(System.Guid,System.Guid,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.IReceiptPrinter,Resto.Front.Api.UI.IViewManager,Resto.Front.Api.IPaymentDataContext)">
            <summary>
            Perform data collect operation on payment item selected.
            </summary>
            <param name="orderId">Order Id.</param>
            <param name="paymentTypeId">Payment type Id.</param>
            <param name="cashier">User handling payments and receipts.</param>
            <param name="printer"><see cref="T:Resto.Front.Api.IReceiptPrinter"/>Object to perform print actions. Should not be used after method returns.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/>Object to show dialogs. Should not be used after method returns.</param>
            <param name="context"><see cref="T:Resto.Front.Api.IPaymentDataContext"/>Object to work with plugin saved data in iiko storage.</param>
            <remarks>Called when plug-in payment item is going to be added to the order.</remarks>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionCancelledException">Exception to notify that payment actions was cancelled with no message shown.</exception>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException">Exception to notify that payment actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.IExternalPaymentProcessor.Pay(System.Decimal,Resto.Front.Api.Data.Orders.IOrder,System.Guid,System.Guid,Resto.Front.Api.Data.Organization.IPointOfSale,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.IOperationService,Resto.Front.Api.IReceiptPrinter,Resto.Front.Api.UI.IViewManager,Resto.Front.Api.IPaymentDataContext)">
            <summary>
            Perform payment operation.
            </summary>
            <param name="sum">Sum to pay.</param>
            <param name="order">Order.</param>
            <param name="paymentTypeId">Payment type Id.</param>
            <param name="transactionId">Transaction Id.</param>
            <param name="pointOfSale">Point of sale.</param>
            <param name="cashier">User handling payments and receipts.</param>
            <param name="operationService">Allows to edit entities within this method. Should not be used after method returns.</param>
            <param name="printer"><see cref="T:Resto.Front.Api.IReceiptPrinter"/> object to perform print actions. Should not be used after method returns.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <param name="context"><see cref="T:Resto.Front.Api.IPaymentDataContext"/> object to work with plugin saved data in iiko storage.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionCancelledException">Exception to notify that payment actions was cancelled with no message shown.</exception>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException">Exception to notify that payment actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.IExternalPaymentProcessor.EmergencyCancelPayment(System.Decimal,System.Nullable{System.Guid},System.Guid,System.Guid,Resto.Front.Api.Data.Organization.IPointOfSale,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.IReceiptPrinter,Resto.Front.Api.UI.IViewManager,Resto.Front.Api.IPaymentDataContext)">
            <summary>
            Perform emergency cancel payment operation.
            </summary>
            <param name="sum">Sum to return.</param>
            <param name="orderId">Order Id.</param>
            <param name="paymentTypeId">Payment type Id.</param>
            <param name="transactionId">Transaction Id.</param>
            <param name="pointOfSale">Point of sale.</param>
            <param name="cashier">User handling payments and receipts.</param>
            <param name="printer"><see cref="T:Resto.Front.Api.IReceiptPrinter"/> object to perform print actions. Should not be used after method returns.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <param name="context"><see cref="T:Resto.Front.Api.IPaymentDataContext"/> object to work with plugin saved data in iiko storage.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionCancelledException">Exception to notify that payment actions was cancelled with no message shown.</exception>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException">Exception to notify that cancel payment actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.IExternalPaymentProcessor.ReturnPayment(System.Decimal,System.Nullable{System.Guid},System.Guid,System.Guid,Resto.Front.Api.Data.Organization.IPointOfSale,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.IReceiptPrinter,Resto.Front.Api.UI.IViewManager,Resto.Front.Api.IPaymentDataContext)">
            <summary>
            Perform return payment operation.
            </summary>
            <param name="sum">Sum to return.</param>
            <param name="orderId">Order Id.</param>
            <param name="paymentTypeId">Payment type Id.</param>
            <param name="transactionId">Transaction Id.</param>
            <param name="pointOfSale">Point of sale.</param>
            <param name="cashier">User handling payments and receipts.</param>
            <param name="printer"><see cref="T:Resto.Front.Api.IReceiptPrinter"/> object to perform print actions. Should not be used after method returns.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <param name="context"><see cref="T:Resto.Front.Api.IPaymentDataContext"/> object to work with plugin saved data in iiko storage.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionCancelledException">Exception to notify that payment actions was cancelled with no message shown.</exception>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException">Exception to notify that return payment actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.IExternalPaymentProcessor.OnPaymentAdded(Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.IOperationService,Resto.Front.Api.IReceiptPrinter,Resto.Front.Api.UI.IViewManager,Resto.Front.Api.IPaymentDataContext)">
            <summary>
            Perform order edit operation after payment is added to order (on preliminary payments page or on payment page).
            </summary>
            <param name="order">Order.</param>
            <param name="paymentItem">Added payment item.</param>
            <param name="cashier">User handling payments and receipts.</param>
            <param name="operationService">Allows to edit entities within this method. Should not be used after method returns.</param>
            <param name="printer"><see cref="T:Resto.Front.Api.IReceiptPrinter"/> object to perform print actions. Should not be used after method returns.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <param name="context"><see cref="T:Resto.Front.Api.IPaymentDataContext"/> object to work with plugin saved data in iiko storage.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionCancelledException">Exception to notify that payment actions were cancelled with no message shown.</exception>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException">Exception to notify that payment actions were not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.IExternalPaymentProcessor.OnPreliminaryPaymentEditing(Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.IOperationService,Resto.Front.Api.IReceiptPrinter,Resto.Front.Api.UI.IViewManager,Resto.Front.Api.IPaymentDataContext)">
            <summary>
            Perform operations when preliminary payment is going to be edited.
            If method throws exception, payment is removed from order.
            </summary>
            <param name="order">Order.</param>
            <param name="paymentItem">Payment item.</param>
            <param name="cashier">User handling payments and receipts.</param>
            <param name="operationService">Allows to edit entities within this method. Should not be used after method returns.</param>
            <param name="printer"><see cref="T:Resto.Front.Api.IReceiptPrinter"/> object to perform print actions. Should not be used after method returns.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <param name="context"><see cref="T:Resto.Front.Api.IPaymentDataContext"/> object to work with plugin saved data in iiko storage.</param>
            <param name="progressBar">Object, that provides communication with progress bar.</param>
            <returns>Whether standard numpad is active after method ends. If new sum is set in action and no further edit is considered, return false. Otherwise return true to enable editing sum via numbad.</returns>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionCancelledException">Exception to notify that payment actions were cancelled with no message shown.</exception>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException">Exception to notify that payment actions were not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.IExternalPaymentProcessor.ReturnPaymentWithoutOrder(System.Decimal,System.Guid,Resto.Front.Api.Data.Organization.IPointOfSale,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.IReceiptPrinter,Resto.Front.Api.UI.IViewManager)">
            <summary>
            Perform return payment sum without iikoFront order.
            </summary>
            <param name="sum">Sum to return.</param>
            <param name="paymentTypeId">Payment type Id.</param>
            <param name="pointOfSale">Point of sale.</param>
            <param name="cashier">User handling payments and receipts.</param>
            <param name="printer"><see cref="T:Resto.Front.Api.IReceiptPrinter"/> object to perform print actions. Should not be used after method returns.</param>
            <param name="viewManager"><see cref="T:Resto.Front.Api.UI.IViewManager"/> object to show dialogs. Should not be used after method returns.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionCancelledException">Exception to notify that payment actions was cancelled with no message shown.</exception>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException">Exception to notify that cancel payment actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.IExternalPaymentProcessor.PaySilently(System.Decimal,System.Guid,System.Guid,System.Guid,Resto.Front.Api.Data.Organization.IPointOfSale,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.IReceiptPrinter,Resto.Front.Api.IPaymentDataContext)">
            <summary>
            Perform silent payment operation.
            </summary>
            <param name="sum">Sum to pay.</param>
            <param name="orderId">Order Id.</param>
            <param name="paymentTypeId">Payment type Id.</param>
            <param name="transactionId">Transaction Id.</param>
            <param name="pointOfSale">Point of sale.</param>
            <param name="cashier">User handling payments and receipts.</param>
            <param name="printer"><see cref="T:Resto.Front.Api.IReceiptPrinter"/> object to perform print actions. Should not be used after method returns.</param>
            <param name="context"><see cref="T:Resto.Front.Api.IPaymentDataContext"/> object to work with plugin saved data in iiko storage.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionCancelledException">Exception to notify that payment actions was cancelled with no message shown.</exception>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException">Exception to notify that payment actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.IExternalPaymentProcessor.EmergencyCancelPaymentSilently(System.Decimal,System.Nullable{System.Guid},System.Guid,System.Guid,Resto.Front.Api.Data.Organization.IPointOfSale,Resto.Front.Api.Data.Security.IUser,Resto.Front.Api.IReceiptPrinter,Resto.Front.Api.IPaymentDataContext)">
            <summary>
            Perform silent emergency cancel payment operation.
            </summary>
            <param name="sum">Sum to return.</param>
            <param name="orderId">Order Id.</param>
            <param name="paymentTypeId">Payment type Id.</param>
            <param name="transactionId">Transaction Id.</param>
            <param name="pointOfSale">Point of sale.</param>
            <param name="cashier">User handling payments and receipts.</param>
            <param name="printer"><see cref="T:Resto.Front.Api.IReceiptPrinter"/> object to perform print actions. Should not be used after method returns.</param>
            <param name="context"><see cref="T:Resto.Front.Api.IPaymentDataContext"/> object to work with plugin saved data in iiko storage.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionCancelledException">Exception to notify that payment actions was cancelled with no message shown.</exception>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException">Exception to notify that cancel payment actions was not successful.</exception>
        </member>
        <member name="M:Resto.Front.Api.IExternalPaymentProcessor.CanPaySilently(System.Decimal,System.Nullable{System.Guid},System.Guid,Resto.Front.Api.IPaymentDataContext)">
            <summary>
            Whether to perform payment operation silently.
            </summary>
            <param name="sum">Sum to return.</param>
            <param name="orderId">Order Id.</param>
            <param name="paymentTypeId">Payment type Id.</param>
            <param name="context"><see cref="T:Resto.Front.Api.IPaymentDataContext"/> object to work with plugin saved data in iiko storage.</param>
            <returns>If the payment operation must be processed silently then return true. Otherwise return false.</returns>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionCancelledException">Exception to notify that payment actions was cancelled with no message shown.</exception>
            <exception cref="T:Resto.Front.Api.Exceptions.PaymentActionFailedException">Exception to notify that payment actions was not successful.</exception>
        </member>
        <member name="T:Resto.Front.Api.IFrontPlugin">
            <summary>
            Common interface for every front plugin. Implement this interface to make front treat your class as plugin.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.IInternalOperationService">
            <summary>
            Contract for internal (privileged) operations.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IInternalOperationService.SendDeliverySms(System.String,System.String,System.Int32,Resto.Front.Api.Data.Orders.IDeliveryOrder)">
            <summary>
            Send SMS message.
            </summary>
            <param name="phone">Phone number in international format (example: +79271234567).</param>
            <param name="message">Message text.</param>
            <param name="orderNumber">Order number.</param>
            <param name="deliveryOrder">Delivery.</param>
            <exception cref="T:Resto.Front.Api.Exceptions.ServerConnectionException" />
        </member>
        <member name="M:Resto.Front.Api.IInternalOperationService.GetServerUrl">
            <summary>
            Return url of server from Front configuration.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IInternalOperationService.RegisterDeliveryTerminal(System.Guid)">
            <summary>
            Register the cash-server as delivery terminal with specified identifier.
            </summary>
            <param name="deliveryTerminalId">GUID of delivery terminal.</param>
        </member>
        <member name="M:Resto.Front.Api.IInternalOperationService.GetLastUser">
            <summary>
            Return current logged in user, or last log out user, or <c>null</c> if nobody logged in after iikoFront started.
            </summary>
        </member>
        <member name="T:Resto.Front.Api.ILicensingService">
            <summary>
            Service provides access to plugin licensing.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.ILicensingService.AcquireSlot(System.Int32,System.Guid)">
            <summary>
            Acquires one slot from the specified module for client with specified identifier.
            This method will temporarily bind slot to the client,
            repeated acquisitions from the same module for the same client will return the same slot.
            </summary>
            <param name="moduleId">The licensable module identifier.</param>
            <param name="clientId">The calling client identifier.</param>
            <returns>A token for single licensing unit (plugin instance or external connection),
            disposing it releases slot and unbinds the slot from the client.</returns>
            <exception cref="T:Resto.Front.Api.Exceptions.InsufficientLicenseException">License slot could not be acquired.</exception>
        </member>
        <member name="T:Resto.Front.Api.IReceiptPrinter">
            <summary>
            Instance to perform print actions. Should be used only when it comes like function parameter.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IReceiptPrinter.Print(Resto.Front.Api.Data.Cheques.ReceiptSlip)">
            <summary>
            Printing <see cref="T:Resto.Front.Api.Data.Cheques.ReceiptSlip"/> object on receipt printer.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetUser(Resto.Front.Api.Data.Security.ICredentials)">
            <summary>
            Get user corresponding to specified credentials.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <returns>
            User whose pin have been used to authenticate current plugin.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetTerminalDeliveryDuration">
            <summary>
            Returns courier and self-service delivery duration time set on a delivery terminal.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CalculateDeliveryTerminalWorkload">
            <summary>
            Returns terminal workload.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetDeliverySection">
            <summary>
            Returns section of current group where delivery orders are created. Is determined by default table of group.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.IsDeliveryActive">
            <summary>
            Returns whether delivery is active.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.IsDeliveryConfirmationActive">
            <summary>
            Returns whether delivery confirmation is active.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CancelNewDelivery(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Brd.IDeliveryCancelCause)">
            <summary>
            Cancels new delivery.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="delivery">
            Delivery to cancel
            </param>
            <param name="cancelCause">
            Cause of cancelling delivery
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.ChangeDeliveryOpinion(System.Guid,System.String,System.Collections.Generic.IDictionary{System.Guid,System.Int32})">
            <summary>
            Changes client's opinion on closed delivery.
            </summary>
            <param name="DeliveryId">
            Id of the delivery to change opinion for.
            </param>
            <param name="OpinionComment">
            Client's textual opinion.
            </param>
            <param name="Marks">
            Client's marks for survey items. Mark should be equal to either 0 or 100.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetHostTerminal">
            <summary>
            Returns info about the current terminal.
            </summary>
            <returns>
            Info about the current terminal.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetHostTerminalPointsOfSale">
            <summary>
            Returns list of points of sale attached to current terminal. Empty list means that current terminal is not cash terminal.
            </summary>
            <returns>
            List of point of sales attached to current terminal.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetHostDeliverySettings">
            <summary>
            Returns delivery settings of restaurant
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetActiveRemovalTypes">
            <summary>
            Gets removal types which are allowed to use.
            </summary>
            <remarks>
            Deleting printed product is unwanted operation usually, so it requires providing reason and removal type. If product was marred, it could be written off from some account depending on removal type.
            </remarks>
            <seealso cref="M:Resto.Front.Api.Editors.IEditSession.DeletePrintedOrderItem(System.String,Resto.Front.Api.Data.Orders.WriteoffOptions,Resto.Front.Api.Editors.Stubs.IOrderStub,Resto.Front.Api.Editors.Stubs.IOrderRootItemStub)" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetDonationTypesCompatibleWith(Resto.Front.Api.Data.Orders.IOrder)">
            <summary>
            Gets donation types which are allowed to use with the order.
            </summary>
            <param name="order">
            Order.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetAllProducts">
            <summary>
            Gets all products (both active and inactive).
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetQuickMenu(Resto.Front.Api.Data.Organization.Sections.IRestaurantSection,System.DayOfWeek)">
            <summary>
            Returns quick menu for specified restaurant section and day.
            </summary>
            <remarks>
            Quick menu is zero or more pages with links to products and product groups, can be used in order editor UI to allow adding items to order directly instead of searching them in hierarchical menu.
            </remarks>
            <param name="restaurantSection">
            Restaurant section which contains order's table. Different sections may have different quick menu pages.
            </param>
            <param name="dayOfWeek">
            Specifies for which day menu will be returned. Sections may have different quick menu for different days of week.
            </param>
            <seealso cref="M:Resto.Front.Api.IOperationService.GetHierarchicalMenu" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetProductMenuImage(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns a byte sequence presenting an image to be shown as a background on a menu button for the specified product. If the product doesn't have an image, <c>null</c> will be returned.
            </summary>
            <remarks>
            The image may be of any format, depending on what the user has uploaded.
            </remarks>
            <param name="product">
            Product to get menu image for.
            </param>
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProduct.HasMenuImage" />
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProduct.BackgroundColor" />
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProduct.FontColor" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetProductGroupMenuImage(Resto.Front.Api.Data.Assortment.IProductGroup)">
            <summary>
            Returns a byte sequence presenting an image to be shown as a background on a menu button for the specified product group. If the product group doesn't have an image, <c>null</c> will be returned.
            </summary>
            <remarks>
            The image may be of any format, depending on what the user has uploaded.
            </remarks>
            <param name="productGroup">
            Product group to get menu image for.
            </param>
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProductGroup.HasMenuImage" />
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProductGroup.BackgroundColor" />
            <seealso cref="P:Resto.Front.Api.Data.Assortment.IProductGroup.FontColor" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetProductsRemainingAmounts">
            <summary>
            Gets remaining amounts of products in stop list.
            </summary>
            <remarks>
            Products that has small remaining amount can be added to stop list to limit consumption. Selling of product with zero or negative remaining amount is restricted.
            </remarks>
            <returns>
            Dictionary of products and theirs remaining amounts.
            </returns>
            <seealso cref="M:Resto.Front.Api.IOperationService.IsProductSellingRestricted(Resto.Front.Api.Data.Assortment.IProduct)" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.IsProductSellingRestricted(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Checks remaining amount of the product and determines whether selling of that product is restricted.
            </summary>
            <remarks>
            If product selling is restricted, it can be sold only by user with permission to edit menu.
            </remarks>
            <param name="product">
            Product to check remaining amount.
            </param>
            <returns>
            <c>true</c> if the product has too low amount and selling is restricted, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetPrice(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Assortment.IProductSize,Resto.Front.Api.Data.Orders.IPriceCategory,System.DateTime)">
            <summary>
            Returns price for the product according to the given client price category.
            </summary>
            <param name="product">
            Product to get price for.
            </param>
            <param name="productSize">
            Product size to get price for or <c>null</c> if the product doesn't have a scale.
            </param>
            <param name="priceCategory">
            Price category to get price according to.
            </param>
            <param name="pricingTime">
            Time for which calculated price.
            </param>
        </member>
        <!-- Проигнорирован некорректный комментарий XML для члена "M:Resto.Front.Api.IOperationService.SearchStreets(System.String,Resto.Front.Api.Data.Search.SearchType,Resto.Front.Api.Data.Search.StreetFields,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Brd.ICity})" -->
        <member name="M:Resto.Front.Api.IOperationService.SearchClients(System.String,Resto.Front.Api.Data.Search.SearchType,Resto.Front.Api.Data.Search.ClientFields)">
            <summary>
            Search clients. The number of results is limited.
            </summary>
            <param name="query">
            Search query.
            </param>
            <param name="searchType">
            Type of search. Default type: Prefix
            </param>
            <param name="fields">
            Customer's fields for search. Default is <see cref="F:Resto.Front.Api.Data.Search.ClientFields.All" />.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetRelatedDeliveryOrders(Resto.Front.Api.Data.Orders.IDeliveryOrder)">
            <summary>
            Gets all deliveries that are related with argument through splitting between cash registers. Delivery itself is also returned. If delivery was not split, returns delivery passed as argument.
            </summary>
            <param name="delivery">
            Delivery order to get related deliveries.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.SubmitChanges(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Editors.IEditSession)">
            <summary>
            Applies all changes made with specified edit session.
            </summary>
            <remarks>
            Do not use current edit session instance for another changes after submitting, create new edit session instead.
            </remarks>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="editSession">
            Edit session with changes.
            </param>
            <returns>
            Created or changed entities. Use corresponding Get method to retrieve entities by their stubs.
            </returns>
            <seealso cref="M:Resto.Front.Api.IOperationService.CreateEditSession" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CreateEditSession">
            <summary>
            Creates an edit session. All changes made with this session will be accumulated without affecting entities. Use <see cref="M:Resto.Front.Api.IOperationService.SubmitChanges(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Editors.IEditSession)"/> method to apply all changes or do nothing to discard them.
            </summary>
            <returns>
            A new edit session.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.AddErrorMessage(System.String,System.String)">
            <summary>
            Shows non-modal error message in the left top corner of the screen.
            </summary>
            <param name="message">
            The message text.
            </param>
            <param name="sender">
            The message sender.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.AddErrorMessage(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Shows non-modal error message in the left top corner of the screen.
            </summary>
            <param name="message">
            The message text.
            </param>
            <param name="sender">
            The message sender.
            </param>
            <param name="timeout">
            The message display timeout. If <c>null</c>, message will be shown until user manually closes it, else message will be automatically closed after the specified amount of time.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.AddWarningMessage(System.String,System.String)">
            <summary>
            Shows non-modal warning message in the left top corner of the screen.
            </summary>
            <param name="message">
            The message text.
            </param>
            <param name="sender">
            The message sender.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.AddWarningMessage(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Shows non-modal warning message in the left top corner of the screen.
            </summary>
            <param name="message">
            The message text.
            </param>
            <param name="sender">
            The message sender.
            </param>
            <param name="timeout">
            The message display timeout. If <c>null</c>, message will be shown until user manually closes it, else message will be automatically closed after the specified amount of time.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.AddNotificationMessage(System.String,System.String)">
            <summary>
            Shows non-modal notification message in the left top corner of the screen.
            </summary>
            <param name="message">
            The message text.
            </param>
            <param name="sender">
            The message sender.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.AddNotificationMessage(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Shows non-modal notification message in the left top corner of the screen.
            </summary>
            <param name="message">
            The message text.
            </param>
            <param name="sender">
            The message sender.
            </param>
            <param name="timeout">
            The message display timeout. If <c>null</c>, message will be shown until user manually closes it, else message will be automatically closed after the specified amount of time.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.PrintOrderItems(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Orders.IOrderCookingItem})">
            <summary>
            Prints service cheque for defined order item products.
            </summary>
            <remarks>
            All order items must be either not printed (so they will be printed) or printed (so they will be reprinted), but not mixed.
            </remarks>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order which items will be printed.
            </param>
            <param name="orderItems">
            Order items to be printed.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.PrintBillCheque(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Print.PrinterSelectionMode)">
            <summary>
            Changes the order to <see cref="F:Resto.Front.Api.Data.Orders.OrderStatus.Bill" /> status if it is not <see cref="F:Resto.Front.Api.Data.Orders.OrderStatus.Bill" /> and prints bill cheque.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to bill.
            </param>
            <param name="printerSelectionMode">
            Specifies how to select a printer to print bill cheque.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.BillOrder(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,System.Int32)">
            <summary>
            Changes the order to <see cref="F:Resto.Front.Api.Data.Orders.OrderStatus.Bill" /> status and returns text of bill cheque.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to bill.
            </param>
            <param name="tapeWidth">
            Result text tape width.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CancelBill(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder)">
            <summary>
            Сhanges the order to the <see cref="F:Resto.Front.Api.Data.Orders.OrderStatus.New" /> status and prints the bill cancellation cheque.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to cancel bill.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.StartCourseCooking(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.OrderItemCourse)">
            <summary>
            Starts cooking for all order item products of the specified course.
            </summary>
            <remarks>
            Cooking of <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Vip"/> and <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.First"/> course products start immediately after printing, so allowed course values are <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Second"/>, <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Third"/> or <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Fourth"/> only.
            </remarks>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to start products cooking from.
            </param>
            <param name="course">
            Which course products cooking should be started.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.StartProductsCooking(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.Orders.IOrderCookingItem})">
            <summary>
            Starts cooking for the specified order item products.
            </summary>
            <remarks>
            Products must be printed with one of the following cooking priorities: <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Second"/>, <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Third"/> or <see cref="F:Resto.Front.Api.Data.Orders.OrderItemCourse.Fourth"/>
            </remarks>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to start products cooking from.
            </param>
            <param name="products">
            Order item products to start cooking.
            </param>
            <seealso cref="M:Resto.Front.Api.IOperationService.StartCourseCooking(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.OrderItemCourse)" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.PrintBanquet(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Brd.IReserve)">
            <summary>
            Prints preliminary document with estimated event date and time, planned menu, guests count, client contacts, prepay info, etc.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="banquet">
            Banquet to print. Must be in <see cref="F:Resto.Front.Api.Data.Brd.ReserveStatus.New" /> status and have an order (<see cref="P:Resto.Front.Api.Data.Brd.IReserve.Order"/>).
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.PrintTableReservedCheque(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Brd.IReserve)">
            <summary>
            Prints short “Table reserved” document with estimated event date and time, guests count and client contacts. Can be used to place onto reserved table as a hint not to occupy it.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="reserve">
            Reserve to print “Table reserved” cheque for.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.PayOrderAndPayOutOnUser(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Payments.IPaymentType,System.Decimal)">
            <summary>
            Pay order and pay out on user.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to pay.
            </param>
            <param name="paymentType">
            Payment type to pay. Should be “silent” payment type from <see cref="M:Resto.Front.Api.IOperationService.GetPaymentTypesToPayOutOnUser" />
            </param>
            <param name="sum">
            Sum to pay.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.PayOrder(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder)">
            <summary>
            Pay order with included processed payment items.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to pay.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.SplitOrderBetweenCashRegisters(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder)">
            <summary>
            Split order between cash registers according to the current point of sale mapping.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to split.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.NeedToSplitOrderBeforePayment(Resto.Front.Api.Data.Orders.IOrder)">
            <summary>
            Checks if order should be splitted between cash registers before payment. Method also returns estimated point of sale for order if it can be determinated at the moment.
            </summary>
            <param name="order">
            Order to check.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetPaymentTypesToPayOutOnUser">
            <summary>
            Returns payment types that can be processed “silently”, without user interface.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CheckCanEditOrder(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder)">
            <summary>
            If current user has permissions to view order.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to check.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CheckProductsSellingRestrictions(Resto.Front.Api.Data.Security.ICredentials,System.Collections.Generic.Dictionary{Resto.Front.Api.Data.Assortment.IProduct,System.Decimal})">
            <summary>
            If current user can add these products with such amounts.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="productsAndAmount">
            Products and amount to check. Amount should be between <see cref="F:Resto.Front.Api.Data.Orders.ProductsSellingRestrictions.MinimumItemAmount" /> and <see cref="F:Resto.Front.Api.Data.Orders.ProductsSellingRestrictions.MaximumItemAmount" />
            </param>
            <seealso cref="M:Resto.Front.Api.IOperationService.GetProductsRemainingAmounts" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.RegisterPaymentSystem(Resto.Front.Api.IExternalPaymentProcessor,System.Boolean)">
            <summary>
            Registers payment system.
            </summary>
            <param name="paymentProcessor">
            Payment plugin paymentProcessor.
            </param>
            <param name="canProcessPaymentReturnWithoutOrder">
            Can process payment return without order.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.RegisterCashRegisterFactory(Resto.Front.Api.Devices.ICashRegisterFactory)">
            <summary>
            Registers cash register factory.
            </summary>
            <param name="cashRegisterFactory">
            Cash register factory.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.RegisterScaleFactory(Resto.Front.Api.Devices.IScaleFactory)">
            <summary>
            Registers scale factory.
            </summary>
            <param name="scaleFactory">
            Scale factory.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.RegisterChequeTaskProcessor(Resto.Front.Api.Devices.ChequeTaskProcessor.IChequeTaskProcessor)">
            <summary>
            Registers chequeTaskProcessor for extansion the functionality of the cash register.
            </summary>
            <param name="chequeTaskProcessor">
            Processor to extend the functionality of the cash register.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CanProductBePaidWithPaymentType(Resto.Front.Api.Data.Assortment.IProduct,Resto.Front.Api.Data.Payments.IPaymentType)">
            <summary>
            Function describes if the product is compatible with payment type, i.e. payment type can be used to pay for the product.
            </summary>
            <param name="product">
            Product.
            </param>
            <param name="paymentType">
            Payment type.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.DeleteOrder(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder)">
            <summary>
            Deletes order. Order must have no printed items. User must have rights to edit orders.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order that must be deleted.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CancelReserve(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Brd.IReserve,Resto.Front.Api.Data.Brd.ReserveCancelReason)">
            <summary>
            Cancels reservation due to some reason
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="reserve">
            Reserve to cancel.
            </param>
            <param name="reason">
            Reason to cancel planned event.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.IsAllCafeSessionsOpen">
            <summary>
            Returns true if all cafe sessions is open.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.IsMultiCashRegisterConfiguration">
            <summary>
            Returns true if multi cash register configuration allowed.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetOrderItemProductGroups(Resto.Front.Api.Data.Orders.IOrder)">
            <summary>
            Returns product groups from the specified order. Products in each group are intended to be cooked together.
            </summary>
            <seealso cref="M:Resto.Front.Api.Editors.IEditSession.GroupOrderCookingItems(System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Editors.Stubs.IOrderCookingItemStub},Resto.Front.Api.Editors.Stubs.IOrderStub)" />
            <seealso cref="M:Resto.Front.Api.Editors.IEditSession.UngroupOrderCookingItems(System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Editors.Stubs.IOrderCookingItemStub},Resto.Front.Api.Editors.Stubs.IOrderStub)" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetPreliminaryOrders">
            <summary>
            Get all preliminary orders.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetPreliminaryOrderById(System.Guid)">
            <summary>
            Returns preliminaryOrder by id or <c>null</c> if preliminaryOrder with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetPreliminaryOrderById(System.Guid)">
            <summary>
            Returns preliminaryOrder by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CreatePreliminaryOrder(System.String,System.String,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.DataTransferObjects.PreliminaryOrderItemProduct})">
            <summary>
            Create new preliminary order.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.DeletePreliminaryOrder(Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrder)">
            <summary>
            Deletes preliminary order
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.ChangePreliminaryOrder(Resto.Front.Api.Data.PreliminaryOrders.IPreliminaryOrder,System.String,System.String,System.Collections.Generic.IReadOnlyList{Resto.Front.Api.Data.DataTransferObjects.PreliminaryOrderItemProduct})">
            <summary>
            Changes preliminary order.
            </summary>
            <remarks>
            Changing preliminary orders, which were created on another terminal, may take a long time due to network latency.
            </remarks>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.EnablePreliminaryOrdersScreen">
            <summary>
            Enable preliminary orders screen for iikoFront user.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.SearchDiscountCardByNumber(System.String)">
            <summary>
            Searches a discount card by given card number.
            </summary>
            <param name="cardNumber">
            Number to search.
            </param>
            <returns>
            Card with given number or <c>null</c> if card wasn't found.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CreateDiscountCard(System.String,System.String,Resto.Front.Api.Data.Orders.IPriceCategory,Resto.Front.Api.Data.Orders.IDiscountType)">
            <summary>
            Creates a new discount card.
            </summary>
            <param name="cardNumber">
            Number of discount card.
            </param>
            <param name="ownerName">
            Owner name of discount card.
            </param>
            <param name="priceCategory">
            Price category. Cannot be combined with <paramref name="discountType" />.
            </param>
            <param name="discountType">
            Discount type. Cannot be combined with <paramref name="priceCategory" />.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.UpdateDiscountCard(System.Guid,System.String,System.String,Resto.Front.Api.Data.Orders.IPriceCategory,Resto.Front.Api.Data.Orders.IDiscountType)">
            <summary>
            Updates an existing discount card.
            </summary>
            <param name="id">
            Id of a discount card to update.
            </param>
            <param name="cardNumber">
            New number for a discount card.
            </param>
            <param name="ownerName">
            New owner name for a discount card.
            </param>
            <param name="priceCategory">
            New price category for a discount card. Cannot be combined with <paramref name="discountType" />.
            </param>
            <param name="cardDiscountType">
            New discount type for a discount card. Cannot be combined with <paramref name="priceCategory" />.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.AddClientToOrder(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Brd.IClient)">
            <summary>
            Returns true if client is bound to the order.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to bind the client.
            </param>
            <param name="client">
            The client will be bound to the order.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.RemoveOrderClient(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Brd.IClient)">
            <summary>
            Returns true if client is unbound of the order.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to unbind the client.
            </param>
            <param name="client">
            The client will be unbound of the order.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetActivePaymentTypes(Resto.Front.Api.IExternalPaymentProcessor)">
            <summary>
            Returns active payment types bound to the specified processor.
            </summary>
            <param name="processor">
            Hosting payment processor
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetSelectiveDiscountItemSettings(Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IDiscountItem)">
            <summary>
            Returns order items to which the specified selective discount item is applied or <c>null</c> if the discount item is applied to the whole order.
            </summary>
            <param name="Order">
            Order to get selective discount item settings from.
            </param>
            <param name="DiscountItem">
            Selective discount item.
            </param>
            <seealso cref="P:Resto.Front.Api.Data.Orders.IDiscountType.CanApplySelectively" />
            <seealso cref="P:Resto.Front.Api.Data.Orders.IDiscountItem.IsSelectivelyApplied" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetClientByPhone(System.String)">
            <summary>
            Returns client by phone.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.ProcessPrepay(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Payments.IPaymentItem,Resto.Front.Api.Data.Payments.ChequeAdditionalInfo)">
            <summary>
            Processes existing payment item. Payment item should be processed externally or supports silent processing.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order whose payment item will be processed.
            </param>
            <param name="paymentItem">
            Payment item to be processed in iiko.
            </param>
            <param name="chequeAdditionalInfo">
            Cheque additional info for russian fiscal payments according to federal law #54.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.AddDonation(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Payments.IDonationType,Resto.Front.Api.Data.Payments.IPaymentType,Resto.Front.Api.Data.Payments.IPaymentItemAdditionalData,System.Boolean,System.Decimal)">
            <summary>
            Adds new donation to order.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order whose donation will be added.
            </param>
            <param name="donationType">
            Type of donation that will be added.
            </param>
            <param name="paymentType">
            Underlying payment type of the donation to be added. <paramref name="paymentType"/> must be one of <see cref="P:Resto.Front.Api.Data.Payments.IDonationType.PaymentTypes" />.
            </param>
            <param name="additionalData">
            Instance of a payment specific type carrying properties, which will be used to initialize a donation, or <c>null</c> if payment type doesn't require additional data for donation initialization.
            </param>
            <param name="isProcessed">
            Whether donation was already processed by some external system.
            </param>
            <param name="donationSum">
            Sum of donation that will be added.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.DeleteDonation(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Payments.IPaymentItem)">
            <summary>
            Deletes existing donation from the order.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order whose donation will be deleted.
            </param>
            <param name="paymentItem">
            Donation to be deleted from the order.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.DeleteOrderAndHideItemsFromOlap(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder)">
            <summary>
            Deletes order and hides order items from OLAP reports. Order must have no printed items, no payment items and no removed with writeoff items. User must have rights to edit orders.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to remove.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CancelNewDeliveryAndHideItemsFromOlap(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IDeliveryOrder,Resto.Front.Api.Data.Brd.IDeliveryCancelCause)">
            <summary>
            Cancels new delivery and hides delivery order items from OLAP reports.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="delivery">
            Delivery to remove.
            </param>
            <param name="cancelCause">
            Cause of cancelling delivery
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.OpenCafeSession(Resto.Front.Api.Data.Security.ICredentials)">
            <summary>
            Opens cafe session.
            </summary>
            <remarks>
            This operation supported for main cash with single virtual cash register.
            </remarks>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CloseCafeSession(Resto.Front.Api.Data.Security.ICredentials)">
            <summary>
            Closes cafe session.
            </summary>
            <remarks>
            This operation supported for main cash with single virtual cash register.
            </remarks>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetBillPrinter(Resto.Front.Api.Data.Organization.Sections.IRestaurantSection,System.Boolean)">
            <summary>
            Try get bill printer for specified restaurant section.
            </summary>
            <param name="section">
            Printer`s restaurant section. If <paramref name="section"/> not specified uses default table`s section.
            </param>
            <param name="checkIsConfigured">
            If <paramref name="checkIsConfigured"/> = <c>true</c> returns only configured printer.
            </param>
            <returns>
            Instance of printer or <c>null</c> if section does not contains bill printer or bill printer not configured (for <paramref name="checkIsConfigured"/> = <c>true</c>).
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetDocumentPrinter(Resto.Front.Api.Data.Organization.Sections.IRestaurantSection,System.Boolean)">
            <summary>
            Try get document printer for specified restaurant section.
            </summary>
            <param name="section">
            Printer`s restaurant section. If <paramref name="section"/> not specified uses default table`s section.
            </param>
            <param name="checkIsConfigured">
            If <paramref name="checkIsConfigured"/> = <c>true</c> returns only configured printer.
            </param>
            <returns>
            Instance of printer or <c>null</c> if section does not contains document printer or document printer not configured (for <paramref name="checkIsConfigured"/> = <c>true</c>).
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetStickerPrinter(Resto.Front.Api.Data.Organization.Sections.IRestaurantSection,System.Boolean)">
            <summary>
            Try get sticker printer for specified restaurant section.
            </summary>
            <param name="section">
            Printer`s restaurant section. If <paramref name="section"/> not specified uses default table`s section.
            </param>
            <param name="checkIsConfigured">
            If <paramref name="checkIsConfigured"/> = <c>true</c> returns only configured printer.
            </param>
            <returns>
            Instance of printer or <c>null</c> if section does not contains sticker printer or sticker printer not configured (for <paramref name="checkIsConfigured"/> = <c>true</c>).
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetReceiptChequePrinter(System.Boolean)">
            <summary>
            Try get receipt cheque printer for default cash register.
            </summary>
            <param name="checkIsConfigured">
            If <paramref name="checkIsConfigured"/> = <c>true</c> returns only configured printer.
            </param>
            <returns>
            Instance of printer or <c>null</c> if receipt cheque printer not configured (for <paramref name="checkIsConfigured"/> = <c>true</c>).
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetReportPrinter">
            <summary>
            Get instance of report printer
            </summary>
            <returns>
            Instance of report printer.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.Print(Resto.Front.Api.Data.Print.IPrinterRef,Resto.Front.Api.Data.Print.Document)">
            <summary>
            Print document on specified printer.
            </summary>
            <param name="printer">
            Instance of printer.
            </param>
            <param name="document">
            Document to print.
            </param>
            <returns>
            True for successfully printed document.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetReceiptMarkup(Resto.Front.Api.Data.Device.Tasks.ChequeTask,Resto.Front.Api.Data.Device.CashRegisterChequeExtensions,Resto.Front.Api.Data.Device.ICashRegisterInfo)">
            <summary>
            Get reciept markup of the payment.
            </summary>
            <param name="chequeTask">
            CashRegister do cheque task.
            </param>
            <param name="chequeExtensions">
            Additional info.
            </param>
            <param name="cashRegister">
            Cash register.
            </param>
            <returns>
            Markup of the reciept.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.PrintReceiptCheque(System.Guid,Resto.Front.Api.Data.Print.Document)">
            <summary>
            Printing receipts to a printer.
            </summary>
            <param name="cashRegisterId">
            Id of the cashRegister, the printer receipts which will be sent to print
            </param>
            <param name="document">
            Print data.
            </param>
            <returns>
            Markup of the reciept.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.RegisterExternalOperation(System.String,System.String,Resto.Front.Api.RemotingHelpers.RemotableFunc{System.Byte[],System.Byte[]})">
            <summary>
            Exposes a custom operation to be available for call by other plugins. The registration is not permanent, it holds true until disposing the return value, or plugin shutdown.
            </summary>
            <remarks>
            Different plugins running under the same iikoFront application instance can communicate via external operations. iikoFront just transfers requests and responses between plugins without knowing any details. Both producer and consumer plugins should understand the data structure, developers should negotiate a protocol specification, pre-share operation names, handle versioning and so on. Producer plugin registers an operation using <see cref="M:Resto.Front.Api.IOperationService.RegisterExternalOperation(System.String,System.String,Resto.Front.Api.RemotingHelpers.RemotableFunc{System.Byte[],System.Byte[]})" /> and consumer plugin call it using <see cref="M:Resto.Front.Api.IOperationService.CallExternalOperation(System.String,System.String,System.Byte[])" />.
            </remarks>
            <param name="serviceName">
            Identifies the external service, just a namespace for a set of interrelated operations, which helps to group them logically. It's recommended to choose a unique name to avoid collisions with other plugins, i.e. include company's name or plugin's name into the service name. Min length is 1, max length is 50 chars.
            </param>
            <param name="operationName">
            In aggregate with <see cref="!:serviceName" /> identifies the operation. Both names have to be pre-shared with consumer plugins, so that they will be able to call the operation referring it by service and operation name. The combination of a service name and operation name must be unique at the same time. Min length is 1, max length is 50 chars.
            </param>
            <param name="callback">
            The operation implementation, which will be called by other plugins via <see cref="M:Resto.Front.Api.IOperationService.CallExternalOperation(System.String,System.String,System.Byte[])" />.
            </param>
            <seealso cref="M:Resto.Front.Api.IOperationService.CallExternalOperation(System.String,System.String,System.Byte[])" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.CallExternalOperation(System.String,System.String,System.Byte[])">
            <summary>
            Calls an operation which is implemented in another plugin.
            </summary>
            <remarks>
            Different plugins running under the same iikoFront application instance can communicate via external operations. iikoFront just transfers requests and responses between plugins without knowing any details. Both producer and consumer plugins should understand the data structure, developers should negotiate a protocol specification, pre-share operation names, handle versioning and so on. Producer plugin registers an operation using <see cref="M:Resto.Front.Api.IOperationService.RegisterExternalOperation(System.String,System.String,Resto.Front.Api.RemotingHelpers.RemotableFunc{System.Byte[],System.Byte[]})" /> and consumer plugin call it using <see cref="M:Resto.Front.Api.IOperationService.CallExternalOperation(System.String,System.String,System.Byte[])" />.
            </remarks>
            <param name="serviceName">
            Name of the external service which is implemented in another plugin. That name have to be pre-shared with consumer plugins.
            </param>
            <param name="operationName">
            Name of the external operation which is implemented in another plugin and have been registered using <see cref="M:Resto.Front.Api.IOperationService.RegisterExternalOperation(System.String,System.String,Resto.Front.Api.RemotingHelpers.RemotableFunc{System.Byte[],System.Byte[]})" />. That name have to be pre-shared between producer and consumer plugins.
            </param>
            <param name="request">
            The data which will be transferred as an incoming argument into the external operation.
            </param>
            <returns>
            Response returned by the producer plugin.
            </returns>
            <seealso cref="M:Resto.Front.Api.IOperationService.RegisterExternalOperation(System.String,System.String,Resto.Front.Api.RemotingHelpers.RemotableFunc{System.Byte[],System.Byte[]})" />
            <exception cref="T:Resto.Front.Api.Exceptions.ExternalOperationFailedException">When an external operation throws any kind of exception, caller receives the <see cref="T:Resto.Front.Api.Exceptions.ExternalOperationFailedException" /> with original message. Orignal stacktrace can be found in api.log.</exception>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetExternalOperations">
            <summary>
            Returns currently registered external operations grouped by service name.
            </summary>
            <seealso cref="M:Resto.Front.Api.IOperationService.RegisterExternalOperation(System.String,System.String,Resto.Front.Api.RemotingHelpers.RemotableFunc{System.Byte[],System.Byte[]})" />
            <seealso cref="M:Resto.Front.Api.IOperationService.CallExternalOperation(System.String,System.String,System.Byte[])" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetTransportSettings">
            <summary>
            Returns iikoTransport settings.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.ExecuteContinuousOperation(Resto.Front.Api.RemotingHelpers.RemotableAction{Resto.Front.Api.IOperationService})">
            <summary>
            Executes the callback function as one continuous operation by providing temporary instance of <see cref="T:Resto.Front.Api.IOperationService" />, which holds internal locks taken on lockable entities (such as order) until the operation ends.                       It's strongly recommended to avoid potentially obstructive calls in the callback, i.e network calls, heavy I/O or CPU-bound calls, thread blocking and so on, because touched entities will remain locked for a long time.
            </summary>
            <remarks>
            It could be useful for calling several methods of the local <see cref="T:Resto.Front.Api.IOperationService" /> instance sequentially when it's important to call them one by one without outside changes. While all committed changes will immediately become visible for everyone, no one except of the provided callback will be allowed to alter entities which were touched via that short-living <see cref="T:Resto.Front.Api.IOperationService" /> (input argument of the callback).                       For example, you can create a new order and add there guests, products and external prepay using one edit session, but you cannot print order items or process external prepay in the same session, because these operations can't be rolled back and thus aren't available via <see cref="T:Resto.Front.Api.Editors.IEditSession" />.                       Executing these operations separately on a global <see cref="P:Resto.Front.Api.PluginContext.Operations" /> isn't reliable because there is a chance to be interrupted by a user, other plugin or background entity change handlers, which may prevent further our edits by applying conflicting changes or by locking an entity for a long time.
            </remarks>
            <param name="continuousOperation">
            Callback to be executed continuously.
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetTerminalsGroupPointsOfSale(Resto.Front.Api.Data.Organization.ITerminalsGroup)">
            <summary>
            Returns list of points of sale in group.
            </summary>
            <param name="terminalsGroup">
            Terminals Group.
            </param>
            <returns>
            List of point of sales in group.
            </returns>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetCafeSessionByCashRegister(Resto.Front.Api.Data.Device.ICashRegisterInfo)">
            <summary>
            Returns current open cafe session on cash register.
            </summary>
            <param name="cashRegister">
            Cash register
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetPaymentSystemName(Resto.Front.Api.Data.Payments.IPaymentType)">
            <summary>
            Tries to returns base types payment system name, if it exists, elseway returns empty string.
            </summary>
            <param name="paymentType">
            Payment type
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.SendHrsCardTransactionToServer(System.Guid,System.String,System.String,System.String)">
            <summary>
            Sends guest data to the server.
            </summary>
            <param name="orderId">
            Order Id
            </param>
            <param name="guestName">
            Guest name
            </param>
            <param name="guestId">
            Guest Id
            </param>
            <param name="roomNumber">
            Guest room number
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetPastOrder(System.Guid,System.Int32)">
            <summary>
            Get closed order data from server, and returns it.
            </summary>
            <param name="orderId">
            Order Id
            </param>
            <param name="orderNumber">
            Order number
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.RegisterBillChequeTaskResolver(Resto.Front.Api.RemotingHelpers.RemotableFunc{Resto.Front.Api.Data.Orders.IOrder,System.Boolean,Resto.Front.Api.Data.Organization.IPointOfSale})">
            <summary>
            Registers the bill cheque task resolver.
            </summary>
            <remarks>
            If you register your own RegisterBillChequeTaskResolver before printing the iikoFront bill, the delegate will call, transfer the <see cref="T:Resto.Front.Api.Data.Orders.IOrder" /> and flag whether the operation is canceling the bill. You should to return <see cref="T:Resto.Front.Api.Data.Organization.IPointOfSale" /> to redirect bill cheque task to.
            </remarks>
            <param name="billChequeTaskResolver">
            Func with access to <see cref="T:Resto.Front.Api.Data.Orders.IOrder" />, is bill storning bool flag and returning <see cref="T:Resto.Front.Api.Data.Organization.IPointOfSale" /> to redirect bill cheque task to.
            </param>
            <seealso cref="P:Resto.Front.Api.Data.Device.Settings.CashRegisterDriverParameters.IsBillTaskSupported" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetLastChangedOrderTerminal(Resto.Front.Api.Data.Orders.IOrder)">
            <summary>
            Returns termnal that changed order last time.
            </summary>
            <param name="order">
            Order to check
            </param>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.StartService(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderServiceItem)">
            <summary>
            Starts the specified service.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to start service from.
            </param>
            <param name="service">
            Service to start.
            </param>
            <seealso cref="M:Resto.Front.Api.IOperationService.StopService(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderServiceItem)" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.StopService(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderServiceItem)">
            <summary>
            Stops the specified service.
            </summary>
            <param name="credentials">
            The credentials returned by <see cref="M:Resto.Front.Api.IOperationService.AuthenticateByPin(System.String)" /> method.
            </param>
            <param name="order">
            Order to stop service from.
            </param>
            <param name="service">
            Service to stop.
            </param>
            <seealso cref="M:Resto.Front.Api.IOperationService.StartService(Resto.Front.Api.Data.Security.ICredentials,Resto.Front.Api.Data.Orders.IOrder,Resto.Front.Api.Data.Orders.IOrderServiceItem)" />
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetOrganizationFingerprint">
            <summary>
            Returns a fingerprint which can be used to identify an iikoRMS server instance.
            </summary>
            <remarks>
            Sometimes iikoRMS server instances are being cloned with entire database, so that all their key entities have duplicated ids. Fingerprints help to detect changes of some specific server instance properties, which are usually different for cloned instances, but sometimes also may change on the same instance without any cloning. It is assumed that the plugin compares the currently received fingerprint with previously remembered one to ensure that it communicates with the same iikoRMS server instance. Fingerprints equality means that there is the same server instance. When fingerprints are different, plugin should somehow check, whether it is another instance or the fingerprint of the original instance has been changed. The method requires a connection to the iikoRMS server, so calling this method in offline mode will end up with an exception.
            </remarks>
            <exception cref="T:Resto.Front.Api.Exceptions.ExternalOperationFailedException">Underlying network request to the iikoRMS server has failed.</exception>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetUserById(System.Guid)">
            <summary>
            Returns user by id or <c>null</c> if user with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetUserById(System.Guid)">
            <summary>
            Returns user by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetTableById(System.Guid)">
            <summary>
            Returns table by id or <c>null</c> if table with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetTableById(System.Guid)">
            <summary>
            Returns table by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetSectionSchemaById(System.Guid)">
            <summary>
            Returns sectionSchema by id or <c>null</c> if sectionSchema with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetSectionSchemaById(System.Guid)">
            <summary>
            Returns sectionSchema by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetConceptionById(System.Guid)">
            <summary>
            Returns conception by id or <c>null</c> if conception with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetConceptionById(System.Guid)">
            <summary>
            Returns conception by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetPointOfSaleById(System.Guid)">
            <summary>
            Returns pointOfSale by id or <c>null</c> if pointOfSale with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetPointOfSaleById(System.Guid)">
            <summary>
            Returns pointOfSale by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetOrderTypeById(System.Guid)">
            <summary>
            Returns orderType by id or <c>null</c> if orderType with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetOrderTypeById(System.Guid)">
            <summary>
            Returns orderType by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetProductById(System.Guid)">
            <summary>
            Returns product by id or <c>null</c> if product with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetProductById(System.Guid)">
            <summary>
            Returns product by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetProductGroupById(System.Guid)">
            <summary>
            Returns productGroup by id or <c>null</c> if productGroup with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetProductGroupById(System.Guid)">
            <summary>
            Returns productGroup by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetProductCategoryById(System.Guid)">
            <summary>
            Returns productCategory by id or <c>null</c> if productCategory with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetProductCategoryById(System.Guid)">
            <summary>
            Returns productCategory by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetProductScaleById(System.Guid)">
            <summary>
            Returns productScale by id or <c>null</c> if productScale with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetProductScaleById(System.Guid)">
            <summary>
            Returns productScale by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetProductSizeById(System.Guid)">
            <summary>
            Returns productSize by id or <c>null</c> if productSize with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetProductSizeById(System.Guid)">
            <summary>
            Returns productSize by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetCompoundItemTemplateById(System.Guid)">
            <summary>
            Returns compoundItemTemplate by id or <c>null</c> if compoundItemTemplate with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetCompoundItemTemplateById(System.Guid)">
            <summary>
            Returns compoundItemTemplate by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetRemovalTypeById(System.Guid)">
            <summary>
            Returns removalType by id or <c>null</c> if removalType with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetRemovalTypeById(System.Guid)">
            <summary>
            Returns removalType by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetDeliveryOrderById(System.Guid)">
            <summary>
            Returns deliveryOrder by id or <c>null</c> if deliveryOrder with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetDeliveryOrderById(System.Guid)">
            <summary>
            Returns deliveryOrder by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetPriceCategoryById(System.Guid)">
            <summary>
            Returns priceCategory by id or <c>null</c> if priceCategory with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetPriceCategoryById(System.Guid)">
            <summary>
            Returns priceCategory by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetDiscountTypeById(System.Guid)">
            <summary>
            Returns discountType by id or <c>null</c> if discountType with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetDiscountTypeById(System.Guid)">
            <summary>
            Returns discountType by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetDiscountCardById(System.Guid)">
            <summary>
            Returns discountCard by id or <c>null</c> if discountCard with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetDiscountCardById(System.Guid)">
            <summary>
            Returns discountCard by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetKitchenOrderById(System.Guid)">
            <summary>
            Returns kitchenOrder by id or <c>null</c> if kitchenOrder with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetKitchenOrderById(System.Guid)">
            <summary>
            Returns kitchenOrder by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetProductStocksListById(System.Guid)">
            <summary>
            Returns productStocksList by id or <c>null</c> if productStocksList with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetProductStocksListById(System.Guid)">
            <summary>
            Returns productStocksList by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetDeliveryCancelCauseById(System.Guid)">
            <summary>
            Returns deliveryCancelCause by id or <c>null</c> if deliveryCancelCause with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetDeliveryCancelCauseById(System.Guid)">
            <summary>
            Returns deliveryCancelCause by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetReserveById(System.Guid)">
            <summary>
            Returns reserve by id or <c>null</c> if reserve with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetReserveById(System.Guid)">
            <summary>
            Returns reserve by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetRegionById(System.Guid)">
            <summary>
            Returns region by id or <c>null</c> if region with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetRegionById(System.Guid)">
            <summary>
            Returns region by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetCityById(System.Guid)">
            <summary>
            Returns city by id or <c>null</c> if city with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetCityById(System.Guid)">
            <summary>
            Returns city by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetStreetById(System.Guid)">
            <summary>
            Returns street by id or <c>null</c> if street with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetStreetById(System.Guid)">
            <summary>
            Returns street by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetClientById(System.Guid)">
            <summary>
            Returns client by id or <c>null</c> if client with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetClientById(System.Guid)">
            <summary>
            Returns client by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetMarketingSourceById(System.Guid)">
            <summary>
            Returns marketingSource by id or <c>null</c> if marketingSource with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetMarketingSourceById(System.Guid)">
            <summary>
            Returns marketingSource by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetSurveyItemById(System.Guid)">
            <summary>
            Returns surveyItem by id or <c>null</c> if surveyItem with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetSurveyItemById(System.Guid)">
            <summary>
            Returns surveyItem by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetPaymentTypeById(System.Guid)">
            <summary>
            Returns paymentType by id or <c>null</c> if paymentType with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetPaymentTypeById(System.Guid)">
            <summary>
            Returns paymentType by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetTaxCategoryById(System.Guid)">
            <summary>
            Returns taxCategory by id or <c>null</c> if taxCategory with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetTaxCategoryById(System.Guid)">
            <summary>
            Returns taxCategory by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetCashRegisterInfoById(System.Guid)">
            <summary>
            Returns cashRegisterInfo by id or <c>null</c> if cashRegisterInfo with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetCashRegisterInfoById(System.Guid)">
            <summary>
            Returns cashRegisterInfo by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetCafeSessionById(System.Guid)">
            <summary>
            Returns cafeSession by id or <c>null</c> if cafeSession with specified id doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetCafeSessionById(System.Guid)">
            <summary>
            Returns cafeSession by id.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetSectionSchemaByRestaurantSection(Resto.Front.Api.Data.Organization.Sections.IRestaurantSection)">
            <summary>
            Returns sectionSchema of the specified restaurantSection.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetSectionSchemaByRestaurantSection(Resto.Front.Api.Data.Organization.Sections.IRestaurantSection)">
            <summary>
            Returns sectionSchema of the specified restaurantSection or <c>null</c> if restaurantSection doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetParentByProduct(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns parent of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetParentByProduct(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns parent of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetSimpleModifiersByProduct(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns simpleModifiers of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetSimpleModifiersByProduct(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns simpleModifiers of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetGroupModifiersByProduct(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns groupModifiers of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetGroupModifiersByProduct(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns groupModifiers of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetIncludedInMenuSectionsByProduct(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns includedInMenuSections of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetIncludedInMenuSectionsByProduct(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns includedInMenuSections of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetDisabledSizesByProduct(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns disabledSizes of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetDisabledSizesByProduct(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns disabledSizes of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetTemplatedModifiersParamsByProduct(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns templatedModifiersParams of the specified product.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetTemplatedModifiersParamsByProduct(Resto.Front.Api.Data.Assortment.IProduct)">
            <summary>
            Returns templatedModifiersParams of the specified product or <c>null</c> if product doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetParentByProductGroup(Resto.Front.Api.Data.Assortment.IProductGroup)">
            <summary>
            Returns parent of the specified productGroup.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetParentByProductGroup(Resto.Front.Api.Data.Assortment.IProductGroup)">
            <summary>
            Returns parent of the specified productGroup or <c>null</c> if productGroup doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetChildProductsByProductGroup(Resto.Front.Api.Data.Assortment.IProductGroup)">
            <summary>
            Returns childProducts of the specified productGroup.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetChildProductsByProductGroup(Resto.Front.Api.Data.Assortment.IProductGroup)">
            <summary>
            Returns childProducts of the specified productGroup or <c>null</c> if productGroup doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetChildGroupsByProductGroup(Resto.Front.Api.Data.Assortment.IProductGroup)">
            <summary>
            Returns childGroups of the specified productGroup.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetChildGroupsByProductGroup(Resto.Front.Api.Data.Assortment.IProductGroup)">
            <summary>
            Returns childGroups of the specified productGroup or <c>null</c> if productGroup doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetCommonSimpleModifiersByCompoundItemTemplate(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate)">
            <summary>
            Returns commonSimpleModifiers of the specified compoundItemTemplate.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetCommonSimpleModifiersByCompoundItemTemplate(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate)">
            <summary>
            Returns commonSimpleModifiers of the specified compoundItemTemplate or <c>null</c> if compoundItemTemplate doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetCommonGroupModifiersByCompoundItemTemplate(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate)">
            <summary>
            Returns commonGroupModifiers of the specified compoundItemTemplate.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetCommonGroupModifiersByCompoundItemTemplate(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate)">
            <summary>
            Returns commonGroupModifiers of the specified compoundItemTemplate or <c>null</c> if compoundItemTemplate doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetSplittableSimpleModifiersByCompoundItemTemplate(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate)">
            <summary>
            Returns splittableSimpleModifiers of the specified compoundItemTemplate.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetSplittableSimpleModifiersByCompoundItemTemplate(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate)">
            <summary>
            Returns splittableSimpleModifiers of the specified compoundItemTemplate or <c>null</c> if compoundItemTemplate doesn't exist.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.GetSplittableGroupModifiersByCompoundItemTemplate(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate)">
            <summary>
            Returns splittableGroupModifiers of the specified compoundItemTemplate.
            </summary>
        </member>
        <member name="M:Resto.Front.Api.IOperationService.TryGetSplittableGroupModifiersByCompoundItemTemplate(Resto.Front.Api.Data.Assortment.ICompoundItemTemplate)">
            <summary>
            Returns splittableGroupModifiers of the specified compoundItemTemplate or <c>null</c> if compoundItemTemplate doesn't exist.
            </summary>
        </member>
    </members>
</doc>
